{
  "Origin": "",
  "Magic": "0x6D657461",
  "Version": 14,
  "NodeMetadata": {
    "Types": {
      "0": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "AccountId32"
        ],
        "TypeDef": "Composite"
      },
      "1": {
        "Length": 32,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "2": {
        "Primitive": "U8",
        "TypeDef": "Primitive"
      },
      "3": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "Nonce",
            "TypeId": 4
          },
          {
            "Name": "consumers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "providers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "AccountData",
            "TypeId": 5
          }
        ],
        "Path": [
          "frame_system",
          "AccountInfo"
        ],
        "TypeParams": [
          {
            "Name": "Nonce",
            "TypeId": 4
          },
          {
            "Name": "AccountData",
            "TypeId": 5
          }
        ],
        "TypeDef": "Composite"
      },
      "4": {
        "Primitive": "U32",
        "TypeDef": "Primitive"
      },
      "5": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "frozen",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "flags",
            "TypeName": "ExtraFlags",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "6": {
        "Primitive": "U128",
        "TypeDef": "Primitive"
      },
      "7": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ExtraFlags"
        ],
        "TypeDef": "Composite"
      },
      "8": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 9
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 9
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 9
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 9
          }
        ],
        "TypeDef": "Composite"
      },
      "9": {
        "TypeFields": [
          {
            "Name": "ref_time",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_weights",
          "weight_v2",
          "Weight"
        ],
        "TypeDef": "Composite"
      },
      "10": {
        "TypeId": 11,
        "TypeDef": "Compact"
      },
      "11": {
        "Primitive": "U64",
        "TypeDef": "Primitive"
      },
      "12": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "primitive_types",
          "H256"
        ],
        "TypeDef": "Composite"
      },
      "13": {
        "TypeId": 2,
        "TypeDef": "Sequence"
      },
      "14": {
        "TypeFields": [
          {
            "Name": "logs",
            "TypeName": "Vec<DigestItem>",
            "TypeId": 15
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "Digest"
        ],
        "TypeDef": "Composite"
      },
      "15": {
        "TypeId": 16,
        "TypeDef": "Sequence"
      },
      "16": {
        "Variants": [
          {
            "Name": "PreRuntime",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 17
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 6
          },
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 17
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 4
          },
          {
            "Name": "Seal",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 17
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 5
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0
          },
          {
            "Name": "RuntimeEnvironmentUpdated",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "DigestItem"
        ],
        "TypeDef": "Variant"
      },
      "17": {
        "Length": 4,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "18": {
        "TypeId": 19,
        "TypeDef": "Sequence"
      },
      "19": {
        "TypeFields": [
          {
            "Name": "phase",
            "TypeName": "Phase",
            "TypeId": 212
          },
          {
            "Name": "event",
            "TypeName": "E",
            "TypeId": 20
          },
          {
            "Name": "topics",
            "TypeName": "Vec<T>",
            "TypeId": 130
          }
        ],
        "Path": [
          "frame_system",
          "EventRecord"
        ],
        "TypeParams": [
          {
            "Name": "E",
            "TypeId": 20
          },
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "20": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "frame_system::Event<Runtime>",
                "TypeId": 21
              }
            ],
            "Index": 1
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "pallet_balances::Event<Runtime>",
                "TypeId": 30
              }
            ],
            "Index": 7
          },
          {
            "Name": "TransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_payment::Event<Runtime>",
                "TypeId": 32
              }
            ],
            "Index": 9
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "pallet_treasury::Event<Runtime>",
                "TypeId": 33
              }
            ],
            "Index": 11
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "pallet_utility::Event",
                "TypeId": 34
              }
            ],
            "Index": 13
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::Event<Runtime>",
                "TypeId": 37
              }
            ],
            "Index": 15
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "pallet_identity::Event<Runtime>",
                "TypeId": 38
              }
            ],
            "Index": 17
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "pallet_democracy::Event<Runtime>",
                "TypeId": 39
              }
            ],
            "Index": 19
          },
          {
            "Name": "Elections",
            "TypeFields": [
              {
                "TypeName": "pallet_elections_phragmen::Event<Runtime>",
                "TypeId": 44
              }
            ],
            "Index": 21
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                "TypeId": 47
              }
            ],
            "Index": 23
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                "TypeId": 49
              }
            ],
            "Index": 25
          },
          {
            "Name": "Tips",
            "TypeFields": [
              {
                "TypeName": "pallet_tips::Event<Runtime>",
                "TypeId": 50
              }
            ],
            "Index": 27
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "pallet_proxy::Event<Runtime>",
                "TypeId": 51
              }
            ],
            "Index": 29
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "pallet_multisig::Event<Runtime>",
                "TypeId": 54
              }
            ],
            "Index": 31
          },
          {
            "Name": "Uniques",
            "TypeFields": [
              {
                "TypeName": "pallet_uniques::Event<Runtime>",
                "TypeId": 56
              }
            ],
            "Index": 32
          },
          {
            "Name": "StateTrieMigration",
            "TypeFields": [
              {
                "TypeName": "pallet_state_trie_migration::Event<Runtime>",
                "TypeId": 63
              }
            ],
            "Index": 35
          },
          {
            "Name": "AssetRegistry",
            "TypeFields": [
              {
                "TypeName": "pallet_asset_registry::Event<Runtime>",
                "TypeId": 66
              }
            ],
            "Index": 51
          },
          {
            "Name": "Claims",
            "TypeFields": [
              {
                "TypeName": "pallet_claims::Event<Runtime>",
                "TypeId": 82
              }
            ],
            "Index": 53
          },
          {
            "Name": "CollatorRewards",
            "TypeFields": [
              {
                "TypeName": "pallet_collator_rewards::Event<Runtime>",
                "TypeId": 84
              }
            ],
            "Index": 57
          },
          {
            "Name": "Omnipool",
            "TypeFields": [
              {
                "TypeName": "pallet_omnipool::Event<Runtime>",
                "TypeId": 85
              }
            ],
            "Index": 59
          },
          {
            "Name": "TransactionPause",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_pause::Event<Runtime>",
                "TypeId": 89
              }
            ],
            "Index": 60
          },
          {
            "Name": "Duster",
            "TypeFields": [
              {
                "TypeName": "pallet_duster::Event<Runtime>",
                "TypeId": 90
              }
            ],
            "Index": 61
          },
          {
            "Name": "OmnipoolWarehouseLM",
            "TypeFields": [
              {
                "TypeName": "warehouse_liquidity_mining::Event<Runtime, warehouse_liquidity_mining::\nInstance1>",
                "TypeId": 91
              }
            ],
            "Index": 62
          },
          {
            "Name": "OmnipoolLiquidityMining",
            "TypeFields": [
              {
                "TypeName": "pallet_omnipool_liquidity_mining::Event<Runtime>",
                "TypeId": 92
              }
            ],
            "Index": 63
          },
          {
            "Name": "OTC",
            "TypeFields": [
              {
                "TypeName": "pallet_otc::Event<Runtime>",
                "TypeId": 96
              }
            ],
            "Index": 64
          },
          {
            "Name": "CircuitBreaker",
            "TypeFields": [
              {
                "TypeName": "pallet_circuit_breaker::Event<Runtime>",
                "TypeId": 97
              }
            ],
            "Index": 65
          },
          {
            "Name": "Router",
            "TypeFields": [
              {
                "TypeName": "pallet_route_executor::Event<Runtime>",
                "TypeId": 100
              }
            ],
            "Index": 67
          },
          {
            "Name": "DynamicFees",
            "TypeFields": [
              {
                "TypeName": "pallet_dynamic_fees::Event<Runtime>",
                "TypeId": 102
              }
            ],
            "Index": 68
          },
          {
            "Name": "Staking",
            "TypeFields": [
              {
                "TypeName": "pallet_staking::Event<Runtime>",
                "TypeId": 103
              }
            ],
            "Index": 69
          },
          {
            "Name": "Stableswap",
            "TypeFields": [
              {
                "TypeName": "pallet_stableswap::Event<Runtime>",
                "TypeId": 104
              }
            ],
            "Index": 70
          },
          {
            "Name": "Bonds",
            "TypeFields": [
              {
                "TypeName": "pallet_bonds::Event<Runtime>",
                "TypeId": 109
              }
            ],
            "Index": 71
          },
          {
            "Name": "LBP",
            "TypeFields": [
              {
                "TypeName": "pallet_lbp::Event<Runtime>",
                "TypeId": 110
              }
            ],
            "Index": 73
          },
          {
            "Name": "XYK",
            "TypeFields": [
              {
                "TypeName": "pallet_xyk::Event<Runtime>",
                "TypeId": 114
              }
            ],
            "Index": 74
          },
          {
            "Name": "Referrals",
            "TypeFields": [
              {
                "TypeName": "pallet_referrals::Event<Runtime>",
                "TypeId": 115
              }
            ],
            "Index": 75
          },
          {
            "Name": "XcmRateLimiter",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm_rate_limiter::Event<Runtime>",
                "TypeId": 120
              }
            ],
            "Index": 76
          },
          {
            "Name": "Tokens",
            "TypeFields": [
              {
                "TypeName": "orml_tokens::Event<Runtime>",
                "TypeId": 121
              }
            ],
            "Index": 77
          },
          {
            "Name": "Currencies",
            "TypeFields": [
              {
                "TypeName": "pallet_currencies::Event<Runtime>",
                "TypeId": 123
              }
            ],
            "Index": 79
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "orml_vesting::Event<Runtime>",
                "TypeId": 125
              }
            ],
            "Index": 81
          },
          {
            "Name": "EVM",
            "TypeFields": [
              {
                "TypeName": "pallet_evm::Event<Runtime>",
                "TypeId": 127
              }
            ],
            "Index": 90
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "TypeName": "pallet_ethereum::Event",
                "TypeId": 131
              }
            ],
            "Index": 92
          },
          {
            "Name": "EVMAccounts",
            "TypeFields": [
              {
                "TypeName": "pallet_evm_accounts::Event<Runtime>",
                "TypeId": 140
              }
            ],
            "Index": 93
          },
          {
            "Name": "XYKLiquidityMining",
            "TypeFields": [
              {
                "TypeName": "pallet_xyk_liquidity_mining::Event<Runtime>",
                "TypeId": 141
              }
            ],
            "Index": 95
          },
          {
            "Name": "XYKWarehouseLM",
            "TypeFields": [
              {
                "TypeName": "warehouse_liquidity_mining::Event<Runtime, warehouse_liquidity_mining::\nInstance2>",
                "TypeId": 143
              }
            ],
            "Index": 96
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                "TypeId": 144
              }
            ],
            "Index": 103
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "pallet_scheduler::Event<Runtime>",
                "TypeId": 146
              }
            ],
            "Index": 5
          },
          {
            "Name": "DCA",
            "TypeFields": [
              {
                "TypeName": "pallet_dca::Event<Runtime>",
                "TypeId": 147
              }
            ],
            "Index": 66
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Event<Runtime>",
                "TypeId": 153
              }
            ],
            "Index": 107
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Event<Runtime>",
                "TypeId": 198
              }
            ],
            "Index": 109
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                "TypeId": 199
              }
            ],
            "Index": 111
          },
          {
            "Name": "DmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_dmp_queue::Event<Runtime>",
                "TypeId": 202
              }
            ],
            "Index": 113
          },
          {
            "Name": "OrmlXcm",
            "TypeFields": [
              {
                "TypeName": "orml_xcm::Event<Runtime>",
                "TypeId": 203
              }
            ],
            "Index": 135
          },
          {
            "Name": "XTokens",
            "TypeFields": [
              {
                "TypeName": "orml_xtokens::Event<Runtime>",
                "TypeId": 204
              }
            ],
            "Index": 137
          },
          {
            "Name": "UnknownTokens",
            "TypeFields": [
              {
                "TypeName": "orml_unknown_tokens::Event",
                "TypeId": 205
              }
            ],
            "Index": 139
          },
          {
            "Name": "CollatorSelection",
            "TypeFields": [
              {
                "TypeName": "pallet_collator_selection::Event<Runtime>",
                "TypeId": 206
              }
            ],
            "Index": 163
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "pallet_session::Event",
                "TypeId": 208
              }
            ],
            "Index": 165
          },
          {
            "Name": "RelayChainInfo",
            "TypeFields": [
              {
                "TypeName": "pallet_relaychain_info::Event<Runtime>",
                "TypeId": 209
              }
            ],
            "Index": 201
          },
          {
            "Name": "EmaOracle",
            "TypeFields": [
              {
                "TypeName": "pallet_ema_oracle::Event<Runtime>",
                "TypeId": 210
              }
            ],
            "Index": 202
          },
          {
            "Name": "MultiTransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_multi_payment::Event<Runtime>",
                "TypeId": 211
              }
            ],
            "Index": 203
          }
        ],
        "Path": [
          "hydradx_runtime",
          "RuntimeEvent"
        ],
        "TypeDef": "Variant"
      },
      "21": {
        "Variants": [
          {
            "Name": "ExtrinsicSuccess",
            "TypeFields": [
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 22
              }
            ],
            "Index": 0,
            "Docs": [
              "An extrinsic completed successfully."
            ]
          },
          {
            "Name": "ExtrinsicFailed",
            "TypeFields": [
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 25
              },
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 22
              }
            ],
            "Index": 1,
            "Docs": [
              "An extrinsic failed."
            ]
          },
          {
            "Name": "CodeUpdated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "`:code` was updated."
            ]
          },
          {
            "Name": "NewAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account was created."
            ]
          },
          {
            "Name": "KilledAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was reaped."
            ]
          },
          {
            "Name": "Remarked",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "On on-chain remark happened."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Event for the System pallet."
        ]
      },
      "22": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "class",
            "TypeName": "DispatchClass",
            "TypeId": 23
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 24
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "23": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Operational",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mandatory",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchClass"
        ],
        "TypeDef": "Variant"
      },
      "24": {
        "Variants": [
          {
            "Name": "Yes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "No",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "Pays"
        ],
        "TypeDef": "Variant"
      },
      "25": {
        "Variants": [
          {
            "Name": "Other",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Module",
            "TypeFields": [
              {
                "TypeName": "ModuleError",
                "TypeId": 26
              }
            ],
            "Index": 3
          },
          {
            "Name": "ConsumerRemaining",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NoProviders",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TooManyConsumers",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenError",
                "TypeId": 27
              }
            ],
            "Index": 7
          },
          {
            "Name": "Arithmetic",
            "TypeFields": [
              {
                "TypeName": "ArithmeticError",
                "TypeId": 28
              }
            ],
            "Index": 8
          },
          {
            "Name": "Transactional",
            "TypeFields": [
              {
                "TypeName": "TransactionalError",
                "TypeId": 29
              }
            ],
            "Index": 9
          },
          {
            "Name": "Exhausted",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Unavailable",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "RootNotAllowed",
            "TypeFields": null,
            "Index": 13
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchError"
        ],
        "TypeDef": "Variant"
      },
      "26": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "error",
            "TypeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
            "TypeId": 17
          }
        ],
        "Path": [
          "sp_runtime",
          "ModuleError"
        ],
        "TypeDef": "Composite"
      },
      "27": {
        "Variants": [
          {
            "Name": "FundsUnavailable",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "OnlyProvider",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BelowMinimum",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotCreate",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "CannotCreateHold",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "NotExpendable",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Blocked",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "sp_runtime",
          "TokenError"
        ],
        "TypeDef": "Variant"
      },
      "28": {
        "Variants": [
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "ArithmeticError"
        ],
        "TypeDef": "Variant"
      },
      "29": {
        "Variants": [
          {
            "Name": "LimitReached",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLayer",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "TransactionalError"
        ],
        "TypeDef": "Variant"
      },
      "30": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "destination_status",
                "TypeName": "Status",
                "TypeId": 31
              }
            ],
            "Index": 6,
            "Docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ]
          },
          {
            "Name": "Minted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Some amount was minted into an account."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Some amount was burned from an account."
            ]
          },
          {
            "Name": "Suspended",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 12,
            "Docs": [
              "Some amount was suspended from an account (it can be restored later)."
            ]
          },
          {
            "Name": "Restored",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Some amount was restored into an account."
            ]
          },
          {
            "Name": "Upgraded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "An account was upgraded."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 15,
            "Docs": [
              "Total issuance was increased by `amount`, creating a credit to be balanced."
            ]
          },
          {
            "Name": "Rescinded",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "Total issuance was decreased by `amount`, creating a debt to be balanced."
            ]
          },
          {
            "Name": "Locked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "Some balance was locked."
            ]
          },
          {
            "Name": "Unlocked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "Some balance was unlocked."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "Some balance was frozen."
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 20,
            "Docs": [
              "Some balance was thawed."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "31": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Reserved",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "BalanceStatus"
        ],
        "TypeDef": "Variant"
      },
      "32": {
        "Variants": [
          {
            "Name": "TransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "33": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New proposal."
            ]
          },
          {
            "Name": "Spending",
            "TypeFields": [
              {
                "Name": "budget_remaining",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "We have ended a spend period and will now allocate funds."
            ]
          },
          {
            "Name": "Awarded",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "award",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Some funds have been allocated."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "slashed",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A proposal was rejected; funds were slashed."
            ]
          },
          {
            "Name": "Burnt",
            "TypeFields": [
              {
                "Name": "burnt_funds",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some of our funds have been burnt."
            ]
          },
          {
            "Name": "Rollover",
            "TypeFields": [
              {
                "Name": "rollover_balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Spending has finished; this is the amount that rolls over until next spend."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Some funds have been deposited."
            ]
          },
          {
            "Name": "SpendApproved",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "A new spend proposal has been approved."
            ]
          },
          {
            "Name": "UpdatedInactive",
            "TypeFields": [
              {
                "Name": "reactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "deactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "The inactive funds of the pallet have been updated."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "34": {
        "Variants": [
          {
            "Name": "BatchInterrupted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 25
              }
            ],
            "Index": 0,
            "Docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ]
          },
          {
            "Name": "BatchCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Batch of dispatches completed fully with no error."
            ]
          },
          {
            "Name": "BatchCompletedWithErrors",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Batch of dispatches completed but has errors."
            ]
          },
          {
            "Name": "ItemCompleted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ]
          },
          {
            "Name": "ItemFailed",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 25
              }
            ],
            "Index": 4,
            "Docs": [
              "A single item within a Batch of dispatches has completed with error."
            ]
          },
          {
            "Name": "DispatchedAs",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 5,
            "Docs": [
              "A call was dispatched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "35": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 36
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 25
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 36
          },
          {
            "Name": "E",
            "TypeId": 25
          }
        ],
        "TypeDef": "Variant"
      },
      "36": {
        "TypeIds": [],
        "TypeDef": "Tuple"
      },
      "37": {
        "Variants": [
          {
            "Name": "Noted",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "A preimage has been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "A preimage has been requested."
            ]
          },
          {
            "Name": "Cleared",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "A preimage has ben cleared."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "38": {
        "Variants": [
          {
            "Name": "IdentitySet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A name was set or reset (which will remove all judgements)."
            ]
          },
          {
            "Name": "IdentityCleared",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A name was cleared, and the given balance returned."
            ]
          },
          {
            "Name": "IdentityKilled",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A name was removed and the given balance slashed."
            ]
          },
          {
            "Name": "JudgementRequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A judgement was asked from a registrar."
            ]
          },
          {
            "Name": "JudgementUnrequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A judgement request was retracted."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A judgement was given by a registrar."
            ]
          },
          {
            "Name": "RegistrarAdded",
            "TypeFields": [
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A registrar was added."
            ]
          },
          {
            "Name": "SubIdentityAdded",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "A sub-identity was added to an identity and the deposit paid."
            ]
          },
          {
            "Name": "SubIdentityRemoved",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "A sub-identity was removed from an identity and the deposit freed."
            ]
          },
          {
            "Name": "SubIdentityRevoked",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "A sub-identity was cleared, and the given deposit repatriated from the",
              "main identity account to the sub-identity account."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "39": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion has been proposed by a public account."
            ]
          },
          {
            "Name": "Tabled",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A public proposal has been tabled for referendum vote."
            ]
          },
          {
            "Name": "ExternalTabled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "An external proposal has been tabled."
            ]
          },
          {
            "Name": "Started",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "threshold",
                "TypeName": "VoteThreshold",
                "TypeId": 40
              }
            ],
            "Index": 3,
            "Docs": [
              "A referendum has begun."
            ]
          },
          {
            "Name": "Passed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proposal has been approved by referendum."
            ]
          },
          {
            "Name": "NotPassed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A proposal has been rejected by referendum."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A referendum has been cancelled."
            ]
          },
          {
            "Name": "Delegated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "An account has delegated their vote to another account."
            ]
          },
          {
            "Name": "Undelegated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "An account has cancelled a previous delegation operation."
            ]
          },
          {
            "Name": "Vetoed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 12
              },
              {
                "Name": "until",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "An external proposal has been vetoed."
            ]
          },
          {
            "Name": "Blacklisted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 12
              }
            ],
            "Index": 10,
            "Docs": [
              "A proposal_hash has been blacklisted permanently."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "voter",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 41
              }
            ],
            "Index": 11,
            "Docs": [
              "An account has voted in a referendum"
            ]
          },
          {
            "Name": "Seconded",
            "TypeFields": [
              {
                "Name": "seconder",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "An account has secconded a proposal"
            ]
          },
          {
            "Name": "ProposalCanceled",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "A proposal got canceled."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 43,
                "Docs": [
                  "Metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 12,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Metadata for a proposal or a referendum has been set."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 43,
                "Docs": [
                  "Metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 12,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Metadata for a proposal or a referendum has been cleared."
            ]
          },
          {
            "Name": "MetadataTransferred",
            "TypeFields": [
              {
                "Name": "prev_owner",
                "TypeName": "MetadataOwner",
                "TypeId": 43,
                "Docs": [
                  "Previous metadata owner."
                ]
              },
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 43,
                "Docs": [
                  "New metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "PreimageHash",
                "TypeId": 12,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 16,
            "Docs": [
              "Metadata has been transferred to new owner."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "40": {
        "Variants": [
          {
            "Name": "SuperMajorityApprove",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SuperMajorityAgainst",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "SimpleMajority",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote_threshold",
          "VoteThreshold"
        ],
        "TypeDef": "Variant"
      },
      "41": {
        "Variants": [
          {
            "Name": "Standard",
            "TypeFields": [
              {
                "Name": "vote",
                "TypeName": "Vote",
                "TypeId": 42
              },
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Split",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "AccountVote"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "42": {
        "TypeFields": [
          {
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Vote"
        ],
        "TypeDef": "Composite"
      },
      "43": {
        "Variants": [
          {
            "Name": "External",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Proposal",
            "TypeFields": [
              {
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Referendum",
            "TypeFields": [
              {
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "MetadataOwner"
        ],
        "TypeDef": "Variant"
      },
      "44": {
        "Variants": [
          {
            "Name": "NewTerm",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<(<T as frame_system::Config>::AccountId, BalanceOf<T>)>",
                "TypeId": 45
              }
            ],
            "Index": 0,
            "Docs": [
              "A new term with new_members. This indicates that enough candidates existed to run",
              "the election, not that enough have has been elected. The inner value must be examined",
              "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
              "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
              "begin with."
            ]
          },
          {
            "Name": "EmptyTerm",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No (or not enough) candidates existed for this round. This is different from",
              "`NewTerm(\\[\\])`. See the description of `NewTerm`."
            ]
          },
          {
            "Name": "ElectionError",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Internal error happened while trying to perform election."
            ]
          },
          {
            "Name": "MemberKicked",
            "TypeFields": [
              {
                "Name": "member",
                "TypeName": "<T as frame_system::Config>::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A member has been removed. This should always be followed by either `NewTerm` or",
              "`EmptyTerm`."
            ]
          },
          {
            "Name": "Renounced",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "<T as frame_system::Config>::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "Someone has renounced their candidacy."
            ]
          },
          {
            "Name": "CandidateSlashed",
            "TypeFields": [
              {
                "Name": "candidate",
                "TypeName": "<T as frame_system::Config>::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "A candidate was slashed by amount due to failing to obtain a seat as member or",
              "runner-up.",
              "",
              "Note that old members and runners-up are also candidates."
            ]
          },
          {
            "Name": "SeatHolderSlashed",
            "TypeFields": [
              {
                "Name": "seat_holder",
                "TypeName": "<T as frame_system::Config>::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "A seat holder was slashed by amount by being forcefully removed from the set."
            ]
          }
        ],
        "Path": [
          "pallet_elections_phragmen",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "45": {
        "TypeId": 46,
        "TypeDef": "Sequence"
      },
      "46": {
        "TypeIds": [
          0,
          6
        ],
        "TypeDef": "Tuple"
      },
      "47": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 48
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "48": {
        "Primitive": "Bool",
        "TypeDef": "Primitive"
      },
      "49": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 48
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "50": {
        "Variants": [
          {
            "Name": "NewTip",
            "TypeFields": [
              {
                "Name": "tip_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "A new tip suggestion has been opened."
            ]
          },
          {
            "Name": "TipClosing",
            "TypeFields": [
              {
                "Name": "tip_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "A tip suggestion has reached threshold and is closing."
            ]
          },
          {
            "Name": "TipClosed",
            "TypeFields": [
              {
                "Name": "tip_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "payout",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A tip suggestion has been closed."
            ]
          },
          {
            "Name": "TipRetracted",
            "TypeFields": [
              {
                "Name": "tip_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "A tip suggestion has been retracted."
            ]
          },
          {
            "Name": "TipSlashed",
            "TypeFields": [
              {
                "Name": "tip_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "finder",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "A tip suggestion has been slashed."
            ]
          }
        ],
        "Path": [
          "pallet_tips",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "51": {
        "Variants": [
          {
            "Name": "ProxyExecuted",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 0,
            "Docs": [
              "A proxy was executed correctly, with the given."
            ]
          },
          {
            "Name": "PureCreated",
            "TypeFields": [
              {
                "Name": "pure",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 52
              },
              {
                "Name": "disambiguation_index",
                "TypeName": "u16",
                "TypeId": 53
              }
            ],
            "Index": 1,
            "Docs": [
              "A pure account has been created by new proxy with given",
              "disambiguation index and proxy type."
            ]
          },
          {
            "Name": "Announced",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "An announcement was placed to make a call in the future."
            ]
          },
          {
            "Name": "ProxyAdded",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 52
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A proxy was added."
            ]
          },
          {
            "Name": "ProxyRemoved",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 52
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proxy was removed."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "52": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CancelProxy",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Governance",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Transfer",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Liquidity",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LiquidityMining",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "hydradx_runtime",
          "system",
          "ProxyType"
        ],
        "TypeDef": "Variant"
      },
      "53": {
        "Primitive": "U16",
        "TypeDef": "Primitive"
      },
      "54": {
        "Variants": [
          {
            "Name": "NewMultisig",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "A new multisig operation has begun."
            ]
          },
          {
            "Name": "MultisigApproval",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 55
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "A multisig operation has been approved by someone."
            ]
          },
          {
            "Name": "MultisigExecuted",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 55
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 2,
            "Docs": [
              "A multisig operation has been executed."
            ]
          },
          {
            "Name": "MultisigCancelled",
            "TypeFields": [
              {
                "Name": "cancelling",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 55
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "A multisig operation has been cancelled."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "55": {
        "TypeFields": [
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_multisig",
          "Timepoint"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "56": {
        "Variants": [
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "creator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A `collection` was created."
            ]
          },
          {
            "Name": "ForceCreated",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "A `collection` was force-created."
            ]
          },
          {
            "Name": "Destroyed",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A `collection` was destroyed."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "An `item` was issued."
            ]
          },
          {
            "Name": "Transferred",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An `item` was transferred."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "An `item` was destroyed."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Some `item` was frozen."
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some `item` was thawed."
            ]
          },
          {
            "Name": "CollectionFrozen",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some `collection` was frozen."
            ]
          },
          {
            "Name": "CollectionThawed",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some `collection` was thawed."
            ]
          },
          {
            "Name": "OwnerChanged",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "new_owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 10,
            "Docs": [
              "The owner changed."
            ]
          },
          {
            "Name": "TeamChanged",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "issuer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "admin",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "freezer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 11,
            "Docs": [
              "The management team changed."
            ]
          },
          {
            "Name": "ApprovedTransfer",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 12,
            "Docs": [
              "An `item` of a `collection` has been approved by the `owner` for transfer by",
              "a `delegate`."
            ]
          },
          {
            "Name": "ApprovalCancelled",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 13,
            "Docs": [
              "An approval for a `delegate` account to transfer the `item` of an item",
              "`collection` was cancelled by its `owner`."
            ]
          },
          {
            "Name": "ItemStatusChanged",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "A `collection` has had its attributes changed by the `Force` origin."
            ]
          },
          {
            "Name": "CollectionMetadataSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "data",
                "TypeName": "BoundedVec<u8, T::StringLimit>",
                "TypeId": 57
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 15,
            "Docs": [
              "New metadata has been set for a `collection`."
            ]
          },
          {
            "Name": "CollectionMetadataCleared",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "Metadata has been cleared for a `collection`."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "data",
                "TypeName": "BoundedVec<u8, T::StringLimit>",
                "TypeId": 57
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 17,
            "Docs": [
              "New metadata has been set for an item."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "Metadata has been cleared for an item."
            ]
          },
          {
            "Name": "Redeposited",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "successful_items",
                "TypeName": "Vec<T::ItemId>",
                "TypeId": 58
              }
            ],
            "Index": 19,
            "Docs": [
              "Metadata has been cleared for an item."
            ]
          },
          {
            "Name": "AttributeSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<T::ItemId>",
                "TypeId": 59
              },
              {
                "Name": "key",
                "TypeName": "BoundedVec<u8, T::KeyLimit>",
                "TypeId": 60
              },
              {
                "Name": "value",
                "TypeName": "BoundedVec<u8, T::ValueLimit>",
                "TypeId": 61
              }
            ],
            "Index": 20,
            "Docs": [
              "New attribute metadata has been set for a `collection` or `item`."
            ]
          },
          {
            "Name": "AttributeCleared",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<T::ItemId>",
                "TypeId": 59
              },
              {
                "Name": "key",
                "TypeName": "BoundedVec<u8, T::KeyLimit>",
                "TypeId": 60
              }
            ],
            "Index": 21,
            "Docs": [
              "Attribute metadata has been cleared for a `collection` or `item`."
            ]
          },
          {
            "Name": "OwnershipAcceptanceChanged",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "maybe_collection",
                "TypeName": "Option<T::CollectionId>",
                "TypeId": 59
              }
            ],
            "Index": 22,
            "Docs": [
              "Ownership acceptance has changed for an account."
            ]
          },
          {
            "Name": "CollectionMaxSupplySet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "max_supply",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 23,
            "Docs": [
              "Max supply has been set for a collection."
            ]
          },
          {
            "Name": "ItemPriceSet",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "price",
                "TypeName": "ItemPrice<T, I>",
                "TypeId": 6
              },
              {
                "Name": "whitelisted_buyer",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 62
              }
            ],
            "Index": 24,
            "Docs": [
              "The price was set for the instance."
            ]
          },
          {
            "Name": "ItemPriceRemoved",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              }
            ],
            "Index": 25,
            "Docs": [
              "The price for the instance was removed."
            ]
          },
          {
            "Name": "ItemBought",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "price",
                "TypeName": "ItemPrice<T, I>",
                "TypeId": 6
              },
              {
                "Name": "seller",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "buyer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 26,
            "Docs": [
              "An item was bought."
            ]
          }
        ],
        "Path": [
          "pallet_uniques",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "57": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "58": {
        "TypeId": 6,
        "TypeDef": "Sequence"
      },
      "59": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "60": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "61": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "62": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "63": {
        "Variants": [
          {
            "Name": "Migrated",
            "TypeFields": [
              {
                "Name": "top",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "child",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "compute",
                "TypeName": "MigrationCompute",
                "TypeId": 64
              }
            ],
            "Index": 0,
            "Docs": [
              "Given number of `(top, child)` keys were migrated respectively, with the given",
              "`compute`."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Some account got slashed by the given amount."
            ]
          },
          {
            "Name": "AutoMigrationFinished",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The auto migration task finished."
            ]
          },
          {
            "Name": "Halted",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "Error<T>",
                "TypeId": 65
              }
            ],
            "Index": 3,
            "Docs": [
              "Migration got halted due to an error or miss-configuration."
            ]
          }
        ],
        "Path": [
          "pallet_state_trie_migration",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Inner events of this pallet."
        ]
      },
      "64": {
        "Variants": [
          {
            "Name": "Signed",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Auto",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_state_trie_migration",
          "pallet",
          "MigrationCompute"
        ],
        "TypeDef": "Variant"
      },
      "65": {
        "Variants": [
          {
            "Name": "MaxSignedLimits",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Max signed limits not respected."
            ]
          },
          {
            "Name": "KeyTooLong",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "A key was longer than the configured maximum.",
              "",
              "This means that the migration halted at the current [`Progress`] and",
              "can be resumed with a larger [`crate::Config::MaxKeyLen`] value.",
              "Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.",
              "The value should only be increased to avoid a storage migration for the currently",
              "stored [`crate::Progress::LastKey`]."
            ]
          },
          {
            "Name": "NotEnoughFunds",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "submitter does not have enough funds."
            ]
          },
          {
            "Name": "BadWitness",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Bad witness data provided."
            ]
          },
          {
            "Name": "SignedMigrationNotAllowed",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Signed migration is not allowed because the maximum limit is not set yet."
            ]
          },
          {
            "Name": "BadChildRoot",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Bad child root provided."
            ]
          }
        ],
        "Path": [
          "pallet_state_trie_migration",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "66": {
        "Variants": [
          {
            "Name": "ExistentialDepositPaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "fee_asset",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Existential deposit for insufficinet asset was paid.",
              "`SufficiencyCheck` triggers this event."
            ]
          },
          {
            "Name": "Registered",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_name",
                "TypeName": "Option<BoundedVec<u8, T::StringLimit>>",
                "TypeId": 67
              },
              {
                "Name": "asset_type",
                "TypeName": "AssetType",
                "TypeId": 69
              },
              {
                "Name": "existential_deposit",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "xcm_rate_limit",
                "TypeName": "Option<Balance>",
                "TypeId": 59
              },
              {
                "Name": "symbol",
                "TypeName": "Option<BoundedVec<u8, T::StringLimit>>",
                "TypeId": 67
              },
              {
                "Name": "decimals",
                "TypeName": "Option<u8>",
                "TypeId": 70
              },
              {
                "Name": "is_sufficient",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 1,
            "Docs": [
              "Asset was registered."
            ]
          },
          {
            "Name": "Updated",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_name",
                "TypeName": "Option<BoundedVec<u8, T::StringLimit>>",
                "TypeId": 67
              },
              {
                "Name": "asset_type",
                "TypeName": "AssetType",
                "TypeId": 69
              },
              {
                "Name": "existential_deposit",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "xcm_rate_limit",
                "TypeName": "Option<Balance>",
                "TypeId": 59
              },
              {
                "Name": "symbol",
                "TypeName": "Option<BoundedVec<u8, T::StringLimit>>",
                "TypeId": 67
              },
              {
                "Name": "decimals",
                "TypeName": "Option<u8>",
                "TypeId": 70
              },
              {
                "Name": "is_sufficient",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 2,
            "Docs": [
              "Asset was updated."
            ]
          },
          {
            "Name": "LocationSet",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "location",
                "TypeName": "T::AssetNativeLocation",
                "TypeId": 71
              }
            ],
            "Index": 3,
            "Docs": [
              "Native location set for an asset."
            ]
          },
          {
            "Name": "AssetBanned",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Asset was banned."
            ]
          },
          {
            "Name": "AssetUnbanned",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Asset's ban was removed."
            ]
          }
        ],
        "Path": [
          "pallet_asset_registry",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "67": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 68
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 68
          }
        ],
        "TypeDef": "Variant"
      },
      "68": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "69": {
        "Variants": [
          {
            "Name": "Token",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "XYK",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "StableSwap",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Bond",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "External",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "pallet_asset_registry",
          "types",
          "AssetType"
        ],
        "TypeDef": "Variant"
      },
      "70": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          }
        ],
        "TypeDef": "Variant"
      },
      "71": {
        "TypeFields": [
          {
            "TypeName": "polkadot_xcm::v3::MultiLocation",
            "TypeId": 72
          }
        ],
        "Path": [
          "hydradx_runtime",
          "xcm",
          "AssetLocation"
        ],
        "TypeDef": "Composite"
      },
      "72": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 73
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "73": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 74
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              },
              {
                "TypeName": "Junction",
                "TypeId": 74
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "junctions",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "74": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 76
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 76
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 76
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 78
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 79
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "data",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 80
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 81
              }
            ],
            "Index": 8
          },
          {
            "Name": "GlobalConsensus",
            "TypeFields": [
              {
                "TypeName": "NetworkId",
                "TypeId": 77
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "75": {
        "TypeId": 4,
        "TypeDef": "Compact"
      },
      "76": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 77
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 77
          }
        ],
        "TypeDef": "Variant"
      },
      "77": {
        "Variants": [
          {
            "Name": "ByGenesis",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0
          },
          {
            "Name": "ByFork",
            "TypeFields": [
              {
                "Name": "block_number",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "block_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Westend",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Rococo",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Wococo",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 7
          },
          {
            "Name": "BitcoinCore",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "BitcoinCash",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "junction",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "78": {
        "Length": 20,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "79": {
        "TypeId": 6,
        "TypeDef": "Compact"
      },
      "80": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Moniker",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 17
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "junction",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "81": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "junction",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "82": {
        "Variants": [
          {
            "Name": "Claim",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "EthereumAddress",
                "TypeId": 83
              },
              {
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "pallet_claims",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "83": {
        "TypeFields": [
          {
            "TypeName": "[u8; 20]",
            "TypeId": 78
          }
        ],
        "Path": [
          "pallet_claims",
          "traits",
          "EthereumAddress"
        ],
        "TypeDef": "Composite"
      },
      "84": {
        "Variants": [
          {
            "Name": "CollatorRewarded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "currency",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Collator was rewarded."
            ]
          }
        ],
        "Path": [
          "pallet_collator_rewards",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "85": {
        "Variants": [
          {
            "Name": "TokenAdded",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "initial_amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "initial_price",
                "TypeName": "Price",
                "TypeId": 86
              }
            ],
            "Index": 0,
            "Docs": [
              "An asset was added to Omnipool"
            ]
          },
          {
            "Name": "TokenRemoved",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "hub_withdrawn",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An asset was removed from Omnipool"
            ]
          },
          {
            "Name": "LiquidityAdded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Liquidity of an asset was added to Omnipool."
            ]
          },
          {
            "Name": "LiquidityRemoved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "shares_removed",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "fee",
                "TypeName": "FixedU128",
                "TypeId": 86
              }
            ],
            "Index": 3,
            "Docs": [
              "Liquidity of an asset was removed from Omnipool."
            ]
          },
          {
            "Name": "ProtocolLiquidityRemoved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "hub_amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "shares_removed",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "PRotocol Liquidity was removed from Omnipool."
            ]
          },
          {
            "Name": "SellExecuted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_in",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "hub_amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "hub_amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "asset_fee_amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "protocol_fee_amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Sell trade executed."
            ]
          },
          {
            "Name": "BuyExecuted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_in",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "hub_amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "hub_amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "asset_fee_amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "protocol_fee_amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Buy trade executed."
            ]
          },
          {
            "Name": "PositionCreated",
            "TypeFields": [
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "shares",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "price",
                "TypeName": "Price",
                "TypeId": 86
              }
            ],
            "Index": 7,
            "Docs": [
              "LP Position was created and NFT instance minted."
            ]
          },
          {
            "Name": "PositionDestroyed",
            "TypeFields": [
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "LP Position was destroyed and NFT instance burned."
            ]
          },
          {
            "Name": "PositionUpdated",
            "TypeFields": [
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "shares",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "price",
                "TypeName": "Price",
                "TypeId": 86
              }
            ],
            "Index": 9,
            "Docs": [
              "LP Position was updated."
            ]
          },
          {
            "Name": "TradableStateUpdated",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "state",
                "TypeName": "Tradability",
                "TypeId": 87
              }
            ],
            "Index": 10,
            "Docs": [
              "Asset's tradable state has been updated."
            ]
          },
          {
            "Name": "AssetRefunded",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "recipient",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 11,
            "Docs": [
              "Amount has been refunded for asset which has not been accepted to add to omnipool."
            ]
          },
          {
            "Name": "AssetWeightCapUpdated",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "cap",
                "TypeName": "Permill",
                "TypeId": 88
              }
            ],
            "Index": 12,
            "Docs": [
              "Asset's weight cap has been updated."
            ]
          }
        ],
        "Path": [
          "pallet_omnipool",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "86": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedU128"
        ],
        "TypeDef": "Composite"
      },
      "87": {
        "TypeFields": [
          {
            "Name": "bits",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_omnipool",
          "types",
          "Tradability"
        ],
        "TypeDef": "Composite"
      },
      "88": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Permill"
        ],
        "TypeDef": "Composite"
      },
      "89": {
        "Variants": [
          {
            "Name": "TransactionPaused",
            "TypeFields": [
              {
                "Name": "pallet_name_bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "function_name_bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "Paused transaction"
            ]
          },
          {
            "Name": "TransactionUnpaused",
            "TypeFields": [
              {
                "Name": "pallet_name_bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "function_name_bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 1,
            "Docs": [
              "Unpaused transaction"
            ]
          }
        ],
        "Path": [
          "pallet_transaction_pause",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "90": {
        "Variants": [
          {
            "Name": "Dusted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Account dusted."
            ]
          },
          {
            "Name": "Added",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "Account added to non-dustable list."
            ]
          },
          {
            "Name": "Removed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Account removed from non-dustable list."
            ]
          }
        ],
        "Path": [
          "pallet_duster",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "91": {
        "Variants": [
          {
            "Name": "GlobalFarmAccRPZUpdated",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "accumulated_rpz",
                "TypeName": "FixedU128",
                "TypeId": 86
              },
              {
                "Name": "total_shares_z",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Global farm accumulated reward per share was updated."
            ]
          },
          {
            "Name": "YieldFarmAccRPVSUpdated",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "accumulated_rpvs",
                "TypeName": "FixedU128",
                "TypeId": 86
              },
              {
                "Name": "total_valued_shares",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Yield farm accumulated reward per valued share was updated."
            ]
          },
          {
            "Name": "AllRewardsDistributed",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Global farm has no more rewards to distribute in the moment."
            ]
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "92": {
        "Variants": [
          {
            "Name": "GlobalFarmCreated",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "total_rewards",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "reward_currency",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "yield_per_period",
                "TypeName": "Perquintill",
                "TypeId": 93
              },
              {
                "Name": "planned_yielding_periods",
                "TypeName": "PeriodOf<T>",
                "TypeId": 4
              },
              {
                "Name": "blocks_per_period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "max_reward_per_period",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "min_deposit",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "lrna_price_adjustment",
                "TypeName": "FixedU128",
                "TypeId": 86
              }
            ],
            "Index": 0,
            "Docs": [
              "New global farm was created."
            ]
          },
          {
            "Name": "GlobalFarmTerminated",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "reward_currency",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "undistributed_rewards",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Global farm was terminated."
            ]
          },
          {
            "Name": "YieldFarmCreated",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "multiplier",
                "TypeName": "FarmMultiplier",
                "TypeId": 86
              },
              {
                "Name": "loyalty_curve",
                "TypeName": "Option<LoyaltyCurve>",
                "TypeId": 94
              }
            ],
            "Index": 2,
            "Docs": [
              "New yield farm was added to the farm."
            ]
          },
          {
            "Name": "YieldFarmUpdated",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "multiplier",
                "TypeName": "FarmMultiplier",
                "TypeId": 86
              }
            ],
            "Index": 3,
            "Docs": [
              "Yield farm multiplier was updated."
            ]
          },
          {
            "Name": "YieldFarmStopped",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "Yield farm for `asset_id` was stopped."
            ]
          },
          {
            "Name": "YieldFarmResumed",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "multiplier",
                "TypeName": "FarmMultiplier",
                "TypeId": 86
              }
            ],
            "Index": 5,
            "Docs": [
              "Yield farm for `asset_id` was resumed."
            ]
          },
          {
            "Name": "YieldFarmTerminated",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "Yield farm was terminated from the global farm."
            ]
          },
          {
            "Name": "SharesDeposited",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "shares_amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "New LP shares(LP position) were deposited."
            ]
          },
          {
            "Name": "SharesRedeposited",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "shares_amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Already locked LP shares were redeposited to another yield farm."
            ]
          },
          {
            "Name": "RewardClaimed",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "claimed",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "reward_currency",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Rewards were claimed."
            ]
          },
          {
            "Name": "SharesWithdrawn",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "LP shares were withdrawn."
            ]
          },
          {
            "Name": "DepositDestroyed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "All LP shares were unlocked and NFT representing deposit was destroyed."
            ]
          }
        ],
        "Path": [
          "pallet_omnipool_liquidity_mining",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "93": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Perquintill"
        ],
        "TypeDef": "Composite"
      },
      "94": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 95
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 95
          }
        ],
        "TypeDef": "Variant"
      },
      "95": {
        "TypeFields": [
          {
            "Name": "initial_reward_percentage",
            "TypeName": "FixedU128",
            "TypeId": 86
          },
          {
            "Name": "scale_coef",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "types",
          "LoyaltyCurve"
        ],
        "TypeDef": "Composite"
      },
      "96": {
        "Variants": [
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "order_id",
                "TypeName": "OrderId",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "An Order has been cancelled"
            ]
          },
          {
            "Name": "Filled",
            "TypeFields": [
              {
                "Name": "order_id",
                "TypeName": "OrderId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An Order has been completely filled"
            ]
          },
          {
            "Name": "PartiallyFilled",
            "TypeFields": [
              {
                "Name": "order_id",
                "TypeName": "OrderId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "An Order has been partially filled"
            ]
          },
          {
            "Name": "Placed",
            "TypeFields": [
              {
                "Name": "order_id",
                "TypeName": "OrderId",
                "TypeId": 4
              },
              {
                "Name": "asset_in",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "partially_fillable",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 3,
            "Docs": [
              "An Order has been placed"
            ]
          }
        ],
        "Path": [
          "pallet_otc",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "97": {
        "Variants": [
          {
            "Name": "TradeVolumeLimitChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "trade_volume_limit",
                "TypeName": "(u32, u32)",
                "TypeId": 98
              }
            ],
            "Index": 0,
            "Docs": [
              "Trade volume limit of an asset was changed."
            ]
          },
          {
            "Name": "AddLiquidityLimitChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "liquidity_limit",
                "TypeName": "Option<(u32, u32)>",
                "TypeId": 99
              }
            ],
            "Index": 1,
            "Docs": [
              "Add liquidity limit of an asset was changed."
            ]
          },
          {
            "Name": "RemoveLiquidityLimitChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "liquidity_limit",
                "TypeName": "Option<(u32, u32)>",
                "TypeId": 99
              }
            ],
            "Index": 2,
            "Docs": [
              "Remove liquidity limit of an asset was changed."
            ]
          }
        ],
        "Path": [
          "pallet_circuit_breaker",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "98": {
        "TypeIds": [
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "99": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 98
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 98
          }
        ],
        "TypeDef": "Variant"
      },
      "100": {
        "Variants": [
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "asset_in",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_in",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "amount_out",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "The route with trades has been successfully executed"
            ]
          },
          {
            "Name": "RouteUpdated",
            "TypeFields": [
              {
                "Name": "asset_ids",
                "TypeName": "Vec<T::AssetId>",
                "TypeId": 101
              }
            ],
            "Index": 1,
            "Docs": [
              "The route with trades has been successfully executed"
            ]
          }
        ],
        "Path": [
          "pallet_route_executor",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "101": {
        "TypeId": 4,
        "TypeDef": "Sequence"
      },
      "102": {
        "Variants": null,
        "Path": [
          "pallet_dynamic_fees",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "103": {
        "Variants": [
          {
            "Name": "PositionCreated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              },
              {
                "Name": "stake",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "New staking position was created and NFT was minted."
            ]
          },
          {
            "Name": "StakeAdded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              },
              {
                "Name": "stake",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "total_stake",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "locked_rewards",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "slashed_points",
                "TypeName": "Point",
                "TypeId": 6
              },
              {
                "Name": "payable_percentage",
                "TypeName": "FixedU128",
                "TypeId": 86
              }
            ],
            "Index": 1,
            "Docs": [
              "Staked amount for existing position was increased."
            ]
          },
          {
            "Name": "RewardsClaimed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              },
              {
                "Name": "paid_rewards",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "unlocked_rewards",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "slashed_points",
                "TypeName": "Point",
                "TypeId": 6
              },
              {
                "Name": "slashed_unpaid_rewards",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "payable_percentage",
                "TypeName": "FixedU128",
                "TypeId": 86
              }
            ],
            "Index": 2,
            "Docs": [
              "Rewards were claimed."
            ]
          },
          {
            "Name": "Unstaked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              },
              {
                "Name": "unlocked_stake",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Staked amount was withdrawn and NFT was burned."
            ]
          },
          {
            "Name": "StakingInitialized",
            "TypeFields": [
              {
                "Name": "non_dustable_balance",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Staking was initialized."
            ]
          },
          {
            "Name": "AccumulatedRpsUpdated",
            "TypeFields": [
              {
                "Name": "accumulated_rps",
                "TypeName": "FixedU128",
                "TypeId": 86
              },
              {
                "Name": "total_stake",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Staking's `accumulated_reward_per_stake` was updated."
            ]
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "104": {
        "Variants": [
          {
            "Name": "PoolCreated",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "assets",
                "TypeName": "Vec<T::AssetId>",
                "TypeId": 101
              },
              {
                "Name": "amplification",
                "TypeName": "NonZeroU16",
                "TypeId": 105
              },
              {
                "Name": "fee",
                "TypeName": "Permill",
                "TypeId": 88
              }
            ],
            "Index": 0,
            "Docs": [
              "A pool was created."
            ]
          },
          {
            "Name": "FeeUpdated",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "fee",
                "TypeName": "Permill",
                "TypeId": 88
              }
            ],
            "Index": 1,
            "Docs": [
              "Pool fee has been updated."
            ]
          },
          {
            "Name": "LiquidityAdded",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "shares",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "assets",
                "TypeName": "Vec<AssetAmount<T::AssetId>>",
                "TypeId": 106
              }
            ],
            "Index": 2,
            "Docs": [
              "Liquidity of an asset was added to a pool."
            ]
          },
          {
            "Name": "LiquidityRemoved",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "shares",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "amounts",
                "TypeName": "Vec<AssetAmount<T::AssetId>>",
                "TypeId": 106
              },
              {
                "Name": "fee",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Liquidity removed."
            ]
          },
          {
            "Name": "SellExecuted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_in",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "fee",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Sell trade executed. Trade fee paid in asset leaving the pool (already subtracted from amount_out)."
            ]
          },
          {
            "Name": "BuyExecuted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_in",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "fee",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Buy trade executed. Trade fee paid in asset entering the pool (already included in amount_in)."
            ]
          },
          {
            "Name": "TradableStateUpdated",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "state",
                "TypeName": "Tradability",
                "TypeId": 108
              }
            ],
            "Index": 6,
            "Docs": [
              "Asset's tradable state has been updated."
            ]
          },
          {
            "Name": "AmplificationChanging",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "current_amplification",
                "TypeName": "NonZeroU16",
                "TypeId": 105
              },
              {
                "Name": "final_amplification",
                "TypeName": "NonZeroU16",
                "TypeId": 105
              },
              {
                "Name": "start_block",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "end_block",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "AAmplification of a pool has been scheduled to change."
            ]
          }
        ],
        "Path": [
          "pallet_stableswap",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "105": {
        "TypeFields": [
          {
            "TypeId": 53
          }
        ],
        "Path": [
          "NonZeroU16"
        ],
        "TypeDef": "Composite"
      },
      "106": {
        "TypeId": 107,
        "TypeDef": "Sequence"
      },
      "107": {
        "TypeFields": [
          {
            "Name": "asset_id",
            "TypeName": "AssetId",
            "TypeId": 4
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_stableswap",
          "types",
          "AssetAmount"
        ],
        "TypeParams": [
          {
            "Name": "AssetId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "108": {
        "TypeFields": [
          {
            "Name": "bits",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_stableswap",
          "types",
          "Tradability"
        ],
        "TypeDef": "Composite"
      },
      "109": {
        "Variants": [
          {
            "Name": "TokenCreated",
            "TypeFields": [
              {
                "Name": "issuer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_id",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "bond_id",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "maturity",
                "TypeName": "Moment",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "A bond asset was registered"
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "issuer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "bond_id",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "fee",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "New bond were issued"
            ]
          },
          {
            "Name": "Redeemed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "bond_id",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Bonds were redeemed"
            ]
          }
        ],
        "Path": [
          "pallet_bonds",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "110": {
        "Variants": [
          {
            "Name": "PoolCreated",
            "TypeFields": [
              {
                "Name": "pool",
                "TypeName": "PoolId<T>",
                "TypeId": 0
              },
              {
                "Name": "data",
                "TypeName": "Pool<T::AccountId, BlockNumberFor<T>>",
                "TypeId": 111
              }
            ],
            "Index": 0,
            "Docs": [
              "Pool was created by the `CreatePool` origin."
            ]
          },
          {
            "Name": "PoolUpdated",
            "TypeFields": [
              {
                "Name": "pool",
                "TypeName": "PoolId<T>",
                "TypeId": 0
              },
              {
                "Name": "data",
                "TypeName": "Pool<T::AccountId, BlockNumberFor<T>>",
                "TypeId": 111
              }
            ],
            "Index": 1,
            "Docs": [
              "Pool data were updated."
            ]
          },
          {
            "Name": "LiquidityAdded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_a",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_b",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_a",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "amount_b",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "New liquidity was provided to the pool."
            ]
          },
          {
            "Name": "LiquidityRemoved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_a",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_b",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_a",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "amount_b",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Liquidity was removed from the pool and the pool was destroyed."
            ]
          },
          {
            "Name": "SellExecuted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_in",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "sale_price",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "fee_asset",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "fee_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Sale executed."
            ]
          },
          {
            "Name": "BuyExecuted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_out",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_in",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "buy_price",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "fee_asset",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "fee_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Purchase executed."
            ]
          }
        ],
        "Path": [
          "pallet_lbp",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "111": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "start",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 112
          },
          {
            "Name": "end",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 112
          },
          {
            "Name": "assets",
            "TypeName": "(AssetId, AssetId)",
            "TypeId": 98
          },
          {
            "Name": "initial_weight",
            "TypeName": "LBPWeight",
            "TypeId": 4
          },
          {
            "Name": "final_weight",
            "TypeName": "LBPWeight",
            "TypeId": 4
          },
          {
            "Name": "weight_curve",
            "TypeName": "WeightCurveType",
            "TypeId": 113
          },
          {
            "Name": "fee",
            "TypeName": "(u32, u32)",
            "TypeId": 98
          },
          {
            "Name": "fee_collector",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "repay_target",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_lbp",
          "Pool"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "112": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "113": {
        "Variants": [
          {
            "Name": "Linear",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "pallet_lbp",
          "WeightCurveType"
        ],
        "TypeDef": "Variant"
      },
      "114": {
        "Variants": [
          {
            "Name": "LiquidityAdded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_a",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_b",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_a",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "amount_b",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "New liquidity was provided to the pool."
            ]
          },
          {
            "Name": "LiquidityRemoved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_a",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_b",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "shares",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Liquidity was removed from the pool."
            ]
          },
          {
            "Name": "PoolCreated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_a",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_b",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "initial_shares_amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "share_token",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "pool",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Pool was created."
            ]
          },
          {
            "Name": "PoolDestroyed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_a",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_b",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "share_token",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "pool",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "Pool was destroyed."
            ]
          },
          {
            "Name": "SellExecuted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_in",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "sale_price",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "fee_asset",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "fee_amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "pool",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "Asset sale executed."
            ]
          },
          {
            "Name": "BuyExecuted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_out",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_in",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "buy_price",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "fee_asset",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "fee_amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "pool",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "Asset purchase executed."
            ]
          }
        ],
        "Path": [
          "pallet_xyk",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "115": {
        "Variants": [
          {
            "Name": "CodeRegistered",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "ReferralCode<T::CodeLength>",
                "TypeId": 116
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "Referral code has been registered."
            ]
          },
          {
            "Name": "CodeLinked",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "code",
                "TypeName": "ReferralCode<T::CodeLength>",
                "TypeId": 116
              },
              {
                "Name": "referral_account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "Referral code has been linked to an account."
            ]
          },
          {
            "Name": "Converted",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "AssetAmount<T::AssetId>",
                "TypeId": 117
              },
              {
                "Name": "to",
                "TypeName": "AssetAmount<T::AssetId>",
                "TypeId": 117
              }
            ],
            "Index": 2,
            "Docs": [
              "Asset has been converted to RewardAsset."
            ]
          },
          {
            "Name": "Claimed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "referrer_rewards",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "trade_rewards",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Rewards claimed."
            ]
          },
          {
            "Name": "AssetRewardsUpdated",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "level",
                "TypeName": "Level",
                "TypeId": 118
              },
              {
                "Name": "rewards",
                "TypeName": "FeeDistribution",
                "TypeId": 119
              }
            ],
            "Index": 4,
            "Docs": [
              "New asset rewards has been set."
            ]
          },
          {
            "Name": "LevelUp",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "level",
                "TypeName": "Level",
                "TypeId": 118
              }
            ],
            "Index": 5,
            "Docs": [
              "Referrer reached new level."
            ]
          }
        ],
        "Path": [
          "pallet_referrals",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "116": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "117": {
        "TypeFields": [
          {
            "Name": "asset_id",
            "TypeName": "AssetId",
            "TypeId": 4
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_referrals",
          "AssetAmount"
        ],
        "TypeParams": [
          {
            "Name": "AssetId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "118": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Tier0",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Tier1",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Tier2",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Tier3",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Tier4",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "pallet_referrals",
          "Level"
        ],
        "TypeDef": "Variant"
      },
      "119": {
        "TypeFields": [
          {
            "Name": "referrer",
            "TypeName": "Permill",
            "TypeId": 88
          },
          {
            "Name": "trader",
            "TypeName": "Permill",
            "TypeId": 88
          },
          {
            "Name": "external",
            "TypeName": "Permill",
            "TypeId": 88
          }
        ],
        "Path": [
          "pallet_referrals",
          "FeeDistribution"
        ],
        "TypeDef": "Composite"
      },
      "120": {
        "Variants": null,
        "Path": [
          "pallet_xcm_rate_limiter",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "121": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below",
              "ExistentialDeposit, resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "status",
                "TypeName": "BalanceStatus",
                "TypeId": 31
              }
            ],
            "Index": 5,
            "Docs": [
              "Some reserved balance was repatriated (moved from reserved to",
              "another account)."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "reserved",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "TotalIssuanceSet",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "The total issuance of an currency has been set"
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some balances were withdrawn (e.g. pay for transaction fee)"
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "reserved_amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some balances were slashed (e.g. due to mis-behavior)"
            ]
          },
          {
            "Name": "Deposited",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Deposited some balance into an account"
            ]
          },
          {
            "Name": "LockSet",
            "TypeFields": [
              {
                "Name": "lock_id",
                "TypeName": "LockIdentifier",
                "TypeId": 122
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Some funds are locked"
            ]
          },
          {
            "Name": "LockRemoved",
            "TypeFields": [
              {
                "Name": "lock_id",
                "TypeName": "LockIdentifier",
                "TypeId": 122
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 12,
            "Docs": [
              "Some locked funds were unlocked"
            ]
          },
          {
            "Name": "Locked",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Some free balance was locked."
            ]
          },
          {
            "Name": "Unlocked",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "Some locked balance was freed."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 15
          },
          {
            "Name": "Rescinded",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 16
          }
        ],
        "Path": [
          "orml_tokens",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "122": {
        "Length": 8,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "123": {
        "Variants": [
          {
            "Name": "Transferred",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 4
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Currency transfer success."
            ]
          },
          {
            "Name": "BalanceUpdated",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "AmountOf<T>",
                "TypeId": 124
              }
            ],
            "Index": 1,
            "Docs": [
              "Update balance success."
            ]
          },
          {
            "Name": "Deposited",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Deposit success."
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Withdraw success."
            ]
          }
        ],
        "Path": [
          "pallet_currencies",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "124": {
        "Primitive": "I128",
        "TypeDef": "Primitive"
      },
      "125": {
        "Variants": [
          {
            "Name": "VestingScheduleAdded",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "vesting_schedule",
                "TypeName": "VestingScheduleOf<T>",
                "TypeId": 126
              }
            ],
            "Index": 0,
            "Docs": [
              "Added new vesting schedule."
            ]
          },
          {
            "Name": "Claimed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Claimed vesting."
            ]
          },
          {
            "Name": "VestingSchedulesUpdated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Updated vesting schedules."
            ]
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "126": {
        "TypeFields": [
          {
            "Name": "start",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "period_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "per_period",
            "TypeName": "Balance",
            "TypeId": 79
          }
        ],
        "Path": [
          "orml_vesting",
          "VestingSchedule"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "127": {
        "Variants": [
          {
            "Name": "Log",
            "TypeFields": [
              {
                "Name": "log",
                "TypeName": "Log",
                "TypeId": 128
              }
            ],
            "Index": 0,
            "Docs": [
              "Ethereum events from contracts."
            ]
          },
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 129
              }
            ],
            "Index": 1,
            "Docs": [
              "A contract has been created at given address."
            ]
          },
          {
            "Name": "CreatedFailed",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 129
              }
            ],
            "Index": 2,
            "Docs": [
              "A contract was attempted to be created, but the execution failed."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 129
              }
            ],
            "Index": 3,
            "Docs": [
              "A contract has been executed successfully with states applied."
            ]
          },
          {
            "Name": "ExecutedFailed",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 129
              }
            ],
            "Index": 4,
            "Docs": [
              "A contract has been executed with errors. States are reverted with only gas fees applied."
            ]
          }
        ],
        "Path": [
          "pallet_evm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "128": {
        "TypeFields": [
          {
            "Name": "address",
            "TypeName": "H160",
            "TypeId": 129
          },
          {
            "Name": "topics",
            "TypeName": "Vec<H256>",
            "TypeId": 130
          },
          {
            "Name": "data",
            "TypeName": "Bytes",
            "TypeId": 13
          }
        ],
        "Path": [
          "ethereum",
          "log",
          "Log"
        ],
        "TypeDef": "Composite"
      },
      "129": {
        "TypeFields": [
          {
            "TypeName": "[u8; 20]",
            "TypeId": 78
          }
        ],
        "Path": [
          "primitive_types",
          "H160"
        ],
        "TypeDef": "Composite"
      },
      "130": {
        "TypeId": 12,
        "TypeDef": "Sequence"
      },
      "131": {
        "Variants": [
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "H160",
                "TypeId": 129
              },
              {
                "Name": "to",
                "TypeName": "H160",
                "TypeId": 129
              },
              {
                "Name": "transaction_hash",
                "TypeName": "H256",
                "TypeId": 12
              },
              {
                "Name": "exit_reason",
                "TypeName": "ExitReason",
                "TypeId": 132
              },
              {
                "Name": "extra_data",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "An ethereum transaction was successfully executed."
            ]
          }
        ],
        "Path": [
          "pallet_ethereum",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "132": {
        "Variants": [
          {
            "Name": "Succeed",
            "TypeFields": [
              {
                "TypeName": "ExitSucceed",
                "TypeId": 133
              }
            ],
            "Index": 0
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "ExitError",
                "TypeId": 134
              }
            ],
            "Index": 1
          },
          {
            "Name": "Revert",
            "TypeFields": [
              {
                "TypeName": "ExitRevert",
                "TypeId": 138
              }
            ],
            "Index": 2
          },
          {
            "Name": "Fatal",
            "TypeFields": [
              {
                "TypeName": "ExitFatal",
                "TypeId": 139
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitReason"
        ],
        "TypeDef": "Variant"
      },
      "133": {
        "Variants": [
          {
            "Name": "Stopped",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Returned",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Suicided",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitSucceed"
        ],
        "TypeDef": "Variant"
      },
      "134": {
        "Variants": [
          {
            "Name": "StackUnderflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "StackOverflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "InvalidJump",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "InvalidRange",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "DesignatedInvalid",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "CallTooDeep",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "CreateCollision",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "CreateContractLimit",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "InvalidCode",
            "TypeFields": [
              {
                "TypeName": "Opcode",
                "TypeId": 135
              }
            ],
            "Index": 15
          },
          {
            "Name": "OutOfOffset",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "OutOfGas",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "OutOfFund",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "PCUnderflow",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "CreateEmpty",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Cow<'static, str>",
                "TypeId": 136
              }
            ],
            "Index": 13
          },
          {
            "Name": "MaxNonce",
            "TypeFields": null,
            "Index": 14
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitError"
        ],
        "TypeDef": "Variant"
      },
      "135": {
        "TypeFields": [
          {
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "evm_core",
          "opcode",
          "Opcode"
        ],
        "TypeDef": "Composite"
      },
      "136": {
        "TypeFields": [
          {
            "TypeId": 137
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 137
          }
        ],
        "TypeDef": "Composite"
      },
      "137": {
        "Primitive": "Str",
        "TypeDef": "Primitive"
      },
      "138": {
        "Variants": [
          {
            "Name": "Reverted",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitRevert"
        ],
        "TypeDef": "Variant"
      },
      "139": {
        "Variants": [
          {
            "Name": "NotSupported",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "UnhandledInterrupt",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "CallErrorAsFatal",
            "TypeFields": [
              {
                "TypeName": "ExitError",
                "TypeId": 134
              }
            ],
            "Index": 2
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Cow<'static, str>",
                "TypeId": 136
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "evm_core",
          "error",
          "ExitFatal"
        ],
        "TypeDef": "Variant"
      },
      "140": {
        "Variants": [
          {
            "Name": "Bound",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "address",
                "TypeName": "EvmAddress",
                "TypeId": 129
              }
            ],
            "Index": 0,
            "Docs": [
              "Binding was created."
            ]
          },
          {
            "Name": "DeployerAdded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "EvmAddress",
                "TypeId": 129
              }
            ],
            "Index": 1,
            "Docs": [
              "Deployer was added."
            ]
          },
          {
            "Name": "DeployerRemoved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "EvmAddress",
                "TypeId": 129
              }
            ],
            "Index": 2,
            "Docs": [
              "Deployer was removed."
            ]
          }
        ],
        "Path": [
          "pallet_evm_accounts",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "141": {
        "Variants": [
          {
            "Name": "GlobalFarmCreated",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "total_rewards",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "reward_currency",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "yield_per_period",
                "TypeName": "Perquintill",
                "TypeId": 93
              },
              {
                "Name": "planned_yielding_periods",
                "TypeName": "PeriodOf<T>",
                "TypeId": 4
              },
              {
                "Name": "blocks_per_period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "incentivized_asset",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "max_reward_per_period",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "min_deposit",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "price_adjustment",
                "TypeName": "FixedU128",
                "TypeId": 86
              }
            ],
            "Index": 0,
            "Docs": [
              "New global farm was created."
            ]
          },
          {
            "Name": "GlobalFarmUpdated",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "price_adjustment",
                "TypeName": "FixedU128",
                "TypeId": 86
              }
            ],
            "Index": 1,
            "Docs": [
              "Global farm's `price_adjustment` was updated."
            ]
          },
          {
            "Name": "YieldFarmCreated",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "multiplier",
                "TypeName": "FarmMultiplier",
                "TypeId": 86
              },
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair",
                "TypeId": 142
              },
              {
                "Name": "loyalty_curve",
                "TypeName": "Option<LoyaltyCurve>",
                "TypeId": 94
              }
            ],
            "Index": 2,
            "Docs": [
              "New yield farm was added into the farm."
            ]
          },
          {
            "Name": "GlobalFarmTerminated",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "reward_currency",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "undistributed_rewards",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Global farm was terminated."
            ]
          },
          {
            "Name": "SharesDeposited",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "lp_token",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "New LP tokens was deposited."
            ]
          },
          {
            "Name": "SharesRedeposited",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "lp_token",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "LP token was redeposited for a new yield farm entry"
            ]
          },
          {
            "Name": "RewardClaimed",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "claimed",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "reward_currency",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Rewards was claimed."
            ]
          },
          {
            "Name": "SharesWithdrawn",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "lp_token",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "LP tokens was withdrawn."
            ]
          },
          {
            "Name": "YieldFarmStopped",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair",
                "TypeId": 142
              }
            ],
            "Index": 8,
            "Docs": [
              "Yield farm for asset pair was stopped."
            ]
          },
          {
            "Name": "YieldFarmResumed",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair",
                "TypeId": 142
              },
              {
                "Name": "multiplier",
                "TypeName": "FarmMultiplier",
                "TypeId": 86
              }
            ],
            "Index": 9,
            "Docs": [
              "Yield farm for asset pair was resumed."
            ]
          },
          {
            "Name": "YieldFarmTerminated",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair",
                "TypeId": 142
              }
            ],
            "Index": 10,
            "Docs": [
              "Yield farm was terminated from global farm."
            ]
          },
          {
            "Name": "YieldFarmUpdated",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair",
                "TypeId": 142
              },
              {
                "Name": "multiplier",
                "TypeName": "FarmMultiplier",
                "TypeId": 86
              }
            ],
            "Index": 11,
            "Docs": [
              "Yield farm multiplier was updated."
            ]
          },
          {
            "Name": "DepositDestroyed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              }
            ],
            "Index": 12,
            "Docs": [
              "NFT representing deposit has been destroyed"
            ]
          }
        ],
        "Path": [
          "pallet_xyk_liquidity_mining",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "142": {
        "TypeFields": [
          {
            "Name": "asset_in",
            "TypeName": "AssetId",
            "TypeId": 4
          },
          {
            "Name": "asset_out",
            "TypeName": "AssetId",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_xyk",
          "types",
          "AssetPair"
        ],
        "TypeDef": "Composite"
      },
      "143": {
        "Variants": [
          {
            "Name": "GlobalFarmAccRPZUpdated",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "accumulated_rpz",
                "TypeName": "FixedU128",
                "TypeId": 86
              },
              {
                "Name": "total_shares_z",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Global farm accumulated reward per share was updated."
            ]
          },
          {
            "Name": "YieldFarmAccRPVSUpdated",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "accumulated_rpvs",
                "TypeName": "FixedU128",
                "TypeId": 86
              },
              {
                "Name": "total_valued_shares",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Yield farm accumulated reward per valued share was updated."
            ]
          },
          {
            "Name": "AllRewardsDistributed",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Global farm has no more rewards to distribute in the moment."
            ]
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "144": {
        "Variants": [
          {
            "Name": "ValidationFunctionStored",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The validation function has been scheduled to apply."
            ]
          },
          {
            "Name": "ValidationFunctionApplied",
            "TypeFields": [
              {
                "Name": "relay_chain_block_num",
                "TypeName": "RelayChainBlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "The validation function was applied as of the contained relay chain block number."
            ]
          },
          {
            "Name": "ValidationFunctionDiscarded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The relay-chain aborted the upgrade process."
            ]
          },
          {
            "Name": "UpgradeAuthorized",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "An upgrade has been authorized."
            ]
          },
          {
            "Name": "DownwardMessagesReceived",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Some downward messages have been received and will be processed."
            ]
          },
          {
            "Name": "DownwardMessagesProcessed",
            "TypeFields": [
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "dmq_head",
                "TypeName": "relay_chain::Hash",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "Downward messages were processed using the given weight."
            ]
          },
          {
            "Name": "UpwardMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 145
              }
            ],
            "Index": 6,
            "Docs": [
              "An upward message was sent to the relay chain."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "145": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          }
        ],
        "TypeDef": "Variant"
      },
      "146": {
        "Variants": [
          {
            "Name": "Scheduled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Scheduled some task."
            ]
          },
          {
            "Name": "Canceled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Canceled some task."
            ]
          },
          {
            "Name": "Dispatched",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 98
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 145
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 2,
            "Docs": [
              "Dispatched some task."
            ]
          },
          {
            "Name": "CallUnavailable",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 98
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 145
              }
            ],
            "Index": 3,
            "Docs": [
              "The call for the provided hash was not found so the task has been aborted."
            ]
          },
          {
            "Name": "PeriodicFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 98
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 145
              }
            ],
            "Index": 4,
            "Docs": [
              "The given task was unable to be renewed since the agenda is full at that block."
            ]
          },
          {
            "Name": "PermanentlyOverweight",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 98
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 145
              }
            ],
            "Index": 5,
            "Docs": [
              "The given task can never be executed since it is overweight."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events type."
        ]
      },
      "147": {
        "Variants": [
          {
            "Name": "ExecutionStarted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ScheduleId",
                "TypeId": 4
              },
              {
                "Name": "block",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "The DCA execution is started"
            ]
          },
          {
            "Name": "Scheduled",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ScheduleId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "total_amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "order",
                "TypeName": "Order<T::AssetId>",
                "TypeId": 148
              }
            ],
            "Index": 1,
            "Docs": [
              "The DCA is scheduled for next execution"
            ]
          },
          {
            "Name": "ExecutionPlanned",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ScheduleId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "block",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "The DCA is planned for blocknumber"
            ]
          },
          {
            "Name": "TradeExecuted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ScheduleId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "The DCA trade is successfully executed"
            ]
          },
          {
            "Name": "TradeFailed",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ScheduleId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 25
              }
            ],
            "Index": 4,
            "Docs": [
              "The DCA trade execution is failed"
            ]
          },
          {
            "Name": "Terminated",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ScheduleId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 25
              }
            ],
            "Index": 5,
            "Docs": [
              "The DCA is terminated and completely removed from the chain"
            ]
          },
          {
            "Name": "Completed",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ScheduleId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "The DCA is completed and completely removed from the chain"
            ]
          },
          {
            "Name": "RandomnessGenerationFailed",
            "TypeFields": [
              {
                "Name": "block",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 25
              }
            ],
            "Index": 7,
            "Docs": [
              "Randomness generation failed possibly coming from missing data about relay chain"
            ]
          }
        ],
        "Path": [
          "pallet_dca",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "148": {
        "Variants": [
          {
            "Name": "Sell",
            "TypeFields": [
              {
                "Name": "asset_in",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "min_amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "route",
                "TypeName": "BoundedVec<Trade<AssetId>, ConstU32<MAX_NUMBER_OF_TRADES>>",
                "TypeId": 149
              }
            ],
            "Index": 0
          },
          {
            "Name": "Buy",
            "TypeFields": [
              {
                "Name": "asset_in",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "max_amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "route",
                "TypeName": "BoundedVec<Trade<AssetId>, ConstU32<MAX_NUMBER_OF_TRADES>>",
                "TypeId": 149
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_dca",
          "types",
          "Order"
        ],
        "TypeParams": [
          {
            "Name": "AssetId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "149": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 152
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 150
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "150": {
        "TypeFields": [
          {
            "Name": "pool",
            "TypeName": "PoolType<AssetId>",
            "TypeId": 151
          },
          {
            "Name": "asset_in",
            "TypeName": "AssetId",
            "TypeId": 4
          },
          {
            "Name": "asset_out",
            "TypeName": "AssetId",
            "TypeId": 4
          }
        ],
        "Path": [
          "hydradx_traits",
          "router",
          "Trade"
        ],
        "TypeParams": [
          {
            "Name": "AssetId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "151": {
        "Variants": [
          {
            "Name": "XYK",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "LBP",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Stableswap",
            "TypeFields": [
              {
                "TypeName": "AssetId",
                "TypeId": 4
              }
            ],
            "Index": 2
          },
          {
            "Name": "Omnipool",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "hydradx_traits",
          "router",
          "PoolType"
        ],
        "TypeParams": [
          {
            "Name": "AssetId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "152": {
        "TypeId": 150,
        "TypeDef": "Sequence"
      },
      "153": {
        "Variants": [
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "Name": "outcome",
                "TypeName": "xcm::latest::Outcome",
                "TypeId": 154
              }
            ],
            "Index": 0,
            "Docs": [
              "Execution of an XCM message was attempted."
            ]
          },
          {
            "Name": "Sent",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "destination",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "message",
                "TypeName": "Xcm<()>",
                "TypeId": 156
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "A XCM message was sent."
            ]
          },
          {
            "Name": "UnexpectedResponse",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 2,
            "Docs": [
              "Query response received which does not match a registered query. This may be because a",
              "matching query was never registered, it may be because it is a duplicate response, or",
              "because the query timed out."
            ]
          },
          {
            "Name": "ResponseReady",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 166
              }
            ],
            "Index": 3,
            "Docs": [
              "Query response has been received and is ready for taking with `take_response`. There is",
              "no registered notification call."
            ]
          },
          {
            "Name": "Notified",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4,
            "Docs": [
              "Query response has been received and query is removed. The registered notification has",
              "been dispatched and executed successfully."
            ]
          },
          {
            "Name": "NotifyOverweight",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "actual_weight",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "max_budgeted_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "Query response has been received and query is removed. The registered notification",
              "could not be dispatched because the dispatch weight is greater than the maximum weight",
              "originally budgeted by this runtime for the query result."
            ]
          },
          {
            "Name": "NotifyDispatchError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 6,
            "Docs": [
              "Query response has been received and query is removed. There was a general error with",
              "dispatching the notification call."
            ]
          },
          {
            "Name": "NotifyDecodeFailed",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 7,
            "Docs": [
              "Query response has been received and query is removed. The dispatch was unable to be",
              "decoded into a `Call`; this might be due to dispatch function having a signature which",
              "is not `(origin, QueryId, Response)`."
            ]
          },
          {
            "Name": "InvalidResponder",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "expected_location",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 8,
            "Docs": [
              "Expected query response has been received but the origin location of the response does",
              "not match that expected. The query remains registered for a later, valid, response to",
              "be received and acted upon."
            ]
          },
          {
            "Name": "InvalidResponderVersion",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 9,
            "Docs": [
              "Expected query response has been received but the expected origin location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed."
            ]
          },
          {
            "Name": "ResponseTaken",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 10,
            "Docs": [
              "Received query response has been read and removed."
            ]
          },
          {
            "Name": "AssetsTrapped",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H256",
                "TypeId": 12
              },
              {
                "Name": "origin",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "assets",
                "TypeName": "VersionedMultiAssets",
                "TypeId": 183
              }
            ],
            "Index": 11,
            "Docs": [
              "Some assets have been placed in an asset trap."
            ]
          },
          {
            "Name": "VersionChangeNotified",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "result",
                "TypeName": "XcmVersion",
                "TypeId": 4
              },
              {
                "Name": "cost",
                "TypeName": "MultiAssets",
                "TypeId": 159
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 12,
            "Docs": [
              "An XCM version change notification message has been attempted to be sent.",
              "",
              "The cost of sending it (borne by the chain) is included."
            ]
          },
          {
            "Name": "SupportedVersionChanged",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "The supported version of a location has been changed. This might be through an",
              "automatic notification or a manual intervention."
            ]
          },
          {
            "Name": "NotifyTargetSendFail",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "error",
                "TypeName": "XcmError",
                "TypeId": 155
              }
            ],
            "Index": 14,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "sending the notification to it."
            ]
          },
          {
            "Name": "NotifyTargetMigrationFail",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 197
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 15,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "migrating the location to our new XCM format."
            ]
          },
          {
            "Name": "InvalidQuerierVersion",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              }
            ],
            "Index": 16,
            "Docs": [
              "Expected query response has been received but the expected querier location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed."
            ]
          },
          {
            "Name": "InvalidQuerier",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "expected_querier",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "maybe_actual_querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 17,
            "Docs": [
              "Expected query response has been received but the querier location of the response does",
              "not match the expected. The query remains registered for a later, valid, response to",
              "be received and acted upon."
            ]
          },
          {
            "Name": "VersionNotifyStarted",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "cost",
                "TypeName": "MultiAssets",
                "TypeId": 159
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 18,
            "Docs": [
              "A remote has requested XCM version change notification from us and we have honored it.",
              "A version information message is sent to them and its cost is included."
            ]
          },
          {
            "Name": "VersionNotifyRequested",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "cost",
                "TypeName": "MultiAssets",
                "TypeId": 159
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 19,
            "Docs": [
              "We have requested that a remote chain send us XCM version change notifications."
            ]
          },
          {
            "Name": "VersionNotifyUnrequested",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "cost",
                "TypeName": "MultiAssets",
                "TypeId": 159
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 20,
            "Docs": [
              "We have requested that a remote chain stops sending us XCM version change",
              "notifications."
            ]
          },
          {
            "Name": "FeesPaid",
            "TypeFields": [
              {
                "Name": "paying",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "fees",
                "TypeName": "MultiAssets",
                "TypeId": 159
              }
            ],
            "Index": 21,
            "Docs": [
              "Fees were paid from a location for an operation (often for using `SendXcm`)."
            ]
          },
          {
            "Name": "AssetsClaimed",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H256",
                "TypeId": 12
              },
              {
                "Name": "origin",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "assets",
                "TypeName": "VersionedMultiAssets",
                "TypeId": 183
              }
            ],
            "Index": 22,
            "Docs": [
              "Some assets have been claimed from an asset trap"
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "154": {
        "Variants": [
          {
            "Name": "Complete",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 0
          },
          {
            "Name": "Incomplete",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "TypeName": "Error",
                "TypeId": 155
              }
            ],
            "Index": 1
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "Error",
                "TypeId": 155
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "traits",
          "Outcome"
        ],
        "TypeDef": "Variant"
      },
      "155": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "LocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 21
          },
          {
            "Name": "ExpectationFalse",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "PalletNotFound",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "NameMismatch",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "VersionIncompatible",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "HoldingWouldOverflow",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "ExportError",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "ReanchorFailed",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "NoDeal",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "LockError",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Unanchored",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "NotDepositable",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 36
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 37
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "ExceedsStackLimit",
            "TypeFields": null,
            "Index": 39
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "156": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 157
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "157": {
        "TypeId": 158,
        "TypeDef": "Sequence"
      },
      "158": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 159
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 159
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 159
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 166
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 159
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 159
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 156
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 176
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 177
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 73
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 156
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 159
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 156
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 156
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 161
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 156
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 156
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 159
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 159
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 159
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 167
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 173
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 74
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 77
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 73
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 156
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 161
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 161
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 161
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 161
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "159": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 160
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "160": {
        "TypeId": 161,
        "TypeDef": "Sequence"
      },
      "161": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 162
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 163
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "162": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "163": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 79
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 164
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "164": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 79
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 17
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 122
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 165
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "165": {
        "Length": 16,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "166": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 159
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 167
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletsInfo",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                "TypeId": 169
              }
            ],
            "Index": 4
          },
          {
            "Name": "DispatchResult",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 173
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "167": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 168
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 168
          }
        ],
        "TypeDef": "Variant"
      },
      "168": {
        "TypeIds": [
          4,
          155
        ],
        "TypeDef": "Tuple"
      },
      "169": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 172
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 170
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "170": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 75
          },
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 171
          },
          {
            "Name": "module_name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 171
          },
          {
            "Name": "major",
            "TypeName": "u32",
            "TypeId": 75
          },
          {
            "Name": "minor",
            "TypeName": "u32",
            "TypeId": 75
          },
          {
            "Name": "patch",
            "TypeName": "u32",
            "TypeId": 75
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "PalletInfo"
        ],
        "TypeDef": "Composite"
      },
      "171": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "172": {
        "TypeId": 170,
        "TypeDef": "Sequence"
      },
      "173": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 174
              }
            ],
            "Index": 1
          },
          {
            "Name": "TruncatedError",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 174
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "MaybeErrorCode"
        ],
        "TypeDef": "Variant"
      },
      "174": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "175": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 72
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 72
          }
        ],
        "TypeDef": "Variant"
      },
      "176": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SovereignAccount",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Superuser",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Xcm",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "OriginKind"
        ],
        "TypeDef": "Variant"
      },
      "177": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 13
          }
        ],
        "Path": [
          "staging_xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "178": {
        "TypeFields": [
          {
            "Name": "destination",
            "TypeName": "MultiLocation",
            "TypeId": 72
          },
          {
            "Name": "query_id",
            "TypeName": "QueryId",
            "TypeId": 10
          },
          {
            "Name": "max_weight",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "QueryResponseInfo"
        ],
        "TypeDef": "Composite"
      },
      "179": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 159
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 180
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "180": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 162
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 181
              }
            ],
            "Index": 1
          },
          {
            "Name": "AllCounted",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 2
          },
          {
            "Name": "AllOfCounted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 162
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 181
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "181": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "182": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "183": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAssets",
                "TypeId": 159
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "VersionedMultiAssets"
        ],
        "TypeDef": "Variant"
      },
      "184": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 185
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "185": {
        "TypeId": 186,
        "TypeDef": "Sequence"
      },
      "186": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 187
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 195
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "187": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "188": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 189
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "189": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              },
              {
                "TypeName": "Junction",
                "TypeId": 190
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "multilocation",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "190": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 191
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 191
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 191
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 78
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 79
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 192
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 193
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 194
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "191": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 192
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "192": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "193": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 192
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "194": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "195": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 79
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 196
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "196": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 79
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 17
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 122
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 165
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          },
          {
            "Name": "Blob",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "197": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "VersionedMultiLocation"
        ],
        "TypeDef": "Variant"
      },
      "198": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "TypeName": "Outcome",
                "TypeId": 154
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome.",
              "\\[ id, outcome \\]"
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "199": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "XcmHash",
                "TypeId": 1
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 0,
            "Docs": [
              "Some XCM was executed ok."
            ]
          },
          {
            "Name": "Fail",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "XcmHash",
                "TypeId": 1
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              },
              {
                "Name": "error",
                "TypeName": "XcmError",
                "TypeId": 155
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1,
            "Docs": [
              "Some XCM failed."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 2,
            "Docs": [
              "Bad XCM version used."
            ]
          },
          {
            "Name": "BadFormat",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Bad XCM format used."
            ]
          },
          {
            "Name": "XcmpMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 4,
            "Docs": [
              "An HRMP message was sent to a sibling parachain."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "ParaId",
                "TypeId": 200
              },
              {
                "Name": "sent_at",
                "TypeName": "RelayBlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 11
              },
              {
                "Name": "required",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "An XCM exceeded the individual message weight budget."
            ]
          },
          {
            "Name": "OverweightServiced",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 11
              },
              {
                "Name": "used",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 6,
            "Docs": [
              "An XCM from the overweight queue was executed with the given actual weight used."
            ]
          },
          {
            "Name": "XcmDeferred",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "ParaId",
                "TypeId": 200
              },
              {
                "Name": "sent_at",
                "TypeName": "RelayBlockNumber",
                "TypeId": 4
              },
              {
                "Name": "deferred_to",
                "TypeName": "RelayBlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "DeferredIndex",
                "TypeId": 201
              },
              {
                "Name": "position",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 145
              }
            ],
            "Index": 7,
            "Docs": [
              "Some XCM was deferred for later execution"
            ]
          },
          {
            "Name": "XcmDeferredQueueFull",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "ParaId",
                "TypeId": 200
              },
              {
                "Name": "sent_at",
                "TypeName": "RelayBlockNumber",
                "TypeId": 4
              },
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 145
              }
            ],
            "Index": 8,
            "Docs": [
              "The deferred queue is full with xcm messages"
            ]
          },
          {
            "Name": "DeferredXcmDiscarded",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "ParaId",
                "TypeId": 200
              },
              {
                "Name": "sent_at",
                "TypeName": "RelayBlockNumber",
                "TypeId": 4
              },
              {
                "Name": "deferred_to",
                "TypeName": "RelayBlockNumber",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "DeferredIndex",
                "TypeId": 201
              },
              {
                "Name": "position",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 145
              }
            ],
            "Index": 9,
            "Docs": [
              "The deferred message was successfully discarded."
            ]
          },
          {
            "Name": "DeferredBucketDiscarded",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "ParaId",
                "TypeId": 200
              },
              {
                "Name": "index",
                "TypeName": "DeferredIndex",
                "TypeId": 201
              }
            ],
            "Index": 10,
            "Docs": [
              "The deferred bucket was discarded."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "200": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_parachain_primitives",
          "primitives",
          "Id"
        ],
        "TypeDef": "Composite"
      },
      "201": {
        "TypeIds": [
          4,
          53
        ],
        "TypeDef": "Tuple"
      },
      "202": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM."
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM."
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "XcmHash",
                "TypeId": 1
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              },
              {
                "Name": "outcome",
                "TypeName": "Outcome",
                "TypeId": 154
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome."
            ]
          },
          {
            "Name": "WeightExhausted",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "XcmHash",
                "TypeId": 1
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              },
              {
                "Name": "remaining_weight",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "required_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 3,
            "Docs": [
              "The weight limit for handling downward messages was reached."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "XcmHash",
                "TypeId": 1
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              },
              {
                "Name": "overweight_index",
                "TypeName": "OverweightIndex",
                "TypeId": 11
              },
              {
                "Name": "required_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 4,
            "Docs": [
              "Downward message is overweight and was placed in the overweight queue."
            ]
          },
          {
            "Name": "OverweightServiced",
            "TypeFields": [
              {
                "Name": "overweight_index",
                "TypeName": "OverweightIndex",
                "TypeId": 11
              },
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "Downward message from the overweight queue was executed."
            ]
          },
          {
            "Name": "MaxMessagesExhausted",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 6,
            "Docs": [
              "The maximum number of downward messages was reached."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "203": {
        "Variants": [
          {
            "Name": "Sent",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "message",
                "TypeName": "Xcm<()>",
                "TypeId": 156
              }
            ],
            "Index": 0,
            "Docs": [
              "XCM message sent. \\[to, message\\]"
            ]
          }
        ],
        "Path": [
          "orml_xcm",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "204": {
        "Variants": [
          {
            "Name": "TransferredMultiAssets",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 159
              },
              {
                "Name": "fee",
                "TypeName": "MultiAsset",
                "TypeId": 161
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 0,
            "Docs": [
              "Transferred `MultiAsset` with fee."
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "205": {
        "Variants": [
          {
            "Name": "Deposited",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 161
              },
              {
                "Name": "who",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 0,
            "Docs": [
              "Deposit success."
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 161
              },
              {
                "Name": "who",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 1,
            "Docs": [
              "Withdraw success."
            ]
          }
        ],
        "Path": [
          "orml_unknown_tokens",
          "module",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "206": {
        "Variants": [
          {
            "Name": "NewInvulnerables",
            "TypeFields": [
              {
                "Name": "invulnerables",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 207
              }
            ],
            "Index": 0,
            "Docs": [
              "New Invulnerables were set."
            ]
          },
          {
            "Name": "InvulnerableAdded",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "A new Invulnerable was added."
            ]
          },
          {
            "Name": "InvulnerableRemoved",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "An Invulnerable was removed."
            ]
          },
          {
            "Name": "NewDesiredCandidates",
            "TypeFields": [
              {
                "Name": "desired_candidates",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "The number of desired candidates was set."
            ]
          },
          {
            "Name": "NewCandidacyBond",
            "TypeFields": [
              {
                "Name": "bond_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "The candidacy bond was set."
            ]
          },
          {
            "Name": "CandidateAdded",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "A new candidate joined."
            ]
          },
          {
            "Name": "CandidateRemoved",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "A candidate was removed."
            ]
          },
          {
            "Name": "InvalidInvulnerableSkipped",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "An account was unable to be added to the Invulnerables because they did not have keys",
              "registered. Other Invulnerables may have been set."
            ]
          }
        ],
        "Path": [
          "pallet_collator_selection",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "207": {
        "TypeId": 0,
        "TypeDef": "Sequence"
      },
      "208": {
        "Variants": [
          {
            "Name": "NewSession",
            "TypeFields": [
              {
                "Name": "session_index",
                "TypeName": "SessionIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New session has happened. Note that the argument is the session index, not the",
              "block number as the type might suggest."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "209": {
        "Variants": [
          {
            "Name": "CurrentBlockNumbers",
            "TypeFields": [
              {
                "Name": "parachain_block_number",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "relaychain_block_number",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Current block numbers",
              "[ Parachain block number, Relaychain Block number ]"
            ]
          }
        ],
        "Path": [
          "pallet_relaychain_info",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "210": {
        "Variants": [
          {
            "Name": "AddedToWhitelist",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "Source",
                "TypeId": 122
              },
              {
                "Name": "assets",
                "TypeName": "(AssetId, AssetId)",
                "TypeId": 98
              }
            ],
            "Index": 0,
            "Docs": [
              "Oracle was added to the whitelist."
            ]
          },
          {
            "Name": "RemovedFromWhitelist",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "Source",
                "TypeId": 122
              },
              {
                "Name": "assets",
                "TypeName": "(AssetId, AssetId)",
                "TypeId": 98
              }
            ],
            "Index": 1,
            "Docs": [
              "Oracle was removed from the whitelist."
            ]
          }
        ],
        "Path": [
          "pallet_ema_oracle",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "211": {
        "Variants": [
          {
            "Name": "CurrencySet",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "CurrencySet",
              "[who, currency]"
            ]
          },
          {
            "Name": "CurrencyAdded",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "New accepted currency added",
              "[currency]"
            ]
          },
          {
            "Name": "CurrencyRemoved",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Accepted currency removed",
              "[currency]"
            ]
          },
          {
            "Name": "FeeWithdrawn",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 4
              },
              {
                "Name": "native_fee_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "non_native_fee_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "destination_account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "Transaction fee paid in non-native currency",
              "[Account, Currency, Native fee amount, Non-native fee amount, Destination account]"
            ]
          }
        ],
        "Path": [
          "pallet_transaction_multi_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "212": {
        "Variants": [
          {
            "Name": "ApplyExtrinsic",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finalization",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Initialization",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_system",
          "Phase"
        ],
        "TypeDef": "Variant"
      },
      "213": {
        "TypeId": 98,
        "TypeDef": "Sequence"
      },
      "214": {
        "TypeFields": [
          {
            "Name": "spec_version",
            "TypeName": "codec::Compact<u32>",
            "TypeId": 75
          },
          {
            "Name": "spec_name",
            "TypeName": "sp_runtime::RuntimeString",
            "TypeId": 137
          }
        ],
        "Path": [
          "frame_system",
          "LastRuntimeUpgradeInfo"
        ],
        "TypeDef": "Composite"
      },
      "215": {
        "Variants": [
          {
            "Name": "remark",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::remark`]."
            ]
          },
          {
            "Name": "set_heap_pages",
            "TypeFields": [
              {
                "Name": "pages",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::set_heap_pages`]."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::set_code`]."
            ]
          },
          {
            "Name": "set_code_without_checks",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::set_code_without_checks`]."
            ]
          },
          {
            "Name": "set_storage",
            "TypeFields": [
              {
                "Name": "items",
                "TypeName": "Vec<KeyValue>",
                "TypeId": 216
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::set_storage`]."
            ]
          },
          {
            "Name": "kill_storage",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Key>",
                "TypeId": 218
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::kill_storage`]."
            ]
          },
          {
            "Name": "kill_prefix",
            "TypeFields": [
              {
                "Name": "prefix",
                "TypeName": "Key",
                "TypeId": 13
              },
              {
                "Name": "subkeys",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::kill_prefix`]."
            ]
          },
          {
            "Name": "remark_with_event",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::remark_with_event`]."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "216": {
        "TypeId": 217,
        "TypeDef": "Sequence"
      },
      "217": {
        "TypeIds": [
          13,
          13
        ],
        "TypeDef": "Tuple"
      },
      "218": {
        "TypeId": 13,
        "TypeDef": "Sequence"
      },
      "219": {
        "TypeFields": [
          {
            "Name": "base_block",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "max_block",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "per_class",
            "TypeName": "PerDispatchClass<WeightsPerClass>",
            "TypeId": 220
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockWeights"
        ],
        "TypeDef": "Composite"
      },
      "220": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 221
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 221
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 221
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 221
          }
        ],
        "TypeDef": "Composite"
      },
      "221": {
        "TypeFields": [
          {
            "Name": "base_extrinsic",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "max_extrinsic",
            "TypeName": "Option<Weight>",
            "TypeId": 222
          },
          {
            "Name": "max_total",
            "TypeName": "Option<Weight>",
            "TypeId": 222
          },
          {
            "Name": "reserved",
            "TypeName": "Option<Weight>",
            "TypeId": 222
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "WeightsPerClass"
        ],
        "TypeDef": "Composite"
      },
      "222": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 9
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 9
          }
        ],
        "TypeDef": "Variant"
      },
      "223": {
        "TypeFields": [
          {
            "Name": "max",
            "TypeName": "PerDispatchClass<u32>",
            "TypeId": 224
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockLength"
        ],
        "TypeDef": "Composite"
      },
      "224": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 4
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "225": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "write",
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_weights",
          "RuntimeDbWeight"
        ],
        "TypeDef": "Composite"
      },
      "226": {
        "TypeFields": [
          {
            "Name": "spec_name",
            "TypeName": "RuntimeString",
            "TypeId": 137
          },
          {
            "Name": "impl_name",
            "TypeName": "RuntimeString",
            "TypeId": 137
          },
          {
            "Name": "authoring_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "spec_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "impl_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "apis",
            "TypeName": "ApisVec",
            "TypeId": 227
          },
          {
            "Name": "transaction_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "state_version",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_version",
          "RuntimeVersion"
        ],
        "TypeDef": "Composite"
      },
      "227": {
        "TypeFields": [
          {
            "TypeId": 228
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 228
          }
        ],
        "TypeDef": "Composite"
      },
      "228": {
        "TypeId": 229,
        "TypeDef": "Sequence"
      },
      "229": {
        "TypeIds": [
          122,
          4
        ],
        "TypeDef": "Tuple"
      },
      "230": {
        "Variants": [
          {
            "Name": "InvalidSpecName",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "SpecVersionNeedsToIncrease",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "FailedToExtractRuntimeVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "Name": "NonDefaultComposite",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "Name": "NonZeroRefCount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "Name": "CallFiltered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The origin filter prevent the call to be dispatched."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the System pallet"
        ]
      },
      "231": {
        "Variants": [
          {
            "Name": "set",
            "TypeFields": [
              {
                "Name": "now",
                "TypeName": "T::Moment",
                "TypeId": 10
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set`]."
            ]
          }
        ],
        "Path": [
          "pallet_timestamp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "232": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 235
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 233
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "233": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 122
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reasons",
            "TypeName": "Reasons",
            "TypeId": 234
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "234": {
        "Variants": [
          {
            "Name": "Fee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Misc",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "Reasons"
        ],
        "TypeDef": "Variant"
      },
      "235": {
        "TypeId": 233,
        "TypeDef": "Sequence"
      },
      "236": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 238
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 237
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "237": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 122
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 122
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "238": {
        "TypeId": 237,
        "TypeDef": "Sequence"
      },
      "239": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 241
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 240
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "240": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "Id",
            "TypeId": 36
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "IdAmount"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 36
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "241": {
        "TypeId": 240,
        "TypeDef": "Sequence"
      },
      "242": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 241
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 240
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "243": {
        "Variants": [
          {
            "Name": "transfer_allow_death",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 79
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::transfer_allow_death`]."
            ]
          },
          {
            "Name": "set_balance_deprecated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 79
              },
              {
                "Name": "old_reserved",
                "TypeName": "T::Balance",
                "TypeId": 79
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::set_balance_deprecated`]."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 79
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::force_transfer`]."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 79
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::transfer_keep_alive`]."
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::transfer_all`]."
            ]
          },
          {
            "Name": "force_unreserve",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::force_unreserve`]."
            ]
          },
          {
            "Name": "upgrade_accounts",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 207
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::upgrade_accounts`]."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 79
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::transfer`]."
            ]
          },
          {
            "Name": "force_set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 79
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::force_set_balance`]."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "244": {
        "Variants": [
          {
            "Name": "VestingBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting balance too high to send value."
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account liquidity restrictions prevent withdrawal."
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Balance too low to send value."
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Value too low to create account due to existential deposit."
            ]
          },
          {
            "Name": "Expendability",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account."
            ]
          },
          {
            "Name": "ExistingVestingSchedule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A vesting schedule already exists for this account."
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist."
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Number of named reserves exceed `MaxReserves`."
            ]
          },
          {
            "Name": "TooManyHolds",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Number of holds exceed `MaxHolds`."
            ]
          },
          {
            "Name": "TooManyFreezes",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Number of freezes exceed `MaxFreezes`."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "245": {
        "Variants": [
          {
            "Name": "V1Ancient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "246": {
        "TypeFields": [
          {
            "Name": "proposer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_treasury",
          "Proposal"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "247": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 101
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "248": {
        "Variants": [
          {
            "Name": "propose_spend",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 79
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::propose_spend`]."
            ]
          },
          {
            "Name": "reject_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 75
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::reject_proposal`]."
            ]
          },
          {
            "Name": "approve_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 75
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::approve_proposal`]."
            ]
          },
          {
            "Name": "spend",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 79
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::spend`]."
            ]
          },
          {
            "Name": "remove_approval",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 75
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::remove_approval`]."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "249": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 122
          }
        ],
        "Path": [
          "frame_support",
          "PalletId"
        ],
        "TypeDef": "Composite"
      },
      "250": {
        "Variants": [
          {
            "Name": "InsufficientProposersBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Proposer's balance is too low."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No proposal or bounty at that index."
            ]
          },
          {
            "Name": "TooManyApprovals",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many approvals in the queue."
            ]
          },
          {
            "Name": "InsufficientPermission",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The spend origin is valid but the amount it is allowed to spend is lower than the",
              "amount to be spent."
            ]
          },
          {
            "Name": "ProposalNotApproved",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal has not been approved."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the treasury pallet."
        ]
      },
      "251": {
        "Variants": [
          {
            "Name": "batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 252
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::batch`]."
            ]
          },
          {
            "Name": "as_derivative",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 53
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 253
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::as_derivative`]."
            ]
          },
          {
            "Name": "batch_all",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 252
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::batch_all`]."
            ]
          },
          {
            "Name": "dispatch_as",
            "TypeFields": [
              {
                "Name": "as_origin",
                "TypeName": "Box<T::PalletsOrigin>",
                "TypeId": 420
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 253
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::dispatch_as`]."
            ]
          },
          {
            "Name": "force_batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 252
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::force_batch`]."
            ]
          },
          {
            "Name": "with_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 253
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::with_weight`]."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "252": {
        "TypeId": 253,
        "TypeDef": "Sequence"
      },
      "253": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                "TypeId": 215
              }
            ],
            "Index": 1
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                "TypeId": 231
              }
            ],
            "Index": 3
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                "TypeId": 243
              }
            ],
            "Index": 7
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                "TypeId": 248
              }
            ],
            "Index": 11
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                "TypeId": 251
              }
            ],
            "Index": 13
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                "TypeId": 254
              }
            ],
            "Index": 15
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                "TypeId": 255
              }
            ],
            "Index": 17
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                "TypeId": 295
              }
            ],
            "Index": 19
          },
          {
            "Name": "Elections",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Elections, Runtime>",
                "TypeId": 300
              }
            ],
            "Index": 21
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                "TypeId": 302
              }
            ],
            "Index": 23
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                "TypeId": 303
              }
            ],
            "Index": 25
          },
          {
            "Name": "Tips",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>",
                "TypeId": 304
              }
            ],
            "Index": 27
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                "TypeId": 305
              }
            ],
            "Index": 29
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                "TypeId": 307
              }
            ],
            "Index": 31
          },
          {
            "Name": "Uniques",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Uniques, Runtime>",
                "TypeId": 309
              }
            ],
            "Index": 32
          },
          {
            "Name": "StateTrieMigration",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StateTrieMigration, Runtime>",
                "TypeId": 311
              }
            ],
            "Index": 35
          },
          {
            "Name": "AssetRegistry",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetRegistry, Runtime>",
                "TypeId": 317
              }
            ],
            "Index": 51
          },
          {
            "Name": "Claims",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Claims, Runtime>",
                "TypeId": 321
              }
            ],
            "Index": 53
          },
          {
            "Name": "GenesisHistory",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<GenesisHistory, Runtime>",
                "TypeId": 324
              }
            ],
            "Index": 55
          },
          {
            "Name": "Omnipool",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Omnipool, Runtime>",
                "TypeId": 325
              }
            ],
            "Index": 59
          },
          {
            "Name": "TransactionPause",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TransactionPause, Runtime>",
                "TypeId": 327
              }
            ],
            "Index": 60
          },
          {
            "Name": "Duster",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Duster, Runtime>",
                "TypeId": 328
              }
            ],
            "Index": 61
          },
          {
            "Name": "OmnipoolWarehouseLM",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OmnipoolWarehouseLM, Runtime>",
                "TypeId": 329
              }
            ],
            "Index": 62
          },
          {
            "Name": "OmnipoolLiquidityMining",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OmnipoolLiquidityMining, Runtime>",
                "TypeId": 330
              }
            ],
            "Index": 63
          },
          {
            "Name": "OTC",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OTC, Runtime>",
                "TypeId": 331
              }
            ],
            "Index": 64
          },
          {
            "Name": "CircuitBreaker",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CircuitBreaker, Runtime>",
                "TypeId": 332
              }
            ],
            "Index": 65
          },
          {
            "Name": "Router",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Router, Runtime>",
                "TypeId": 333
              }
            ],
            "Index": 67
          },
          {
            "Name": "DynamicFees",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DynamicFees, Runtime>",
                "TypeId": 335
              }
            ],
            "Index": 68
          },
          {
            "Name": "Staking",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
                "TypeId": 336
              }
            ],
            "Index": 69
          },
          {
            "Name": "Stableswap",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Stableswap, Runtime>",
                "TypeId": 337
              }
            ],
            "Index": 70
          },
          {
            "Name": "Bonds",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bonds, Runtime>",
                "TypeId": 338
              }
            ],
            "Index": 71
          },
          {
            "Name": "LBP",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<LBP, Runtime>",
                "TypeId": 339
              }
            ],
            "Index": 73
          },
          {
            "Name": "XYK",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XYK, Runtime>",
                "TypeId": 341
              }
            ],
            "Index": 74
          },
          {
            "Name": "Referrals",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referrals, Runtime>",
                "TypeId": 342
              }
            ],
            "Index": 75
          },
          {
            "Name": "XcmRateLimiter",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmRateLimiter, Runtime>",
                "TypeId": 343
              }
            ],
            "Index": 76
          },
          {
            "Name": "Tokens",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tokens, Runtime>",
                "TypeId": 344
              }
            ],
            "Index": 77
          },
          {
            "Name": "Currencies",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Currencies, Runtime>",
                "TypeId": 345
              }
            ],
            "Index": 79
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                "TypeId": 346
              }
            ],
            "Index": 81
          },
          {
            "Name": "EVM",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>",
                "TypeId": 348
              }
            ],
            "Index": 90
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>",
                "TypeId": 354
              }
            ],
            "Index": 92
          },
          {
            "Name": "EVMAccounts",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVMAccounts, Runtime>",
                "TypeId": 364
              }
            ],
            "Index": 93
          },
          {
            "Name": "XYKLiquidityMining",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XYKLiquidityMining, Runtime>",
                "TypeId": 365
              }
            ],
            "Index": 95
          },
          {
            "Name": "XYKWarehouseLM",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XYKWarehouseLM, Runtime>",
                "TypeId": 366
              }
            ],
            "Index": 96
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                "TypeId": 367
              }
            ],
            "Index": 103
          },
          {
            "Name": "ParachainInfo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainInfo, Runtime>",
                "TypeId": 380
              }
            ],
            "Index": 105
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                "TypeId": 381
              }
            ],
            "Index": 5
          },
          {
            "Name": "DCA",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DCA, Runtime>",
                "TypeId": 382
              }
            ],
            "Index": 66
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                "TypeId": 385
              }
            ],
            "Index": 107
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CumulusXcm, Runtime>",
                "TypeId": 406
              }
            ],
            "Index": 109
          },
          {
            "Name": "DmpQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>",
                "TypeId": 407
              }
            ],
            "Index": 113
          },
          {
            "Name": "OrmlXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OrmlXcm, Runtime>",
                "TypeId": 408
              }
            ],
            "Index": 135
          },
          {
            "Name": "XTokens",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XTokens, Runtime>",
                "TypeId": 409
              }
            ],
            "Index": 137
          },
          {
            "Name": "CollatorSelection",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CollatorSelection, Runtime>",
                "TypeId": 412
              }
            ],
            "Index": 163
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                "TypeId": 413
              }
            ],
            "Index": 165
          },
          {
            "Name": "RelayChainInfo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<RelayChainInfo, Runtime>",
                "TypeId": 417
              }
            ],
            "Index": 201
          },
          {
            "Name": "EmaOracle",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EmaOracle, Runtime>",
                "TypeId": 418
              }
            ],
            "Index": 202
          },
          {
            "Name": "MultiTransactionPayment",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MultiTransactionPayment, Runtime>",
                "TypeId": 419
              }
            ],
            "Index": 203
          }
        ],
        "Path": [
          "hydradx_runtime",
          "RuntimeCall"
        ],
        "TypeDef": "Variant"
      },
      "254": {
        "Variants": [
          {
            "Name": "note_preimage",
            "TypeFields": [
              {
                "Name": "bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::note_preimage`]."
            ]
          },
          {
            "Name": "unnote_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::unnote_preimage`]."
            ]
          },
          {
            "Name": "request_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::request_preimage`]."
            ]
          },
          {
            "Name": "unrequest_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::unrequest_preimage`]."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "255": {
        "Variants": [
          {
            "Name": "add_registrar",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::add_registrar`]."
            ]
          },
          {
            "Name": "set_identity",
            "TypeFields": [
              {
                "Name": "info",
                "TypeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                "TypeId": 256
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::set_identity`]."
            ]
          },
          {
            "Name": "set_subs",
            "TypeFields": [
              {
                "Name": "subs",
                "TypeName": "Vec<(T::AccountId, Data)>",
                "TypeId": 290
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::set_subs`]."
            ]
          },
          {
            "Name": "clear_identity",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "See [`Pallet::clear_identity`]."
            ]
          },
          {
            "Name": "request_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 75
              },
              {
                "Name": "max_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 79
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::request_judgement`]."
            ]
          },
          {
            "Name": "cancel_request",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::cancel_request`]."
            ]
          },
          {
            "Name": "set_fee",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 75
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 79
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::set_fee`]."
            ]
          },
          {
            "Name": "set_account_id",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 75
              },
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::set_account_id`]."
            ]
          },
          {
            "Name": "set_fields",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 75
              },
              {
                "Name": "fields",
                "TypeName": "IdentityFields",
                "TypeId": 292
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::set_fields`]."
            ]
          },
          {
            "Name": "provide_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 75
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "judgement",
                "TypeName": "Judgement<BalanceOf<T>>",
                "TypeId": 294
              },
              {
                "Name": "identity",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::provide_judgement`]."
            ]
          },
          {
            "Name": "kill_identity",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::kill_identity`]."
            ]
          },
          {
            "Name": "add_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 259
              }
            ],
            "Index": 11,
            "Docs": [
              "See [`Pallet::add_sub`]."
            ]
          },
          {
            "Name": "rename_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 259
              }
            ],
            "Index": 12,
            "Docs": [
              "See [`Pallet::rename_sub`]."
            ]
          },
          {
            "Name": "remove_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 13,
            "Docs": [
              "See [`Pallet::remove_sub`]."
            ]
          },
          {
            "Name": "quit_sub",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "See [`Pallet::quit_sub`]."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Identity pallet declaration."
        ]
      },
      "256": {
        "TypeFields": [
          {
            "Name": "additional",
            "TypeName": "BoundedVec<(Data, Data), FieldLimit>",
            "TypeId": 257
          },
          {
            "Name": "display",
            "TypeName": "Data",
            "TypeId": 259
          },
          {
            "Name": "legal",
            "TypeName": "Data",
            "TypeId": 259
          },
          {
            "Name": "web",
            "TypeName": "Data",
            "TypeId": 259
          },
          {
            "Name": "riot",
            "TypeName": "Data",
            "TypeId": 259
          },
          {
            "Name": "email",
            "TypeName": "Data",
            "TypeId": 259
          },
          {
            "Name": "pgp_fingerprint",
            "TypeName": "Option<[u8; 20]>",
            "TypeId": 289
          },
          {
            "Name": "image",
            "TypeName": "Data",
            "TypeId": 259
          },
          {
            "Name": "twitter",
            "TypeName": "Data",
            "TypeId": 259
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "IdentityInfo"
        ],
        "TypeParams": [
          {
            "Name": "FieldLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "257": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 288
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 258
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "258": {
        "TypeIds": [
          259,
          259
        ],
        "TypeDef": "Tuple"
      },
      "259": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Raw0",
            "TypeFields": [
              {
                "TypeId": 260
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw1",
            "TypeFields": [
              {
                "TypeId": 261
              }
            ],
            "Index": 2
          },
          {
            "Name": "Raw2",
            "TypeFields": [
              {
                "TypeId": 262
              }
            ],
            "Index": 3
          },
          {
            "Name": "Raw3",
            "TypeFields": [
              {
                "TypeId": 263
              }
            ],
            "Index": 4
          },
          {
            "Name": "Raw4",
            "TypeFields": [
              {
                "TypeId": 17
              }
            ],
            "Index": 5
          },
          {
            "Name": "Raw5",
            "TypeFields": [
              {
                "TypeId": 264
              }
            ],
            "Index": 6
          },
          {
            "Name": "Raw6",
            "TypeFields": [
              {
                "TypeId": 265
              }
            ],
            "Index": 7
          },
          {
            "Name": "Raw7",
            "TypeFields": [
              {
                "TypeId": 266
              }
            ],
            "Index": 8
          },
          {
            "Name": "Raw8",
            "TypeFields": [
              {
                "TypeId": 122
              }
            ],
            "Index": 9
          },
          {
            "Name": "Raw9",
            "TypeFields": [
              {
                "TypeId": 267
              }
            ],
            "Index": 10
          },
          {
            "Name": "Raw10",
            "TypeFields": [
              {
                "TypeId": 268
              }
            ],
            "Index": 11
          },
          {
            "Name": "Raw11",
            "TypeFields": [
              {
                "TypeId": 269
              }
            ],
            "Index": 12
          },
          {
            "Name": "Raw12",
            "TypeFields": [
              {
                "TypeId": 270
              }
            ],
            "Index": 13
          },
          {
            "Name": "Raw13",
            "TypeFields": [
              {
                "TypeId": 271
              }
            ],
            "Index": 14
          },
          {
            "Name": "Raw14",
            "TypeFields": [
              {
                "TypeId": 272
              }
            ],
            "Index": 15
          },
          {
            "Name": "Raw15",
            "TypeFields": [
              {
                "TypeId": 273
              }
            ],
            "Index": 16
          },
          {
            "Name": "Raw16",
            "TypeFields": [
              {
                "TypeId": 165
              }
            ],
            "Index": 17
          },
          {
            "Name": "Raw17",
            "TypeFields": [
              {
                "TypeId": 274
              }
            ],
            "Index": 18
          },
          {
            "Name": "Raw18",
            "TypeFields": [
              {
                "TypeId": 275
              }
            ],
            "Index": 19
          },
          {
            "Name": "Raw19",
            "TypeFields": [
              {
                "TypeId": 276
              }
            ],
            "Index": 20
          },
          {
            "Name": "Raw20",
            "TypeFields": [
              {
                "TypeId": 78
              }
            ],
            "Index": 21
          },
          {
            "Name": "Raw21",
            "TypeFields": [
              {
                "TypeId": 277
              }
            ],
            "Index": 22
          },
          {
            "Name": "Raw22",
            "TypeFields": [
              {
                "TypeId": 278
              }
            ],
            "Index": 23
          },
          {
            "Name": "Raw23",
            "TypeFields": [
              {
                "TypeId": 279
              }
            ],
            "Index": 24
          },
          {
            "Name": "Raw24",
            "TypeFields": [
              {
                "TypeId": 280
              }
            ],
            "Index": 25
          },
          {
            "Name": "Raw25",
            "TypeFields": [
              {
                "TypeId": 281
              }
            ],
            "Index": 26
          },
          {
            "Name": "Raw26",
            "TypeFields": [
              {
                "TypeId": 282
              }
            ],
            "Index": 27
          },
          {
            "Name": "Raw27",
            "TypeFields": [
              {
                "TypeId": 283
              }
            ],
            "Index": 28
          },
          {
            "Name": "Raw28",
            "TypeFields": [
              {
                "TypeId": 284
              }
            ],
            "Index": 29
          },
          {
            "Name": "Raw29",
            "TypeFields": [
              {
                "TypeId": 285
              }
            ],
            "Index": 30
          },
          {
            "Name": "Raw30",
            "TypeFields": [
              {
                "TypeId": 286
              }
            ],
            "Index": 31
          },
          {
            "Name": "Raw31",
            "TypeFields": [
              {
                "TypeId": 287
              }
            ],
            "Index": 32
          },
          {
            "Name": "Raw32",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 33
          },
          {
            "Name": "BlakeTwo256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 34
          },
          {
            "Name": "Sha256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 35
          },
          {
            "Name": "Keccak256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 36
          },
          {
            "Name": "ShaThree256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 37
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Data"
        ],
        "TypeDef": "Variant"
      },
      "260": {
        "Length": 0,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "261": {
        "Length": 1,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "262": {
        "Length": 2,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "263": {
        "Length": 3,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "264": {
        "Length": 5,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "265": {
        "Length": 6,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "266": {
        "Length": 7,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "267": {
        "Length": 9,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "268": {
        "Length": 10,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "269": {
        "Length": 11,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "270": {
        "Length": 12,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "271": {
        "Length": 13,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "272": {
        "Length": 14,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "273": {
        "Length": 15,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "274": {
        "Length": 17,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "275": {
        "Length": 18,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "276": {
        "Length": 19,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "277": {
        "Length": 21,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "278": {
        "Length": 22,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "279": {
        "Length": 23,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "280": {
        "Length": 24,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "281": {
        "Length": 25,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "282": {
        "Length": 26,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "283": {
        "Length": 27,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "284": {
        "Length": 28,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "285": {
        "Length": 29,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "286": {
        "Length": 30,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "287": {
        "Length": 31,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "288": {
        "TypeId": 258,
        "TypeDef": "Sequence"
      },
      "289": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 78
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 78
          }
        ],
        "TypeDef": "Variant"
      },
      "290": {
        "TypeId": 291,
        "TypeDef": "Sequence"
      },
      "291": {
        "TypeIds": [
          0,
          259
        ],
        "TypeDef": "Tuple"
      },
      "292": {
        "TypeFields": [
          {
            "TypeName": "IdentityField",
            "TypeId": 11
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "BitFlags"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 293
          }
        ],
        "TypeDef": "Composite"
      },
      "293": {
        "Variants": [
          {
            "Name": "Display",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Legal",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Web",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Riot",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Email",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "PgpFingerprint",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Image",
            "TypeFields": null,
            "Index": 64
          },
          {
            "Name": "Twitter",
            "TypeFields": null,
            "Index": 128
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "IdentityField"
        ],
        "TypeDef": "Variant"
      },
      "294": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "FeePaid",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reasonable",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "KnownGood",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "OutOfDate",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LowQuality",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Erroneous",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Judgement"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "295": {
        "Variants": [
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 296
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 79
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::propose`]."
            ]
          },
          {
            "Name": "second",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "PropIndex",
                "TypeId": 75
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::second`]."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 75
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 41
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::vote`]."
            ]
          },
          {
            "Name": "emergency_cancel",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::emergency_cancel`]."
            ]
          },
          {
            "Name": "external_propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 296
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::external_propose`]."
            ]
          },
          {
            "Name": "external_propose_majority",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 296
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::external_propose_majority`]."
            ]
          },
          {
            "Name": "external_propose_default",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 296
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::external_propose_default`]."
            ]
          },
          {
            "Name": "fast_track",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 12
              },
              {
                "Name": "voting_period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::fast_track`]."
            ]
          },
          {
            "Name": "veto_external",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::veto_external`]."
            ]
          },
          {
            "Name": "cancel_referendum",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 75
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::cancel_referendum`]."
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 298
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::delegate`]."
            ]
          },
          {
            "Name": "undelegate",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "See [`Pallet::undelegate`]."
            ]
          },
          {
            "Name": "clear_public_proposals",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "See [`Pallet::clear_public_proposals`]."
            ]
          },
          {
            "Name": "unlock",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 13,
            "Docs": [
              "See [`Pallet::unlock`]."
            ]
          },
          {
            "Name": "remove_vote",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 14,
            "Docs": [
              "See [`Pallet::remove_vote`]."
            ]
          },
          {
            "Name": "remove_other_vote",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "See [`Pallet::remove_other_vote`]."
            ]
          },
          {
            "Name": "blacklist",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "H256",
                "TypeId": 12
              },
              {
                "Name": "maybe_ref_index",
                "TypeName": "Option<ReferendumIndex>",
                "TypeId": 112
              }
            ],
            "Index": 16,
            "Docs": [
              "See [`Pallet::blacklist`]."
            ]
          },
          {
            "Name": "cancel_proposal",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 75
              }
            ],
            "Index": 17,
            "Docs": [
              "See [`Pallet::cancel_proposal`]."
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 43
              },
              {
                "Name": "maybe_hash",
                "TypeName": "Option<PreimageHash>",
                "TypeId": 299
              }
            ],
            "Index": 18,
            "Docs": [
              "See [`Pallet::set_metadata`]."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "296": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "Hash",
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inline",
            "TypeFields": [
              {
                "TypeName": "BoundedInline",
                "TypeId": 297
              }
            ],
            "Index": 1
          },
          {
            "Name": "Lookup",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "Hash",
                "TypeId": 12
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "preimages",
          "Bounded"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 253
          }
        ],
        "TypeDef": "Variant"
      },
      "297": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "298": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Locked1x",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Locked2x",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Locked3x",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Locked4x",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Locked5x",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Locked6x",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "conviction",
          "Conviction"
        ],
        "TypeDef": "Variant"
      },
      "299": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 12
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Variant"
      },
      "300": {
        "Variants": [
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "votes",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 207
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 79
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::vote`]."
            ]
          },
          {
            "Name": "remove_voter",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "See [`Pallet::remove_voter`]."
            ]
          },
          {
            "Name": "submit_candidacy",
            "TypeFields": [
              {
                "Name": "candidate_count",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::submit_candidacy`]."
            ]
          },
          {
            "Name": "renounce_candidacy",
            "TypeFields": [
              {
                "Name": "renouncing",
                "TypeName": "Renouncing",
                "TypeId": 301
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::renounce_candidacy`]."
            ]
          },
          {
            "Name": "remove_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "slash_bond",
                "TypeName": "bool",
                "TypeId": 48
              },
              {
                "Name": "rerun_election",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::remove_member`]."
            ]
          },
          {
            "Name": "clean_defunct_voters",
            "TypeFields": [
              {
                "Name": "num_voters",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "num_defunct",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::clean_defunct_voters`]."
            ]
          }
        ],
        "Path": [
          "pallet_elections_phragmen",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "301": {
        "Variants": [
          {
            "Name": "Member",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "RunnerUp",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Candidate",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_elections_phragmen",
          "Renouncing"
        ],
        "TypeDef": "Variant"
      },
      "302": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 207
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 62
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set_members`]."
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 253
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::execute`]."
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 75
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 253
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::propose`]."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 75
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::vote`]."
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::disapprove_proposal`]."
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 75
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::close`]."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "303": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 207
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 62
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set_members`]."
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 253
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::execute`]."
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 75
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 253
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::propose`]."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 75
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::vote`]."
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::disapprove_proposal`]."
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 75
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::close`]."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "304": {
        "Variants": [
          {
            "Name": "report_awesome",
            "TypeFields": [
              {
                "Name": "reason",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::report_awesome`]."
            ]
          },
          {
            "Name": "retract_tip",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::retract_tip`]."
            ]
          },
          {
            "Name": "tip_new",
            "TypeFields": [
              {
                "Name": "reason",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "tip_value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 79
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::tip_new`]."
            ]
          },
          {
            "Name": "tip",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "tip_value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 79
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::tip`]."
            ]
          },
          {
            "Name": "close_tip",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::close_tip`]."
            ]
          },
          {
            "Name": "slash_tip",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::slash_tip`]."
            ]
          }
        ],
        "Path": [
          "pallet_tips",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "305": {
        "Variants": [
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 306
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 253
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::proxy`]."
            ]
          },
          {
            "Name": "add_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 52
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::add_proxy`]."
            ]
          },
          {
            "Name": "remove_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 52
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::remove_proxy`]."
            ]
          },
          {
            "Name": "remove_proxies",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "See [`Pallet::remove_proxies`]."
            ]
          },
          {
            "Name": "create_pure",
            "TypeFields": [
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 52
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 53
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::create_pure`]."
            ]
          },
          {
            "Name": "kill_pure",
            "TypeFields": [
              {
                "Name": "spawner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 52
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 53
              },
              {
                "Name": "height",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 75
              },
              {
                "Name": "ext_index",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::kill_pure`]."
            ]
          },
          {
            "Name": "announce",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::announce`]."
            ]
          },
          {
            "Name": "remove_announcement",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::remove_announcement`]."
            ]
          },
          {
            "Name": "reject_announcement",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::reject_announcement`]."
            ]
          },
          {
            "Name": "proxy_announced",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 306
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 253
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::proxy_announced`]."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "306": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 52
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 52
          }
        ],
        "TypeDef": "Variant"
      },
      "307": {
        "Variants": [
          {
            "Name": "as_multi_threshold_1",
            "TypeFields": [
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 207
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 253
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::as_multi_threshold_1`]."
            ]
          },
          {
            "Name": "as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 53
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 207
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<BlockNumberFor<T>>>",
                "TypeId": 308
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 253
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::as_multi`]."
            ]
          },
          {
            "Name": "approve_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 53
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 207
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<BlockNumberFor<T>>>",
                "TypeId": 308
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::approve_as_multi`]."
            ]
          },
          {
            "Name": "cancel_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 53
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 207
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 55
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::cancel_as_multi`]."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "308": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 55
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 55
          }
        ],
        "TypeDef": "Variant"
      },
      "309": {
        "Variants": [
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::create`]."
            ]
          },
          {
            "Name": "force_create",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "free_holding",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::force_create`]."
            ]
          },
          {
            "Name": "destroy",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "witness",
                "TypeName": "DestroyWitness",
                "TypeId": 310
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::destroy`]."
            ]
          },
          {
            "Name": "mint",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::mint`]."
            ]
          },
          {
            "Name": "burn",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "check_owner",
                "TypeName": "Option<AccountIdLookupOf<T>>",
                "TypeId": 62
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::burn`]."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::transfer`]."
            ]
          },
          {
            "Name": "redeposit",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "items",
                "TypeName": "Vec<T::ItemId>",
                "TypeId": 58
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::redeposit`]."
            ]
          },
          {
            "Name": "freeze",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::freeze`]."
            ]
          },
          {
            "Name": "thaw",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::thaw`]."
            ]
          },
          {
            "Name": "freeze_collection",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::freeze_collection`]."
            ]
          },
          {
            "Name": "thaw_collection",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::thaw_collection`]."
            ]
          },
          {
            "Name": "transfer_ownership",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 11,
            "Docs": [
              "See [`Pallet::transfer_ownership`]."
            ]
          },
          {
            "Name": "set_team",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "issuer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "freezer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 12,
            "Docs": [
              "See [`Pallet::set_team`]."
            ]
          },
          {
            "Name": "approve_transfer",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 13,
            "Docs": [
              "See [`Pallet::approve_transfer`]."
            ]
          },
          {
            "Name": "cancel_approval",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "maybe_check_delegate",
                "TypeName": "Option<AccountIdLookupOf<T>>",
                "TypeId": 62
              }
            ],
            "Index": 14,
            "Docs": [
              "See [`Pallet::cancel_approval`]."
            ]
          },
          {
            "Name": "force_item_status",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "issuer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "freezer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 0
              },
              {
                "Name": "free_holding",
                "TypeName": "bool",
                "TypeId": 48
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 15,
            "Docs": [
              "See [`Pallet::force_item_status`]."
            ]
          },
          {
            "Name": "set_attribute",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<T::ItemId>",
                "TypeId": 59
              },
              {
                "Name": "key",
                "TypeName": "BoundedVec<u8, T::KeyLimit>",
                "TypeId": 60
              },
              {
                "Name": "value",
                "TypeName": "BoundedVec<u8, T::ValueLimit>",
                "TypeId": 61
              }
            ],
            "Index": 16,
            "Docs": [
              "See [`Pallet::set_attribute`]."
            ]
          },
          {
            "Name": "clear_attribute",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "maybe_item",
                "TypeName": "Option<T::ItemId>",
                "TypeId": 59
              },
              {
                "Name": "key",
                "TypeName": "BoundedVec<u8, T::KeyLimit>",
                "TypeId": 60
              }
            ],
            "Index": 17,
            "Docs": [
              "See [`Pallet::clear_attribute`]."
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "data",
                "TypeName": "BoundedVec<u8, T::StringLimit>",
                "TypeId": 57
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 18,
            "Docs": [
              "See [`Pallet::set_metadata`]."
            ]
          },
          {
            "Name": "clear_metadata",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "See [`Pallet::clear_metadata`]."
            ]
          },
          {
            "Name": "set_collection_metadata",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "data",
                "TypeName": "BoundedVec<u8, T::StringLimit>",
                "TypeId": 57
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 20,
            "Docs": [
              "See [`Pallet::set_collection_metadata`]."
            ]
          },
          {
            "Name": "clear_collection_metadata",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              }
            ],
            "Index": 21,
            "Docs": [
              "See [`Pallet::clear_collection_metadata`]."
            ]
          },
          {
            "Name": "set_accept_ownership",
            "TypeFields": [
              {
                "Name": "maybe_collection",
                "TypeName": "Option<T::CollectionId>",
                "TypeId": 59
              }
            ],
            "Index": 22,
            "Docs": [
              "See [`Pallet::set_accept_ownership`]."
            ]
          },
          {
            "Name": "set_collection_max_supply",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "max_supply",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 23,
            "Docs": [
              "See [`Pallet::set_collection_max_supply`]."
            ]
          },
          {
            "Name": "set_price",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "price",
                "TypeName": "Option<ItemPrice<T, I>>",
                "TypeId": 59
              },
              {
                "Name": "whitelisted_buyer",
                "TypeName": "Option<AccountIdLookupOf<T>>",
                "TypeId": 62
              }
            ],
            "Index": 24,
            "Docs": [
              "See [`Pallet::set_price`]."
            ]
          },
          {
            "Name": "buy_item",
            "TypeFields": [
              {
                "Name": "collection",
                "TypeName": "T::CollectionId",
                "TypeId": 6
              },
              {
                "Name": "item",
                "TypeName": "T::ItemId",
                "TypeId": 6
              },
              {
                "Name": "bid_price",
                "TypeName": "ItemPrice<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 25,
            "Docs": [
              "See [`Pallet::buy_item`]."
            ]
          }
        ],
        "Path": [
          "pallet_uniques",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "310": {
        "TypeFields": [
          {
            "Name": "items",
            "TypeName": "u32",
            "TypeId": 75
          },
          {
            "Name": "item_metadatas",
            "TypeName": "u32",
            "TypeId": 75
          },
          {
            "Name": "attributes",
            "TypeName": "u32",
            "TypeId": 75
          }
        ],
        "Path": [
          "pallet_uniques",
          "types",
          "DestroyWitness"
        ],
        "TypeDef": "Composite"
      },
      "311": {
        "Variants": [
          {
            "Name": "control_auto_migration",
            "TypeFields": [
              {
                "Name": "maybe_config",
                "TypeName": "Option<MigrationLimits>",
                "TypeId": 312
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::control_auto_migration`]."
            ]
          },
          {
            "Name": "continue_migrate",
            "TypeFields": [
              {
                "Name": "limits",
                "TypeName": "MigrationLimits",
                "TypeId": 313
              },
              {
                "Name": "real_size_upper",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "witness_task",
                "TypeName": "MigrationTask<T>",
                "TypeId": 314
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::continue_migrate`]."
            ]
          },
          {
            "Name": "migrate_custom_top",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Vec<u8>>",
                "TypeId": 218
              },
              {
                "Name": "witness_size",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::migrate_custom_top`]."
            ]
          },
          {
            "Name": "migrate_custom_child",
            "TypeFields": [
              {
                "Name": "root",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "child_keys",
                "TypeName": "Vec<Vec<u8>>",
                "TypeId": 218
              },
              {
                "Name": "total_size",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::migrate_custom_child`]."
            ]
          },
          {
            "Name": "set_signed_max_limits",
            "TypeFields": [
              {
                "Name": "limits",
                "TypeName": "MigrationLimits",
                "TypeId": 313
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::set_signed_max_limits`]."
            ]
          },
          {
            "Name": "force_set_progress",
            "TypeFields": [
              {
                "Name": "progress_top",
                "TypeName": "ProgressOf<T>",
                "TypeId": 315
              },
              {
                "Name": "progress_child",
                "TypeName": "ProgressOf<T>",
                "TypeId": 315
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::force_set_progress`]."
            ]
          }
        ],
        "Path": [
          "pallet_state_trie_migration",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "312": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 313
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 313
          }
        ],
        "TypeDef": "Variant"
      },
      "313": {
        "TypeFields": [
          {
            "Name": "size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "item",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_state_trie_migration",
          "pallet",
          "MigrationLimits"
        ],
        "TypeDef": "Composite"
      },
      "314": {
        "TypeFields": [
          {
            "Name": "progress_top",
            "TypeName": "ProgressOf<T>",
            "TypeId": 315
          },
          {
            "Name": "progress_child",
            "TypeName": "ProgressOf<T>",
            "TypeId": 315
          },
          {
            "Name": "size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "top_items",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "child_items",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_state_trie_migration",
          "pallet",
          "MigrationTask"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "315": {
        "Variants": [
          {
            "Name": "ToStart",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "LastKey",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxKeyLen>",
                "TypeId": 316
              }
            ],
            "Index": 1
          },
          {
            "Name": "Complete",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_state_trie_migration",
          "pallet",
          "Progress"
        ],
        "TypeParams": [
          {
            "Name": "MaxKeyLen"
          }
        ],
        "TypeDef": "Variant"
      },
      "316": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "317": {
        "Variants": [
          {
            "Name": "register",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "Option<T::AssetId>",
                "TypeId": 112
              },
              {
                "Name": "name",
                "TypeName": "Option<Name<T::StringLimit>>",
                "TypeId": 67
              },
              {
                "Name": "asset_type",
                "TypeName": "AssetType",
                "TypeId": 69
              },
              {
                "Name": "existential_deposit",
                "TypeName": "Option<Balance>",
                "TypeId": 59
              },
              {
                "Name": "symbol",
                "TypeName": "Option<Symbol<T::StringLimit>>",
                "TypeId": 67
              },
              {
                "Name": "decimals",
                "TypeName": "Option<u8>",
                "TypeId": 70
              },
              {
                "Name": "location",
                "TypeName": "Option<T::AssetNativeLocation>",
                "TypeId": 318
              },
              {
                "Name": "xcm_rate_limit",
                "TypeName": "Option<Balance>",
                "TypeId": 59
              },
              {
                "Name": "is_sufficient",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::register`]."
            ]
          },
          {
            "Name": "update",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "name",
                "TypeName": "Option<Name<T::StringLimit>>",
                "TypeId": 67
              },
              {
                "Name": "asset_type",
                "TypeName": "Option<AssetType>",
                "TypeId": 319
              },
              {
                "Name": "existential_deposit",
                "TypeName": "Option<Balance>",
                "TypeId": 59
              },
              {
                "Name": "xcm_rate_limit",
                "TypeName": "Option<Balance>",
                "TypeId": 59
              },
              {
                "Name": "is_sufficient",
                "TypeName": "Option<bool>",
                "TypeId": 320
              },
              {
                "Name": "symbol",
                "TypeName": "Option<Symbol<T::StringLimit>>",
                "TypeId": 67
              },
              {
                "Name": "decimals",
                "TypeName": "Option<u8>",
                "TypeId": 70
              },
              {
                "Name": "location",
                "TypeName": "Option<T::AssetNativeLocation>",
                "TypeId": 318
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::update`]."
            ]
          },
          {
            "Name": "register_external",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "T::AssetNativeLocation",
                "TypeId": 71
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::register_external`]."
            ]
          },
          {
            "Name": "ban_asset",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::ban_asset`]."
            ]
          },
          {
            "Name": "unban_asset",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::unban_asset`]."
            ]
          }
        ],
        "Path": [
          "pallet_asset_registry",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "318": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 71
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 71
          }
        ],
        "TypeDef": "Variant"
      },
      "319": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 69
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 69
          }
        ],
        "TypeDef": "Variant"
      },
      "320": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 48
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 48
          }
        ],
        "TypeDef": "Variant"
      },
      "321": {
        "Variants": [
          {
            "Name": "claim",
            "TypeFields": [
              {
                "Name": "ethereum_signature",
                "TypeName": "EcdsaSignature",
                "TypeId": 322
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::claim`]."
            ]
          }
        ],
        "Path": [
          "pallet_claims",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "322": {
        "TypeFields": [
          {
            "TypeName": "[u8; 65]",
            "TypeId": 323
          }
        ],
        "Path": [
          "pallet_claims",
          "traits",
          "EcdsaSignature"
        ],
        "TypeDef": "Composite"
      },
      "323": {
        "Length": 65,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "324": {
        "Variants": null,
        "Path": [
          "pallet_genesis_history",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "325": {
        "Variants": [
          {
            "Name": "add_token",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "initial_price",
                "TypeName": "Price",
                "TypeId": 86
              },
              {
                "Name": "weight_cap",
                "TypeName": "Permill",
                "TypeId": 88
              },
              {
                "Name": "position_owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::add_token`]."
            ]
          },
          {
            "Name": "add_liquidity",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::add_liquidity`]."
            ]
          },
          {
            "Name": "remove_liquidity",
            "TypeFields": [
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::remove_liquidity`]."
            ]
          },
          {
            "Name": "sacrifice_position",
            "TypeFields": [
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::sacrifice_position`]."
            ]
          },
          {
            "Name": "sell",
            "TypeFields": [
              {
                "Name": "asset_in",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "min_buy_amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::sell`]."
            ]
          },
          {
            "Name": "buy",
            "TypeFields": [
              {
                "Name": "asset_out",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_in",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "max_sell_amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::buy`]."
            ]
          },
          {
            "Name": "set_asset_tradable_state",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "state",
                "TypeName": "Tradability",
                "TypeId": 87
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::set_asset_tradable_state`]."
            ]
          },
          {
            "Name": "refund_refused_asset",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "recipient",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::refund_refused_asset`]."
            ]
          },
          {
            "Name": "set_asset_weight_cap",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "cap",
                "TypeName": "Permill",
                "TypeId": 88
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::set_asset_weight_cap`]."
            ]
          },
          {
            "Name": "withdraw_protocol_liquidity",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "price",
                "TypeName": "(Balance, Balance)",
                "TypeId": 326
              },
              {
                "Name": "dest",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 11,
            "Docs": [
              "See [`Pallet::withdraw_protocol_liquidity`]."
            ]
          },
          {
            "Name": "remove_token",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 12,
            "Docs": [
              "See [`Pallet::remove_token`]."
            ]
          }
        ],
        "Path": [
          "pallet_omnipool",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "326": {
        "TypeIds": [
          6,
          6
        ],
        "TypeDef": "Tuple"
      },
      "327": {
        "Variants": [
          {
            "Name": "pause_transaction",
            "TypeFields": [
              {
                "Name": "pallet_name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "function_name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::pause_transaction`]."
            ]
          },
          {
            "Name": "unpause_transaction",
            "TypeFields": [
              {
                "Name": "pallet_name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "function_name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::unpause_transaction`]."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_pause",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "328": {
        "Variants": [
          {
            "Name": "dust_account",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::dust_account`]."
            ]
          },
          {
            "Name": "add_nondustable_account",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::add_nondustable_account`]."
            ]
          },
          {
            "Name": "remove_nondustable_account",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::remove_nondustable_account`]."
            ]
          }
        ],
        "Path": [
          "pallet_duster",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "329": {
        "Variants": null,
        "Path": [
          "pallet_liquidity_mining",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "330": {
        "Variants": [
          {
            "Name": "create_global_farm",
            "TypeFields": [
              {
                "Name": "total_rewards",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "planned_yielding_periods",
                "TypeName": "PeriodOf<T>",
                "TypeId": 4
              },
              {
                "Name": "blocks_per_period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "reward_currency",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "yield_per_period",
                "TypeName": "Perquintill",
                "TypeId": 93
              },
              {
                "Name": "min_deposit",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "lrna_price_adjustment",
                "TypeName": "FixedU128",
                "TypeId": 86
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::create_global_farm`]."
            ]
          },
          {
            "Name": "terminate_global_farm",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::terminate_global_farm`]."
            ]
          },
          {
            "Name": "create_yield_farm",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "multiplier",
                "TypeName": "FarmMultiplier",
                "TypeId": 86
              },
              {
                "Name": "loyalty_curve",
                "TypeName": "Option<LoyaltyCurve>",
                "TypeId": 94
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::create_yield_farm`]."
            ]
          },
          {
            "Name": "update_yield_farm",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "multiplier",
                "TypeName": "FarmMultiplier",
                "TypeId": 86
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::update_yield_farm`]."
            ]
          },
          {
            "Name": "stop_yield_farm",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::stop_yield_farm`]."
            ]
          },
          {
            "Name": "resume_yield_farm",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "multiplier",
                "TypeName": "FarmMultiplier",
                "TypeId": 86
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::resume_yield_farm`]."
            ]
          },
          {
            "Name": "terminate_yield_farm",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::terminate_yield_farm`]."
            ]
          },
          {
            "Name": "deposit_shares",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::deposit_shares`]."
            ]
          },
          {
            "Name": "redeposit_shares",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::redeposit_shares`]."
            ]
          },
          {
            "Name": "claim_rewards",
            "TypeFields": [
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::claim_rewards`]."
            ]
          },
          {
            "Name": "withdraw_shares",
            "TypeFields": [
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              }
            ],
            "Index": 11,
            "Docs": [
              "See [`Pallet::withdraw_shares`]."
            ]
          }
        ],
        "Path": [
          "pallet_omnipool_liquidity_mining",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "331": {
        "Variants": [
          {
            "Name": "place_order",
            "TypeFields": [
              {
                "Name": "asset_in",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "partially_fillable",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::place_order`]."
            ]
          },
          {
            "Name": "partial_fill_order",
            "TypeFields": [
              {
                "Name": "order_id",
                "TypeName": "OrderId",
                "TypeId": 4
              },
              {
                "Name": "amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::partial_fill_order`]."
            ]
          },
          {
            "Name": "fill_order",
            "TypeFields": [
              {
                "Name": "order_id",
                "TypeName": "OrderId",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::fill_order`]."
            ]
          },
          {
            "Name": "cancel_order",
            "TypeFields": [
              {
                "Name": "order_id",
                "TypeName": "OrderId",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::cancel_order`]."
            ]
          }
        ],
        "Path": [
          "pallet_otc",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "332": {
        "Variants": [
          {
            "Name": "set_trade_volume_limit",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "trade_volume_limit",
                "TypeName": "(u32, u32)",
                "TypeId": 98
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set_trade_volume_limit`]."
            ]
          },
          {
            "Name": "set_add_liquidity_limit",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "liquidity_limit",
                "TypeName": "Option<(u32, u32)>",
                "TypeId": 99
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::set_add_liquidity_limit`]."
            ]
          },
          {
            "Name": "set_remove_liquidity_limit",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "liquidity_limit",
                "TypeName": "Option<(u32, u32)>",
                "TypeId": 99
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::set_remove_liquidity_limit`]."
            ]
          }
        ],
        "Path": [
          "pallet_circuit_breaker",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "333": {
        "Variants": [
          {
            "Name": "sell",
            "TypeFields": [
              {
                "Name": "asset_in",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_in",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "min_amount_out",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "route",
                "TypeName": "Vec<Trade<T::AssetId>>",
                "TypeId": 152
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::sell`]."
            ]
          },
          {
            "Name": "buy",
            "TypeFields": [
              {
                "Name": "asset_in",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_out",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "max_amount_in",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "route",
                "TypeName": "Vec<Trade<T::AssetId>>",
                "TypeId": 152
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::buy`]."
            ]
          },
          {
            "Name": "set_route",
            "TypeFields": [
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair<T::AssetId>",
                "TypeId": 334
              },
              {
                "Name": "new_route",
                "TypeName": "Vec<Trade<T::AssetId>>",
                "TypeId": 152
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::set_route`]."
            ]
          },
          {
            "Name": "force_insert_route",
            "TypeFields": [
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair<T::AssetId>",
                "TypeId": 334
              },
              {
                "Name": "new_route",
                "TypeName": "Vec<Trade<T::AssetId>>",
                "TypeId": 152
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::force_insert_route`]."
            ]
          }
        ],
        "Path": [
          "pallet_route_executor",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "334": {
        "TypeFields": [
          {
            "Name": "asset_in",
            "TypeName": "AssetId",
            "TypeId": 4
          },
          {
            "Name": "asset_out",
            "TypeName": "AssetId",
            "TypeId": 4
          }
        ],
        "Path": [
          "hydradx_traits",
          "router",
          "AssetPair"
        ],
        "TypeParams": [
          {
            "Name": "AssetId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "335": {
        "Variants": null,
        "Path": [
          "pallet_dynamic_fees",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "336": {
        "Variants": [
          {
            "Name": "initialize_staking",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "See [`Pallet::initialize_staking`]."
            ]
          },
          {
            "Name": "stake",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::stake`]."
            ]
          },
          {
            "Name": "increase_stake",
            "TypeFields": [
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::increase_stake`]."
            ]
          },
          {
            "Name": "claim",
            "TypeFields": [
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::claim`]."
            ]
          },
          {
            "Name": "unstake",
            "TypeFields": [
              {
                "Name": "position_id",
                "TypeName": "T::PositionItemId",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::unstake`]."
            ]
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "337": {
        "Variants": [
          {
            "Name": "create_pool",
            "TypeFields": [
              {
                "Name": "share_asset",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "assets",
                "TypeName": "Vec<T::AssetId>",
                "TypeId": 101
              },
              {
                "Name": "amplification",
                "TypeName": "u16",
                "TypeId": 53
              },
              {
                "Name": "fee",
                "TypeName": "Permill",
                "TypeId": 88
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::create_pool`]."
            ]
          },
          {
            "Name": "update_pool_fee",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "fee",
                "TypeName": "Permill",
                "TypeId": 88
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::update_pool_fee`]."
            ]
          },
          {
            "Name": "update_amplification",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "final_amplification",
                "TypeName": "u16",
                "TypeId": 53
              },
              {
                "Name": "start_block",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "end_block",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::update_amplification`]."
            ]
          },
          {
            "Name": "add_liquidity",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "assets",
                "TypeName": "Vec<AssetAmount<T::AssetId>>",
                "TypeId": 106
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::add_liquidity`]."
            ]
          },
          {
            "Name": "add_liquidity_shares",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "shares",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "max_asset_amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::add_liquidity_shares`]."
            ]
          },
          {
            "Name": "remove_liquidity_one_asset",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "share_amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "min_amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::remove_liquidity_one_asset`]."
            ]
          },
          {
            "Name": "withdraw_asset_amount",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "max_share_amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::withdraw_asset_amount`]."
            ]
          },
          {
            "Name": "sell",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_in",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_in",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "min_buy_amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::sell`]."
            ]
          },
          {
            "Name": "buy",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_in",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_out",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "max_sell_amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::buy`]."
            ]
          },
          {
            "Name": "set_asset_tradable_state",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "state",
                "TypeName": "Tradability",
                "TypeId": 108
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::set_asset_tradable_state`]."
            ]
          }
        ],
        "Path": [
          "pallet_stableswap",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "338": {
        "Variants": [
          {
            "Name": "issue",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "maturity",
                "TypeName": "Moment",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::issue`]."
            ]
          },
          {
            "Name": "redeem",
            "TypeFields": [
              {
                "Name": "bond_id",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::redeem`]."
            ]
          }
        ],
        "Path": [
          "pallet_bonds",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "339": {
        "Variants": [
          {
            "Name": "create_pool",
            "TypeFields": [
              {
                "Name": "pool_owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "asset_a",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_a_amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "asset_b",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_b_amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "initial_weight",
                "TypeName": "LBPWeight",
                "TypeId": 4
              },
              {
                "Name": "final_weight",
                "TypeName": "LBPWeight",
                "TypeId": 4
              },
              {
                "Name": "weight_curve",
                "TypeName": "WeightCurveType",
                "TypeId": 113
              },
              {
                "Name": "fee",
                "TypeName": "(u32, u32)",
                "TypeId": 98
              },
              {
                "Name": "fee_collector",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "repay_target",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::create_pool`]."
            ]
          },
          {
            "Name": "update_pool_data",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId<T>",
                "TypeId": 0
              },
              {
                "Name": "pool_owner",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 62
              },
              {
                "Name": "start",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 112
              },
              {
                "Name": "end",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 112
              },
              {
                "Name": "initial_weight",
                "TypeName": "Option<LBPWeight>",
                "TypeId": 112
              },
              {
                "Name": "final_weight",
                "TypeName": "Option<LBPWeight>",
                "TypeId": 112
              },
              {
                "Name": "fee",
                "TypeName": "Option<(u32, u32)>",
                "TypeId": 99
              },
              {
                "Name": "fee_collector",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 62
              },
              {
                "Name": "repay_target",
                "TypeName": "Option<Balance>",
                "TypeId": 59
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::update_pool_data`]."
            ]
          },
          {
            "Name": "add_liquidity",
            "TypeFields": [
              {
                "Name": "amount_a",
                "TypeName": "(AssetId, BalanceOf<T>)",
                "TypeId": 340
              },
              {
                "Name": "amount_b",
                "TypeName": "(AssetId, BalanceOf<T>)",
                "TypeId": 340
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::add_liquidity`]."
            ]
          },
          {
            "Name": "remove_liquidity",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId<T>",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::remove_liquidity`]."
            ]
          },
          {
            "Name": "sell",
            "TypeFields": [
              {
                "Name": "asset_in",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "max_limit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::sell`]."
            ]
          },
          {
            "Name": "buy",
            "TypeFields": [
              {
                "Name": "asset_out",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_in",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "max_limit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::buy`]."
            ]
          }
        ],
        "Path": [
          "pallet_lbp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "340": {
        "TypeIds": [
          4,
          6
        ],
        "TypeDef": "Tuple"
      },
      "341": {
        "Variants": [
          {
            "Name": "create_pool",
            "TypeFields": [
              {
                "Name": "asset_a",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_a",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "asset_b",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_b",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::create_pool`]."
            ]
          },
          {
            "Name": "add_liquidity",
            "TypeFields": [
              {
                "Name": "asset_a",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_b",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount_a",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "amount_b_max_limit",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::add_liquidity`]."
            ]
          },
          {
            "Name": "remove_liquidity",
            "TypeFields": [
              {
                "Name": "asset_a",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_b",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "liquidity_amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::remove_liquidity`]."
            ]
          },
          {
            "Name": "sell",
            "TypeFields": [
              {
                "Name": "asset_in",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_out",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "max_limit",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "discount",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::sell`]."
            ]
          },
          {
            "Name": "buy",
            "TypeFields": [
              {
                "Name": "asset_out",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "asset_in",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "max_limit",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "discount",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::buy`]."
            ]
          }
        ],
        "Path": [
          "pallet_xyk",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "342": {
        "Variants": [
          {
            "Name": "register_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "ReferralCode<T::CodeLength>",
                "TypeId": 116
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::register_code`]."
            ]
          },
          {
            "Name": "link_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "ReferralCode<T::CodeLength>",
                "TypeId": 116
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::link_code`]."
            ]
          },
          {
            "Name": "convert",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::convert`]."
            ]
          },
          {
            "Name": "claim_rewards",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "See [`Pallet::claim_rewards`]."
            ]
          },
          {
            "Name": "set_reward_percentage",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "level",
                "TypeName": "Level",
                "TypeId": 118
              },
              {
                "Name": "rewards",
                "TypeName": "FeeDistribution",
                "TypeId": 119
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::set_reward_percentage`]."
            ]
          }
        ],
        "Path": [
          "pallet_referrals",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "343": {
        "Variants": null,
        "Path": [
          "pallet_xcm_rate_limiter",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "344": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 79
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::transfer`]."
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::transfer_all`]."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 79
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::transfer_keep_alive`]."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 0
              },
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 79
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::force_transfer`]."
            ]
          },
          {
            "Name": "set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 79
              },
              {
                "Name": "new_reserved",
                "TypeName": "T::Balance",
                "TypeId": 79
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::set_balance`]."
            ]
          }
        ],
        "Path": [
          "orml_tokens",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "345": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 79
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::transfer`]."
            ]
          },
          {
            "Name": "transfer_native_currency",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 79
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::transfer_native_currency`]."
            ]
          },
          {
            "Name": "update_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 0
              },
              {
                "Name": "currency_id",
                "TypeName": "CurrencyIdOf<T>",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "AmountOf<T>",
                "TypeId": 124
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::update_balance`]."
            ]
          }
        ],
        "Path": [
          "pallet_currencies",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "346": {
        "Variants": [
          {
            "Name": "claim",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "See [`Pallet::claim`]."
            ]
          },
          {
            "Name": "vested_transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 0
              },
              {
                "Name": "schedule",
                "TypeName": "VestingScheduleOf<T>",
                "TypeId": 126
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::vested_transfer`]."
            ]
          },
          {
            "Name": "update_vesting_schedules",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 0
              },
              {
                "Name": "vesting_schedules",
                "TypeName": "Vec<VestingScheduleOf<T>>",
                "TypeId": 347
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::update_vesting_schedules`]."
            ]
          },
          {
            "Name": "claim_for",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::claim_for`]."
            ]
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "347": {
        "TypeId": 126,
        "TypeDef": "Sequence"
      },
      "348": {
        "Variants": [
          {
            "Name": "withdraw",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "H160",
                "TypeId": 129
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::withdraw`]."
            ]
          },
          {
            "Name": "call",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "H160",
                "TypeId": 129
              },
              {
                "Name": "target",
                "TypeName": "H160",
                "TypeId": 129
              },
              {
                "Name": "input",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "value",
                "TypeName": "U256",
                "TypeId": 349
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "max_fee_per_gas",
                "TypeName": "U256",
                "TypeId": 349
              },
              {
                "Name": "max_priority_fee_per_gas",
                "TypeName": "Option<U256>",
                "TypeId": 351
              },
              {
                "Name": "nonce",
                "TypeName": "Option<U256>",
                "TypeId": 351
              },
              {
                "Name": "access_list",
                "TypeName": "Vec<(H160, Vec<H256>)>",
                "TypeId": 352
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::call`]."
            ]
          },
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "H160",
                "TypeId": 129
              },
              {
                "Name": "init",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "value",
                "TypeName": "U256",
                "TypeId": 349
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "max_fee_per_gas",
                "TypeName": "U256",
                "TypeId": 349
              },
              {
                "Name": "max_priority_fee_per_gas",
                "TypeName": "Option<U256>",
                "TypeId": 351
              },
              {
                "Name": "nonce",
                "TypeName": "Option<U256>",
                "TypeId": 351
              },
              {
                "Name": "access_list",
                "TypeName": "Vec<(H160, Vec<H256>)>",
                "TypeId": 352
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::create`]."
            ]
          },
          {
            "Name": "create2",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "H160",
                "TypeId": 129
              },
              {
                "Name": "init",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "salt",
                "TypeName": "H256",
                "TypeId": 12
              },
              {
                "Name": "value",
                "TypeName": "U256",
                "TypeId": 349
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "max_fee_per_gas",
                "TypeName": "U256",
                "TypeId": 349
              },
              {
                "Name": "max_priority_fee_per_gas",
                "TypeName": "Option<U256>",
                "TypeId": 351
              },
              {
                "Name": "nonce",
                "TypeName": "Option<U256>",
                "TypeId": 351
              },
              {
                "Name": "access_list",
                "TypeName": "Vec<(H160, Vec<H256>)>",
                "TypeId": 352
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::create2`]."
            ]
          }
        ],
        "Path": [
          "pallet_evm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "349": {
        "TypeFields": [
          {
            "TypeName": "[u64; 4]",
            "TypeId": 350
          }
        ],
        "Path": [
          "primitive_types",
          "U256"
        ],
        "TypeDef": "Composite"
      },
      "350": {
        "Length": 4,
        "TypeId": 11,
        "TypeDef": "Array"
      },
      "351": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 349
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 349
          }
        ],
        "TypeDef": "Variant"
      },
      "352": {
        "TypeId": 353,
        "TypeDef": "Sequence"
      },
      "353": {
        "TypeIds": [
          129,
          130
        ],
        "TypeDef": "Tuple"
      },
      "354": {
        "Variants": [
          {
            "Name": "transact",
            "TypeFields": [
              {
                "Name": "transaction",
                "TypeName": "Transaction",
                "TypeId": 355
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::transact`]."
            ]
          }
        ],
        "Path": [
          "pallet_ethereum",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "355": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "TypeName": "LegacyTransaction",
                "TypeId": 356
              }
            ],
            "Index": 0
          },
          {
            "Name": "EIP2930",
            "TypeFields": [
              {
                "TypeName": "EIP2930Transaction",
                "TypeId": 360
              }
            ],
            "Index": 1
          },
          {
            "Name": "EIP1559",
            "TypeFields": [
              {
                "TypeName": "EIP1559Transaction",
                "TypeId": 363
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionV2"
        ],
        "TypeDef": "Variant"
      },
      "356": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "gas_price",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "action",
            "TypeName": "TransactionAction",
            "TypeId": 357
          },
          {
            "Name": "value",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "input",
            "TypeName": "Bytes",
            "TypeId": 13
          },
          {
            "Name": "signature",
            "TypeName": "TransactionSignature",
            "TypeId": 358
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "LegacyTransaction"
        ],
        "TypeDef": "Composite"
      },
      "357": {
        "Variants": [
          {
            "Name": "Call",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 129
              }
            ],
            "Index": 0
          },
          {
            "Name": "Create",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionAction"
        ],
        "TypeDef": "Variant"
      },
      "358": {
        "TypeFields": [
          {
            "Name": "v",
            "TypeName": "TransactionRecoveryId",
            "TypeId": 359
          },
          {
            "Name": "r",
            "TypeName": "H256",
            "TypeId": 12
          },
          {
            "Name": "s",
            "TypeName": "H256",
            "TypeId": 12
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionSignature"
        ],
        "TypeDef": "Composite"
      },
      "359": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "TransactionRecoveryId"
        ],
        "TypeDef": "Composite"
      },
      "360": {
        "TypeFields": [
          {
            "Name": "chain_id",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "nonce",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "gas_price",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "action",
            "TypeName": "TransactionAction",
            "TypeId": 357
          },
          {
            "Name": "value",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "input",
            "TypeName": "Bytes",
            "TypeId": 13
          },
          {
            "Name": "access_list",
            "TypeName": "AccessList",
            "TypeId": 361
          },
          {
            "Name": "odd_y_parity",
            "TypeName": "bool",
            "TypeId": 48
          },
          {
            "Name": "r",
            "TypeName": "H256",
            "TypeId": 12
          },
          {
            "Name": "s",
            "TypeName": "H256",
            "TypeId": 12
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "EIP2930Transaction"
        ],
        "TypeDef": "Composite"
      },
      "361": {
        "TypeId": 362,
        "TypeDef": "Sequence"
      },
      "362": {
        "TypeFields": [
          {
            "Name": "address",
            "TypeName": "Address",
            "TypeId": 129
          },
          {
            "Name": "storage_keys",
            "TypeName": "Vec<H256>",
            "TypeId": 130
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "AccessListItem"
        ],
        "TypeDef": "Composite"
      },
      "363": {
        "TypeFields": [
          {
            "Name": "chain_id",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "nonce",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "max_priority_fee_per_gas",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "max_fee_per_gas",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "action",
            "TypeName": "TransactionAction",
            "TypeId": 357
          },
          {
            "Name": "value",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "input",
            "TypeName": "Bytes",
            "TypeId": 13
          },
          {
            "Name": "access_list",
            "TypeName": "AccessList",
            "TypeId": 361
          },
          {
            "Name": "odd_y_parity",
            "TypeName": "bool",
            "TypeId": 48
          },
          {
            "Name": "r",
            "TypeName": "H256",
            "TypeId": 12
          },
          {
            "Name": "s",
            "TypeName": "H256",
            "TypeId": 12
          }
        ],
        "Path": [
          "ethereum",
          "transaction",
          "EIP1559Transaction"
        ],
        "TypeDef": "Composite"
      },
      "364": {
        "Variants": [
          {
            "Name": "bind_evm_address",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "See [`Pallet::bind_evm_address`]."
            ]
          },
          {
            "Name": "add_contract_deployer",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "EvmAddress",
                "TypeId": 129
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::add_contract_deployer`]."
            ]
          },
          {
            "Name": "remove_contract_deployer",
            "TypeFields": [
              {
                "Name": "address",
                "TypeName": "EvmAddress",
                "TypeId": 129
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::remove_contract_deployer`]."
            ]
          },
          {
            "Name": "renounce_contract_deployer",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "See [`Pallet::renounce_contract_deployer`]."
            ]
          }
        ],
        "Path": [
          "pallet_evm_accounts",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "365": {
        "Variants": [
          {
            "Name": "create_global_farm",
            "TypeFields": [
              {
                "Name": "total_rewards",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "planned_yielding_periods",
                "TypeName": "PeriodOf<T>",
                "TypeId": 4
              },
              {
                "Name": "blocks_per_period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "incentivized_asset",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "reward_currency",
                "TypeName": "AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "yield_per_period",
                "TypeName": "Perquintill",
                "TypeId": 93
              },
              {
                "Name": "min_deposit",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "price_adjustment",
                "TypeName": "FixedU128",
                "TypeId": 86
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::create_global_farm`]."
            ]
          },
          {
            "Name": "update_global_farm",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "price_adjustment",
                "TypeName": "FixedU128",
                "TypeId": 86
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::update_global_farm`]."
            ]
          },
          {
            "Name": "terminate_global_farm",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::terminate_global_farm`]."
            ]
          },
          {
            "Name": "create_yield_farm",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair",
                "TypeId": 142
              },
              {
                "Name": "multiplier",
                "TypeName": "FarmMultiplier",
                "TypeId": 86
              },
              {
                "Name": "loyalty_curve",
                "TypeName": "Option<LoyaltyCurve>",
                "TypeId": 94
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::create_yield_farm`]."
            ]
          },
          {
            "Name": "update_yield_farm",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair",
                "TypeId": 142
              },
              {
                "Name": "multiplier",
                "TypeName": "FarmMultiplier",
                "TypeId": 86
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::update_yield_farm`]."
            ]
          },
          {
            "Name": "stop_yield_farm",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair",
                "TypeId": 142
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::stop_yield_farm`]."
            ]
          },
          {
            "Name": "resume_yield_farm",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair",
                "TypeId": 142
              },
              {
                "Name": "multiplier",
                "TypeName": "FarmMultiplier",
                "TypeId": 86
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::resume_yield_farm`]."
            ]
          },
          {
            "Name": "terminate_yield_farm",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair",
                "TypeId": 142
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::terminate_yield_farm`]."
            ]
          },
          {
            "Name": "deposit_shares",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair",
                "TypeId": 142
              },
              {
                "Name": "shares_amount",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::deposit_shares`]."
            ]
          },
          {
            "Name": "redeposit_shares",
            "TypeFields": [
              {
                "Name": "global_farm_id",
                "TypeName": "GlobalFarmId",
                "TypeId": 4
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair",
                "TypeId": 142
              },
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::redeposit_shares`]."
            ]
          },
          {
            "Name": "claim_rewards",
            "TypeFields": [
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::claim_rewards`]."
            ]
          },
          {
            "Name": "withdraw_shares",
            "TypeFields": [
              {
                "Name": "deposit_id",
                "TypeName": "DepositId",
                "TypeId": 6
              },
              {
                "Name": "yield_farm_id",
                "TypeName": "YieldFarmId",
                "TypeId": 4
              },
              {
                "Name": "asset_pair",
                "TypeName": "AssetPair",
                "TypeId": 142
              }
            ],
            "Index": 11,
            "Docs": [
              "See [`Pallet::withdraw_shares`]."
            ]
          }
        ],
        "Path": [
          "pallet_xyk_liquidity_mining",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "366": {
        "Variants": null,
        "Path": [
          "pallet_liquidity_mining",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "367": {
        "Variants": [
          {
            "Name": "set_validation_data",
            "TypeFields": [
              {
                "Name": "data",
                "TypeName": "ParachainInherentData",
                "TypeId": 368
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set_validation_data`]."
            ]
          },
          {
            "Name": "sudo_send_upward_message",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "UpwardMessage",
                "TypeId": 13
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::sudo_send_upward_message`]."
            ]
          },
          {
            "Name": "authorize_upgrade",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "check_version",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::authorize_upgrade`]."
            ]
          },
          {
            "Name": "enact_authorized_upgrade",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::enact_authorized_upgrade`]."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "368": {
        "TypeFields": [
          {
            "Name": "validation_data",
            "TypeName": "PersistedValidationData",
            "TypeId": 369
          },
          {
            "Name": "relay_chain_state",
            "TypeName": "sp_trie::StorageProof",
            "TypeId": 371
          },
          {
            "Name": "downward_messages",
            "TypeName": "Vec<InboundDownwardMessage>",
            "TypeId": 373
          },
          {
            "Name": "horizontal_messages",
            "TypeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
            "TypeId": 375
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "ParachainInherentData"
        ],
        "TypeDef": "Composite"
      },
      "369": {
        "TypeFields": [
          {
            "Name": "parent_head",
            "TypeName": "HeadData",
            "TypeId": 370
          },
          {
            "Name": "relay_parent_number",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "relay_parent_storage_root",
            "TypeName": "H",
            "TypeId": 12
          },
          {
            "Name": "max_pov_size",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v5",
          "PersistedValidationData"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "370": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 13
          }
        ],
        "Path": [
          "polkadot_parachain_primitives",
          "primitives",
          "HeadData"
        ],
        "TypeDef": "Composite"
      },
      "371": {
        "TypeFields": [
          {
            "Name": "trie_nodes",
            "TypeName": "BTreeSet<Vec<u8>>",
            "TypeId": 372
          }
        ],
        "Path": [
          "sp_trie",
          "storage_proof",
          "StorageProof"
        ],
        "TypeDef": "Composite"
      },
      "372": {
        "TypeFields": [
          {
            "TypeId": 218
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 13
          }
        ],
        "TypeDef": "Composite"
      },
      "373": {
        "TypeId": 374,
        "TypeDef": "Sequence"
      },
      "374": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "msg",
            "TypeName": "DownwardMessage",
            "TypeId": 13
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundDownwardMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "375": {
        "TypeFields": [
          {
            "TypeId": 378
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 200
          },
          {
            "Name": "V",
            "TypeId": 376
          }
        ],
        "TypeDef": "Composite"
      },
      "376": {
        "TypeId": 377,
        "TypeDef": "Sequence"
      },
      "377": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 13
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "378": {
        "TypeId": 379,
        "TypeDef": "Sequence"
      },
      "379": {
        "TypeIds": [
          200,
          376
        ],
        "TypeDef": "Tuple"
      },
      "380": {
        "Variants": null,
        "Path": [
          "parachain_info",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "381": {
        "Variants": [
          {
            "Name": "schedule",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 99
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 253
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::schedule`]."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::cancel`]."
            ]
          },
          {
            "Name": "schedule_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 99
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 253
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::schedule_named`]."
            ]
          },
          {
            "Name": "cancel_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::cancel_named`]."
            ]
          },
          {
            "Name": "schedule_after",
            "TypeFields": [
              {
                "Name": "after",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 99
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 253
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::schedule_after`]."
            ]
          },
          {
            "Name": "schedule_named_after",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "after",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 99
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 253
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::schedule_named_after`]."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "382": {
        "Variants": [
          {
            "Name": "schedule",
            "TypeFields": [
              {
                "Name": "schedule",
                "TypeName": "Schedule<T::AccountId, T::AssetId, BlockNumberFor<T>>",
                "TypeId": 383
              },
              {
                "Name": "start_execution_block",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 112
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::schedule`]."
            ]
          },
          {
            "Name": "terminate",
            "TypeFields": [
              {
                "Name": "schedule_id",
                "TypeName": "ScheduleId",
                "TypeId": 4
              },
              {
                "Name": "next_execution_block",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 112
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::terminate`]."
            ]
          }
        ],
        "Path": [
          "pallet_dca",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "383": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "total_amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "max_retries",
            "TypeName": "Option<u8>",
            "TypeId": 70
          },
          {
            "Name": "stability_threshold",
            "TypeName": "Option<Permill>",
            "TypeId": 384
          },
          {
            "Name": "slippage",
            "TypeName": "Option<Permill>",
            "TypeId": 384
          },
          {
            "Name": "order",
            "TypeName": "Order<AssetId>",
            "TypeId": 148
          }
        ],
        "Path": [
          "pallet_dca",
          "types",
          "Schedule"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "AssetId",
            "TypeId": 4
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "384": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 88
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 88
          }
        ],
        "TypeDef": "Variant"
      },
      "385": {
        "Variants": [
          {
            "Name": "send",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 386
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::send`]."
            ]
          },
          {
            "Name": "teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 183
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::teleport_assets`]."
            ]
          },
          {
            "Name": "reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 183
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::reserve_transfer_assets`]."
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>",
                "TypeId": 398
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::execute`]."
            ]
          },
          {
            "Name": "force_xcm_version",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<MultiLocation>",
                "TypeId": 72
              },
              {
                "Name": "version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::force_xcm_version`]."
            ]
          },
          {
            "Name": "force_default_xcm_version",
            "TypeFields": [
              {
                "Name": "maybe_xcm_version",
                "TypeName": "Option<XcmVersion>",
                "TypeId": 112
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::force_default_xcm_version`]."
            ]
          },
          {
            "Name": "force_subscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::force_subscribe_version_notify`]."
            ]
          },
          {
            "Name": "force_unsubscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::force_unsubscribe_version_notify`]."
            ]
          },
          {
            "Name": "limited_reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 183
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::limited_reserve_transfer_assets`]."
            ]
          },
          {
            "Name": "limited_teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 183
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::limited_teleport_assets`]."
            ]
          },
          {
            "Name": "force_suspension",
            "TypeFields": [
              {
                "Name": "suspended",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::force_suspension`]."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "386": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 387
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 156
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "387": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 388
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "388": {
        "TypeId": 389,
        "TypeDef": "Sequence"
      },
      "389": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 390
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 184
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 184
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 387
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 176
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 177
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 189
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 394
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 394
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 387
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 394
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 394
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 387
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 394
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 387
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 394
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 186
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 397
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 387
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 387
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 184
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "390": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 391
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "391": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 392
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 392
          }
        ],
        "TypeDef": "Variant"
      },
      "392": {
        "TypeIds": [
          4,
          393
        ],
        "TypeDef": "Tuple"
      },
      "393": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "MultiLocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "MultiLocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 21
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 11
              }
            ],
            "Index": 23
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 25
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "394": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 395
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "395": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 187
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 396
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "396": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "397": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "398": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 399
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 403
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "399": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 400
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "400": {
        "TypeId": 401,
        "TypeDef": "Sequence"
      },
      "401": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 390
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 184
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 184
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 387
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 176
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 402
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 189
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 394
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 394
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 387
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 394
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 184
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 394
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 387
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 394
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 387
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 188
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 394
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 186
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 397
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 399
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 399
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 184
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 188
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "staging_xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "402": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 13
          }
        ],
        "Path": [
          "staging_xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "403": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 404
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "404": {
        "TypeId": 405,
        "TypeDef": "Sequence"
      },
      "405": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 159
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 159
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 159
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 166
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 159
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 159
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 156
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 176
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 9
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 402
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 73
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 156
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 159
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 156
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 72
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 156
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 179
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 161
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 403
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 403
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 159
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 10
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 10
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 159
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 159
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 167
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 173
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 75
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 75
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 178
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 74
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 77
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 73
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 156
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 161
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 161
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 161
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 161
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 175
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "406": {
        "Variants": null,
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "407": {
        "Variants": [
          {
            "Name": "service_overweight",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "OverweightIndex",
                "TypeId": 11
              },
              {
                "Name": "weight_limit",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::service_overweight`]."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "408": {
        "Variants": [
          {
            "Name": "send_as_sovereign",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 386
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::send_as_sovereign`]."
            ]
          }
        ],
        "Path": [
          "orml_xcm",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "409": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::transfer`]."
            ]
          },
          {
            "Name": "transfer_multiasset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Box<VersionedMultiAsset>",
                "TypeId": 410
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::transfer_multiasset`]."
            ]
          },
          {
            "Name": "transfer_with_fee",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "fee",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::transfer_with_fee`]."
            ]
          },
          {
            "Name": "transfer_multiasset_with_fee",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Box<VersionedMultiAsset>",
                "TypeId": 410
              },
              {
                "Name": "fee",
                "TypeName": "Box<VersionedMultiAsset>",
                "TypeId": 410
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::transfer_multiasset_with_fee`]."
            ]
          },
          {
            "Name": "transfer_multicurrencies",
            "TypeFields": [
              {
                "Name": "currencies",
                "TypeName": "Vec<(T::CurrencyId, T::Balance)>",
                "TypeId": 411
              },
              {
                "Name": "fee_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::transfer_multicurrencies`]."
            ]
          },
          {
            "Name": "transfer_multiassets",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Box<VersionedMultiAssets>",
                "TypeId": 183
              },
              {
                "Name": "fee_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedMultiLocation>",
                "TypeId": 197
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 182
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::transfer_multiassets`]."
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "410": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiAsset",
                "TypeId": 186
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAsset",
                "TypeId": 161
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "VersionedMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "411": {
        "TypeId": 340,
        "TypeDef": "Sequence"
      },
      "412": {
        "Variants": [
          {
            "Name": "set_invulnerables",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 207
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set_invulnerables`]."
            ]
          },
          {
            "Name": "set_desired_candidates",
            "TypeFields": [
              {
                "Name": "max",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::set_desired_candidates`]."
            ]
          },
          {
            "Name": "set_candidacy_bond",
            "TypeFields": [
              {
                "Name": "bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::set_candidacy_bond`]."
            ]
          },
          {
            "Name": "register_as_candidate",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "See [`Pallet::register_as_candidate`]."
            ]
          },
          {
            "Name": "leave_intent",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "See [`Pallet::leave_intent`]."
            ]
          },
          {
            "Name": "add_invulnerable",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::add_invulnerable`]."
            ]
          },
          {
            "Name": "remove_invulnerable",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::remove_invulnerable`]."
            ]
          }
        ],
        "Path": [
          "pallet_collator_selection",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "413": {
        "Variants": [
          {
            "Name": "set_keys",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "T::Keys",
                "TypeId": 414
              },
              {
                "Name": "proof",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set_keys`]."
            ]
          },
          {
            "Name": "purge_keys",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "See [`Pallet::purge_keys`]."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "414": {
        "TypeFields": [
          {
            "Name": "aura",
            "TypeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 415
          }
        ],
        "Path": [
          "hydradx_runtime",
          "opaque",
          "SessionKeys"
        ],
        "TypeDef": "Composite"
      },
      "415": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 416
          }
        ],
        "Path": [
          "sp_consensus_aura",
          "sr25519",
          "app_sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "416": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "417": {
        "Variants": null,
        "Path": [
          "pallet_relaychain_info",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "418": {
        "Variants": [
          {
            "Name": "add_oracle",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "Source",
                "TypeId": 122
              },
              {
                "Name": "assets",
                "TypeName": "(AssetId, AssetId)",
                "TypeId": 98
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::add_oracle`]."
            ]
          },
          {
            "Name": "remove_oracle",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "Source",
                "TypeId": 122
              },
              {
                "Name": "assets",
                "TypeName": "(AssetId, AssetId)",
                "TypeId": 98
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::remove_oracle`]."
            ]
          }
        ],
        "Path": [
          "pallet_ema_oracle",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "419": {
        "Variants": [
          {
            "Name": "set_currency",
            "TypeFields": [
              {
                "Name": "currency",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set_currency`]."
            ]
          },
          {
            "Name": "add_currency",
            "TypeFields": [
              {
                "Name": "currency",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 4
              },
              {
                "Name": "price",
                "TypeName": "Price",
                "TypeId": 86
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::add_currency`]."
            ]
          },
          {
            "Name": "remove_currency",
            "TypeFields": [
              {
                "Name": "currency",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::remove_currency`]."
            ]
          },
          {
            "Name": "reset_payment_currency",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::reset_payment_currency`]."
            ]
          },
          {
            "Name": "dispatch_permit",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "H160",
                "TypeId": 129
              },
              {
                "Name": "to",
                "TypeName": "H160",
                "TypeId": 129
              },
              {
                "Name": "value",
                "TypeName": "U256",
                "TypeId": 349
              },
              {
                "Name": "data",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "deadline",
                "TypeName": "U256",
                "TypeId": 349
              },
              {
                "Name": "v",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "r",
                "TypeName": "H256",
                "TypeId": 12
              },
              {
                "Name": "s",
                "TypeName": "H256",
                "TypeId": 12
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::dispatch_permit`]."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_multi_payment",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "420": {
        "Variants": [
          {
            "Name": "system",
            "TypeFields": [
              {
                "TypeName": "frame_system::Origin<Runtime>",
                "TypeId": 421
              }
            ],
            "Index": 1
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                "TypeId": 422
              }
            ],
            "Index": 23
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                "TypeId": 423
              }
            ],
            "Index": 25
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "TypeName": "pallet_ethereum::Origin",
                "TypeId": 424
              }
            ],
            "Index": 92
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Origin",
                "TypeId": 425
              }
            ],
            "Index": 107
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Origin",
                "TypeId": 426
              }
            ],
            "Index": 109
          },
          {
            "Name": "Void",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void",
                "TypeId": 427
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "hydradx_runtime",
          "OriginCaller"
        ],
        "TypeDef": "Variant"
      },
      "421": {
        "Variants": [
          {
            "Name": "Root",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "422": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "423": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "424": {
        "Variants": [
          {
            "Name": "EthereumTransaction",
            "TypeFields": [
              {
                "TypeName": "H160",
                "TypeId": 129
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "pallet_ethereum",
          "RawOrigin"
        ],
        "TypeDef": "Variant"
      },
      "425": {
        "Variants": [
          {
            "Name": "Xcm",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 0
          },
          {
            "Name": "Response",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 72
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "426": {
        "Variants": [
          {
            "Name": "Relay",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SiblingParachain",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 200
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "427": {
        "Variants": null,
        "Path": [
          "sp_core",
          "Void"
        ],
        "TypeDef": "Variant"
      },
      "428": {
        "Variants": [
          {
            "Name": "TooManyCalls",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many calls batched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "429": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "(AccountId, Balance)",
                "TypeId": 46
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "Option<(AccountId, Balance)>",
                "TypeId": 430
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "len",
                "TypeName": "Option<u32>",
                "TypeId": 112
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "RequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "430": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 46
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 46
          }
        ],
        "TypeDef": "Variant"
      },
      "431": {
        "TypeIds": [
          12,
          4
        ],
        "TypeDef": "Tuple"
      },
      "432": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "433": {
        "Variants": [
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Preimage is too large to store on-chain."
            ]
          },
          {
            "Name": "AlreadyNoted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Preimage has already been noted on-chain."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The user is not authorized to perform this action."
            ]
          },
          {
            "Name": "NotNoted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The preimage cannot be removed since it has not yet been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A preimage may not be removed when there are outstanding requests."
            ]
          },
          {
            "Name": "NotRequested",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The preimage request cannot be removed since no outstanding requests exist."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "434": {
        "TypeFields": [
          {
            "Name": "judgements",
            "TypeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
            "TypeId": 435
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "info",
            "TypeName": "IdentityInfo<MaxAdditionalFields>",
            "TypeId": 256
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Registration"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "MaxJudgements"
          },
          {
            "Name": "MaxAdditionalFields"
          }
        ],
        "TypeDef": "Composite"
      },
      "435": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 437
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 436
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "436": {
        "TypeIds": [
          4,
          294
        ],
        "TypeDef": "Tuple"
      },
      "437": {
        "TypeId": 436,
        "TypeDef": "Sequence"
      },
      "438": {
        "TypeIds": [
          6,
          439
        ],
        "TypeDef": "Tuple"
      },
      "439": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 207
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "440": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 443
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 441
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "441": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 442
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 442
          }
        ],
        "TypeDef": "Variant"
      },
      "442": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fields",
            "TypeName": "IdentityFields",
            "TypeId": 292
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "RegistrarInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "443": {
        "TypeId": 441,
        "TypeDef": "Sequence"
      },
      "444": {
        "Variants": [
          {
            "Name": "TooManySubAccounts",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many subs-accounts."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account isn't found."
            ]
          },
          {
            "Name": "NotNamed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Account isn't named."
            ]
          },
          {
            "Name": "EmptyIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Empty index."
            ]
          },
          {
            "Name": "FeeChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Fee is changed."
            ]
          },
          {
            "Name": "NoIdentity",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No identity found."
            ]
          },
          {
            "Name": "StickyJudgement",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Sticky judgement."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Judgement given."
            ]
          },
          {
            "Name": "InvalidJudgement",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Invalid judgement."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The index is invalid."
            ]
          },
          {
            "Name": "InvalidTarget",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The target is invalid."
            ]
          },
          {
            "Name": "TooManyFields",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Too many additional fields."
            ]
          },
          {
            "Name": "TooManyRegistrars",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Maximum amount of registrars reached. Cannot add any more."
            ]
          },
          {
            "Name": "AlreadyClaimed",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Account ID is already named."
            ]
          },
          {
            "Name": "NotSub",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Sender is not a sub-account."
            ]
          },
          {
            "Name": "NotOwned",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Sub-account isn't owned by sender."
            ]
          },
          {
            "Name": "JudgementForDifferentIdentity",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The provided judgement was for a different identity."
            ]
          },
          {
            "Name": "JudgementPaymentFailed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Error that occurs when there is an issue paying for judgement."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "445": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 447
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 446
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "446": {
        "TypeIds": [
          4,
          296,
          0
        ],
        "TypeDef": "Tuple"
      },
      "447": {
        "TypeId": 446,
        "TypeDef": "Sequence"
      },
      "448": {
        "TypeIds": [
          449,
          6
        ],
        "TypeDef": "Tuple"
      },
      "449": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 207
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "450": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<BlockNumber, Proposal, Balance>",
                "TypeId": 451
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finished",
            "TypeFields": [
              {
                "Name": "approved",
                "TypeName": "bool",
                "TypeId": 48
              },
              {
                "Name": "end",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 296
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "451": {
        "TypeFields": [
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "proposal",
            "TypeName": "Proposal",
            "TypeId": 296
          },
          {
            "Name": "threshold",
            "TypeName": "VoteThreshold",
            "TypeId": 40
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "tally",
            "TypeName": "Tally<Balance>",
            "TypeId": 452
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 296
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "452": {
        "TypeFields": [
          {
            "Name": "ayes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "nays",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "turnout",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "453": {
        "Variants": [
          {
            "Name": "Direct",
            "TypeFields": [
              {
                "Name": "votes",
                "TypeName": "BoundedVec<(ReferendumIndex, AccountVote<Balance>), MaxVotes>",
                "TypeId": 454
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 457
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 458
              }
            ],
            "Index": 0
          },
          {
            "Name": "Delegating",
            "TypeFields": [
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "target",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 298
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 457
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 458
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Voting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Variant"
      },
      "454": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 456
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 455
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "455": {
        "TypeIds": [
          4,
          41
        ],
        "TypeDef": "Tuple"
      },
      "456": {
        "TypeId": 455,
        "TypeDef": "Sequence"
      },
      "457": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "capital",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Delegations"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "458": {
        "TypeFields": [
          {
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "PriorLock"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "459": {
        "TypeIds": [
          296,
          40
        ],
        "TypeDef": "Tuple"
      },
      "460": {
        "TypeIds": [
          4,
          449
        ],
        "TypeDef": "Tuple"
      },
      "461": {
        "Variants": [
          {
            "Name": "ValueLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Value too low"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proposal does not exist"
            ]
          },
          {
            "Name": "AlreadyCanceled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Cannot cancel the same proposal twice"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Proposal already made"
            ]
          },
          {
            "Name": "ProposalBlacklisted",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal still blacklisted"
            ]
          },
          {
            "Name": "NotSimpleMajority",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Next external proposal not simple majority"
            ]
          },
          {
            "Name": "InvalidHash",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid hash"
            ]
          },
          {
            "Name": "NoProposal",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No external proposal"
            ]
          },
          {
            "Name": "AlreadyVetoed",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Identity may not veto a proposal twice"
            ]
          },
          {
            "Name": "ReferendumInvalid",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Vote given for invalid referendum"
            ]
          },
          {
            "Name": "NoneWaiting",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No proposals waiting"
            ]
          },
          {
            "Name": "NotVoter",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The given account did not vote on the referendum."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "Name": "AlreadyDelegating",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The account is already delegating."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "Name": "NotDelegating",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The account is not currently delegating."
            ]
          },
          {
            "Name": "VotesExist",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed, either through `unvote` or `reap_vote`."
            ]
          },
          {
            "Name": "InstantNotAllowed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The instant referendum origin is currently disallowed."
            ]
          },
          {
            "Name": "Nonsense",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "Name": "WrongUpperBound",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Invalid upper bound."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Maximum number of votes reached."
            ]
          },
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Maximum number of items reached."
            ]
          },
          {
            "Name": "VotingPeriodLow",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Voting period too low"
            ]
          },
          {
            "Name": "PreimageNotExist",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The preimage does not exist."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "462": {
        "TypeId": 463,
        "TypeDef": "Sequence"
      },
      "463": {
        "TypeFields": [
          {
            "Name": "who",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "stake",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_elections_phragmen",
          "SeatHolder"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "464": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "Vec<AccountId>",
            "TypeId": 207
          },
          {
            "Name": "stake",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_elections_phragmen",
          "Voter"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "465": {
        "Variants": [
          {
            "Name": "UnableToVote",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Cannot vote when no candidates or members exist."
            ]
          },
          {
            "Name": "NoVotes",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Must vote for at least one candidate."
            ]
          },
          {
            "Name": "TooManyVotes",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Cannot vote more than candidates."
            ]
          },
          {
            "Name": "MaximumVotesExceeded",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Cannot vote more than maximum allowed."
            ]
          },
          {
            "Name": "LowBalance",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Cannot vote with stake less than minimum balance."
            ]
          },
          {
            "Name": "UnableToPayBond",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Voter can not pay voting bond."
            ]
          },
          {
            "Name": "MustBeVoter",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Must be a voter."
            ]
          },
          {
            "Name": "DuplicatedCandidate",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Duplicated candidate submission."
            ]
          },
          {
            "Name": "TooManyCandidates",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Too many candidates have been created."
            ]
          },
          {
            "Name": "MemberSubmit",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Member cannot re-submit candidacy."
            ]
          },
          {
            "Name": "RunnerUpSubmit",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Runner cannot re-submit candidacy."
            ]
          },
          {
            "Name": "InsufficientCandidateFunds",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Candidate does not have enough funds."
            ]
          },
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Not a member."
            ]
          },
          {
            "Name": "InvalidWitnessData",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The provided count of number of candidates is incorrect."
            ]
          },
          {
            "Name": "InvalidVoteCount",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The provided count of number of votes is incorrect."
            ]
          },
          {
            "Name": "InvalidRenouncing",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The renouncing origin presented a wrong `Renouncing` parameter."
            ]
          },
          {
            "Name": "InvalidReplacement",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Prediction regarding replacement after member removal is wrong."
            ]
          }
        ],
        "Path": [
          "pallet_elections_phragmen",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "466": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 130
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "467": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "ProposalIndex",
            "TypeId": 4
          },
          {
            "Name": "threshold",
            "TypeName": "MemberCount",
            "TypeId": 4
          },
          {
            "Name": "ayes",
            "TypeName": "Vec<AccountId>",
            "TypeId": 207
          },
          {
            "Name": "nays",
            "TypeName": "Vec<AccountId>",
            "TypeId": 207
          },
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_collective",
          "Votes"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "468": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          },
          {
            "Name": "PrimeAccountNotMember",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Prime account is not a member"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "469": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 130
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "470": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          },
          {
            "Name": "PrimeAccountNotMember",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Prime account is not a member"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "471": {
        "TypeFields": [
          {
            "Name": "reason",
            "TypeName": "Hash",
            "TypeId": 12
          },
          {
            "Name": "who",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "finder",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "closes",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 112
          },
          {
            "Name": "tips",
            "TypeName": "Vec<(AccountId, Balance)>",
            "TypeId": 45
          },
          {
            "Name": "finders_fee",
            "TypeName": "bool",
            "TypeId": 48
          }
        ],
        "Path": [
          "pallet_tips",
          "OpenTip"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Hash",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "472": {
        "TypeFields": [
          {
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Percent"
        ],
        "TypeDef": "Composite"
      },
      "473": {
        "Variants": [
          {
            "Name": "ReasonTooBig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The reason given is just too big."
            ]
          },
          {
            "Name": "AlreadyKnown",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The tip was already found/started."
            ]
          },
          {
            "Name": "UnknownTip",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The tip hash is unknown."
            ]
          },
          {
            "Name": "NotFinder",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The account attempting to retract the tip is not the finder of the tip."
            ]
          },
          {
            "Name": "StillOpen",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The tip cannot be claimed/closed because there are not enough tippers yet."
            ]
          },
          {
            "Name": "Premature",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The tip cannot be claimed/closed because it's still in the countdown period."
            ]
          }
        ],
        "Path": [
          "pallet_tips",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "474": {
        "TypeIds": [
          475,
          6
        ],
        "TypeDef": "Tuple"
      },
      "475": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 477
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 476
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "476": {
        "TypeFields": [
          {
            "Name": "delegate",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "proxy_type",
            "TypeName": "ProxyType",
            "TypeId": 52
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "ProxyDefinition"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ProxyType",
            "TypeId": 52
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "477": {
        "TypeId": 476,
        "TypeDef": "Sequence"
      },
      "478": {
        "TypeIds": [
          479,
          6
        ],
        "TypeDef": "Tuple"
      },
      "479": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 481
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 480
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "480": {
        "TypeFields": [
          {
            "Name": "real",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "call_hash",
            "TypeName": "Hash",
            "TypeId": 12
          },
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "Announcement"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Hash",
            "TypeId": 12
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "481": {
        "TypeId": 480,
        "TypeDef": "Sequence"
      },
      "482": {
        "Variants": [
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There are too many proxies registered or too many announcements pending."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proxy registration not found."
            ]
          },
          {
            "Name": "NotProxy",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Sender is not a proxy of the account to be proxied."
            ]
          },
          {
            "Name": "Unproxyable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A call which is incompatible with the proxy type's filter was attempted."
            ]
          },
          {
            "Name": "Duplicate",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Account is already a proxy."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Call may not be made by proxy because it may escalate its privileges."
            ]
          },
          {
            "Name": "Unannounced",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Announcement, if made at all, was made too recently."
            ]
          },
          {
            "Name": "NoSelfProxy",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot add self as proxy."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "483": {
        "TypeIds": [
          0,
          1
        ],
        "TypeDef": "Tuple"
      },
      "484": {
        "TypeFields": [
          {
            "Name": "when",
            "TypeName": "Timepoint<BlockNumber>",
            "TypeId": 55
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "depositor",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approvals",
            "TypeName": "BoundedVec<AccountId, MaxApprovals>",
            "TypeId": 485
          }
        ],
        "Path": [
          "pallet_multisig",
          "Multisig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "MaxApprovals"
          }
        ],
        "TypeDef": "Composite"
      },
      "485": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 207
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "486": {
        "Variants": [
          {
            "Name": "MinimumThreshold",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Threshold must be 2 or greater."
            ]
          },
          {
            "Name": "AlreadyApproved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Call is already approved by this signatory."
            ]
          },
          {
            "Name": "NoApprovalsNeeded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Call doesn't need any (more) approvals."
            ]
          },
          {
            "Name": "TooFewSignatories",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too few signatories in the list."
            ]
          },
          {
            "Name": "TooManySignatories",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many signatories in the list."
            ]
          },
          {
            "Name": "SignatoriesOutOfOrder",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The signatories were provided out of order; they should be ordered."
            ]
          },
          {
            "Name": "SenderInSignatories",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The sender was contained in the other signatories; it shouldn't be."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Multisig operation not found when attempting to cancel."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Only the account that originally created the multisig is able to cancel it."
            ]
          },
          {
            "Name": "NoTimepoint",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "No timepoint was given, yet the multisig operation is already underway."
            ]
          },
          {
            "Name": "WrongTimepoint",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "A different timepoint was given to the multisig operation that is underway."
            ]
          },
          {
            "Name": "UnexpectedTimepoint",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A timepoint was given, yet no multisig operation is underway."
            ]
          },
          {
            "Name": "MaxWeightTooLow",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The maximum weight information provided was too low."
            ]
          },
          {
            "Name": "AlreadyStored",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The data to be stored is already stored."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "487": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "issuer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "admin",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "freezer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "total_deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "free_holding",
            "TypeName": "bool",
            "TypeId": 48
          },
          {
            "Name": "items",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "item_metadatas",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "attributes",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 48
          }
        ],
        "Path": [
          "pallet_uniques",
          "types",
          "CollectionDetails"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "488": {
        "TypeIds": [
          0,
          6,
          6
        ],
        "TypeDef": "Tuple"
      },
      "489": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approved",
            "TypeName": "Option<AccountId>",
            "TypeId": 62
          },
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 48
          },
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_uniques",
          "types",
          "ItemDetails"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "490": {
        "TypeFields": [
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "data",
            "TypeName": "BoundedVec<u8, StringLimit>",
            "TypeId": 57
          },
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 48
          }
        ],
        "Path": [
          "pallet_uniques",
          "types",
          "CollectionMetadata"
        ],
        "TypeParams": [
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "StringLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "491": {
        "TypeFields": [
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "data",
            "TypeName": "BoundedVec<u8, StringLimit>",
            "TypeId": 57
          },
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 48
          }
        ],
        "Path": [
          "pallet_uniques",
          "types",
          "ItemMetadata"
        ],
        "TypeParams": [
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "StringLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "492": {
        "TypeIds": [
          6,
          59,
          60
        ],
        "TypeDef": "Tuple"
      },
      "493": {
        "TypeIds": [
          61,
          6
        ],
        "TypeDef": "Tuple"
      },
      "494": {
        "TypeIds": [
          6,
          62
        ],
        "TypeDef": "Tuple"
      },
      "495": {
        "Variants": [
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "Name": "UnknownCollection",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given item ID is unknown."
            ]
          },
          {
            "Name": "AlreadyExists",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The item ID has already been used for an item."
            ]
          },
          {
            "Name": "WrongOwner",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The owner turned out to be different to what was expected."
            ]
          },
          {
            "Name": "BadWitness",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Invalid witness data given."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The item ID is already taken."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The item or collection is frozen."
            ]
          },
          {
            "Name": "WrongDelegate",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The delegate turned out to be different to what was expected."
            ]
          },
          {
            "Name": "NoDelegate",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "There is no delegate approved."
            ]
          },
          {
            "Name": "Unapproved",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "Name": "Unaccepted",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The named owner has not signed ownership of the collection is acceptable."
            ]
          },
          {
            "Name": "Locked",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The item is locked."
            ]
          },
          {
            "Name": "MaxSupplyReached",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "All items have been minted."
            ]
          },
          {
            "Name": "MaxSupplyAlreadySet",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The max supply has already been set."
            ]
          },
          {
            "Name": "MaxSupplyTooSmall",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The provided max supply is less to the amount of items a collection already has."
            ]
          },
          {
            "Name": "UnknownItem",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The given item ID is unknown."
            ]
          },
          {
            "Name": "NotForSale",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Item is not for sale."
            ]
          },
          {
            "Name": "BidTooLow",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The provided bid is too low."
            ]
          }
        ],
        "Path": [
          "pallet_uniques",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "496": {
        "TypeFields": [
          {
            "Name": "name",
            "TypeName": "Option<Name<StringLimit>>",
            "TypeId": 67
          },
          {
            "Name": "asset_type",
            "TypeName": "AssetType",
            "TypeId": 69
          },
          {
            "Name": "existential_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "symbol",
            "TypeName": "Option<Symbol<StringLimit>>",
            "TypeId": 67
          },
          {
            "Name": "decimals",
            "TypeName": "Option<u8>",
            "TypeId": 70
          },
          {
            "Name": "xcm_rate_limit",
            "TypeName": "Option<Balance>",
            "TypeId": 59
          },
          {
            "Name": "is_sufficient",
            "TypeName": "bool",
            "TypeId": 48
          }
        ],
        "Path": [
          "pallet_asset_registry",
          "types",
          "AssetDetails"
        ],
        "TypeParams": [
          {
            "Name": "StringLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "497": {
        "Variants": [
          {
            "Name": "NoIdAvailable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Asset ID is not available. This only happens when it reaches the MAX value of given id type."
            ]
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Invalid asset name or symbol."
            ]
          },
          {
            "Name": "TooShort",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Length of name or symbol is less than min. length."
            ]
          },
          {
            "Name": "InvalidSymbol",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Asset's symbol can't contain whitespace characters ."
            ]
          },
          {
            "Name": "AssetNotRegistered",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Asset ID is not registered in the asset-registry."
            ]
          },
          {
            "Name": "AssetAlreadyRegistered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Asset is already registered."
            ]
          },
          {
            "Name": "InvalidSharedAssetLen",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Incorrect number of assets provided to create shared asset."
            ]
          },
          {
            "Name": "CannotUpdateLocation",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot update asset location."
            ]
          },
          {
            "Name": "NotInReservedRange",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Selected asset id is out of reserved range."
            ]
          },
          {
            "Name": "LocationAlreadyRegistered",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Location already registered with different asset."
            ]
          },
          {
            "Name": "Forbidden",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Origin is forbidden to set/update value."
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Balance too low."
            ]
          },
          {
            "Name": "ForbiddenSufficiencyChange",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Sufficient assets can't be changed to insufficient."
            ]
          },
          {
            "Name": "AssetAlreadyBanned",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Asset is already banned."
            ]
          },
          {
            "Name": "AssetNotBanned",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Asset is not banned."
            ]
          }
        ],
        "Path": [
          "pallet_asset_registry",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "498": {
        "Variants": [
          {
            "Name": "InvalidEthereumSignature",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Ethereum signature is not valid"
            ]
          },
          {
            "Name": "NoClaimOrAlreadyClaimed",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Claim is not valid"
            ]
          },
          {
            "Name": "BalanceOverflow",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Value reached maximum and cannot be incremented further"
            ]
          }
        ],
        "Path": [
          "pallet_claims",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "499": {
        "TypeFields": [
          {
            "Name": "genesis_hash",
            "TypeName": "H256",
            "TypeId": 12
          },
          {
            "Name": "last_block_hash",
            "TypeName": "H256",
            "TypeId": 12
          }
        ],
        "Path": [
          "pallet_genesis_history",
          "Chain"
        ],
        "TypeDef": "Composite"
      },
      "500": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 207
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "501": {
        "Variants": null,
        "Path": [
          "pallet_collator_rewards",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "502": {
        "TypeFields": [
          {
            "Name": "hub_reserve",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "shares",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "protocol_shares",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "cap",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "tradable",
            "TypeName": "Tradability",
            "TypeId": 87
          }
        ],
        "Path": [
          "pallet_omnipool",
          "types",
          "AssetState"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "503": {
        "TypeFields": [
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "negative",
            "TypeName": "bool",
            "TypeId": 48
          }
        ],
        "Path": [
          "pallet_omnipool",
          "types",
          "SimpleImbalance"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "504": {
        "TypeFields": [
          {
            "Name": "asset_id",
            "TypeName": "AssetId",
            "TypeId": 4
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "shares",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "price",
            "TypeName": "(Balance, Balance)",
            "TypeId": 326
          }
        ],
        "Path": [
          "pallet_omnipool",
          "types",
          "Position"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AssetId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "505": {
        "Variants": [
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Balance too low"
            ]
          },
          {
            "Name": "AssetAlreadyAdded",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Asset is already in omnipool"
            ]
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Asset is not in omnipool"
            ]
          },
          {
            "Name": "MissingBalance",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Failed to add token to Omnipool due to insufficient initial liquidity."
            ]
          },
          {
            "Name": "InvalidInitialAssetPrice",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Invalid initial asset price."
            ]
          },
          {
            "Name": "BuyLimitNotReached",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Slippage protection - minimum limit has not been reached."
            ]
          },
          {
            "Name": "SellLimitExceeded",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Slippage protection - maximum limit has been exceeded."
            ]
          },
          {
            "Name": "PositionNotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Position has not been found."
            ]
          },
          {
            "Name": "InsufficientShares",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Insufficient shares in position"
            ]
          },
          {
            "Name": "NotAllowed",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Asset is not allowed to be traded."
            ]
          },
          {
            "Name": "Forbidden",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Signed account is not owner of position instance."
            ]
          },
          {
            "Name": "AssetWeightCapExceeded",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Asset weight cap has been exceeded."
            ]
          },
          {
            "Name": "AssetNotRegistered",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Asset is not registered in asset registry"
            ]
          },
          {
            "Name": "InsufficientLiquidity",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Provided liquidity is below minimum allowed limit"
            ]
          },
          {
            "Name": "InsufficientTradingAmount",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Traded amount is below minimum allowed limit"
            ]
          },
          {
            "Name": "SameAssetTradeNotAllowed",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Sell or buy with same asset ids is not allowed."
            ]
          },
          {
            "Name": "HubAssetUpdateError",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "LRNA update after trade results in positive value."
            ]
          },
          {
            "Name": "PositiveImbalance",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Imbalance results in positive value."
            ]
          },
          {
            "Name": "InvalidSharesAmount",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Amount of shares provided cannot be 0."
            ]
          },
          {
            "Name": "InvalidHubAssetTradableState",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Hub asset is only allowed to be sold."
            ]
          },
          {
            "Name": "AssetRefundNotAllowed",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Asset is not allowed to be refunded."
            ]
          },
          {
            "Name": "MaxOutRatioExceeded",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Max fraction of asset to buy has been exceeded."
            ]
          },
          {
            "Name": "MaxInRatioExceeded",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Max fraction of asset to sell has been exceeded."
            ]
          },
          {
            "Name": "PriceDifferenceTooHigh",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Max allowed price difference has been exceeded."
            ]
          },
          {
            "Name": "InvalidOraclePrice",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Invalid oracle price - division by zero."
            ]
          },
          {
            "Name": "InvalidWithdrawalFee",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "Failed to calculate withdrawal fee."
            ]
          },
          {
            "Name": "FeeOverdraft",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "More than allowed amount of fee has been transferred."
            ]
          },
          {
            "Name": "SharesRemaining",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "Token cannot be removed from Omnipool due to shares still owned by other users."
            ]
          },
          {
            "Name": "AssetNotFrozen",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "Token cannot be removed from Omnipool because asset is not frozen."
            ]
          },
          {
            "Name": "ZeroAmountOut",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "Calculated amount out from sell trade is zero."
            ]
          },
          {
            "Name": "ExistentialDepositNotAvailable",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "Existential deposit of asset is not available."
            ]
          }
        ],
        "Path": [
          "pallet_omnipool",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "506": {
        "TypeIds": [
          507,
          507
        ],
        "TypeDef": "Tuple"
      },
      "507": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "508": {
        "Variants": [
          {
            "Name": "CannotPause",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "can not pause"
            ]
          },
          {
            "Name": "InvalidCharacter",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "invalid character encoding"
            ]
          },
          {
            "Name": "NameTooLong",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "pallet name or function name is too long"
            ]
          }
        ],
        "Path": [
          "pallet_transaction_pause",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "509": {
        "Variants": [
          {
            "Name": "AccountBlacklisted",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is excluded from dusting."
            ]
          },
          {
            "Name": "AccountNotBlacklisted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account is not present in the non-dustable list."
            ]
          },
          {
            "Name": "ZeroBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The balance is zero."
            ]
          },
          {
            "Name": "BalanceSufficient",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The balance is sufficient to keep account open."
            ]
          },
          {
            "Name": "DustAccountNotSet",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Dust account is not set."
            ]
          },
          {
            "Name": "ReserveAccountNotSet",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Reserve account is not set."
            ]
          }
        ],
        "Path": [
          "pallet_duster",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "510": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "GlobalFarmId",
            "TypeId": 4
          },
          {
            "Name": "owner",
            "TypeName": "T::AccountId",
            "TypeId": 0
          },
          {
            "Name": "updated_at",
            "TypeName": "PeriodOf<T>",
            "TypeId": 4
          },
          {
            "Name": "total_shares_z",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "accumulated_rpz",
            "TypeName": "FixedU128",
            "TypeId": 86
          },
          {
            "Name": "reward_currency",
            "TypeName": "T::AssetId",
            "TypeId": 4
          },
          {
            "Name": "pending_rewards",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "accumulated_paid_rewards",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "yield_per_period",
            "TypeName": "Perquintill",
            "TypeId": 93
          },
          {
            "Name": "planned_yielding_periods",
            "TypeName": "PeriodOf<T>",
            "TypeId": 4
          },
          {
            "Name": "blocks_per_period",
            "TypeName": "BlockNumberFor<T>",
            "TypeId": 4
          },
          {
            "Name": "incentivized_asset",
            "TypeName": "T::AssetId",
            "TypeId": 4
          },
          {
            "Name": "max_reward_per_period",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "min_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "live_yield_farms_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_yield_farms_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "price_adjustment",
            "TypeName": "FixedU128",
            "TypeId": 86
          },
          {
            "Name": "state",
            "TypeName": "FarmState",
            "TypeId": 511
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "types",
          "GlobalFarmData"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Composite"
      },
      "511": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Stopped",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Terminated",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "types",
          "FarmState"
        ],
        "TypeDef": "Variant"
      },
      "512": {
        "TypeIds": [
          4,
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "513": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "FarmId",
            "TypeId": 4
          },
          {
            "Name": "updated_at",
            "TypeName": "PeriodOf<T>",
            "TypeId": 4
          },
          {
            "Name": "total_shares",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "total_valued_shares",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "accumulated_rpvs",
            "TypeName": "FixedU128",
            "TypeId": 86
          },
          {
            "Name": "accumulated_rpz",
            "TypeName": "FixedU128",
            "TypeId": 86
          },
          {
            "Name": "loyalty_curve",
            "TypeName": "Option<LoyaltyCurve>",
            "TypeId": 94
          },
          {
            "Name": "multiplier",
            "TypeName": "FarmMultiplier",
            "TypeId": 86
          },
          {
            "Name": "state",
            "TypeName": "FarmState",
            "TypeId": 511
          },
          {
            "Name": "entries_count",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "left_to_distribute",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "total_stopped",
            "TypeName": "PeriodOf<T>",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "types",
          "YieldFarmData"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Composite"
      },
      "514": {
        "TypeFields": [
          {
            "Name": "shares",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "amm_pool_id",
            "TypeName": "T::AmmPoolId",
            "TypeId": 4
          },
          {
            "Name": "yield_farm_entries",
            "TypeName": "BoundedVec<YieldFarmEntry<T, I>, T::MaxFarmEntriesPerDeposit>",
            "TypeId": 515
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "types",
          "DepositData"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Composite"
      },
      "515": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 517
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 516
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "516": {
        "TypeFields": [
          {
            "Name": "global_farm_id",
            "TypeName": "GlobalFarmId",
            "TypeId": 4
          },
          {
            "Name": "yield_farm_id",
            "TypeName": "YieldFarmId",
            "TypeId": 4
          },
          {
            "Name": "valued_shares",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "accumulated_rpvs",
            "TypeName": "FixedU128",
            "TypeId": 86
          },
          {
            "Name": "accumulated_claimed_rewards",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "entered_at",
            "TypeName": "PeriodOf<T>",
            "TypeId": 4
          },
          {
            "Name": "updated_at",
            "TypeName": "PeriodOf<T>",
            "TypeId": 4
          },
          {
            "Name": "stopped_at_creation",
            "TypeName": "PeriodOf<T>",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "types",
          "YieldFarmEntry"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Composite"
      },
      "517": {
        "TypeId": 516,
        "TypeDef": "Sequence"
      },
      "518": {
        "Variants": [
          {
            "Name": "GlobalFarmNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Global farm does not exist."
            ]
          },
          {
            "Name": "YieldFarmNotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Yield farm does not exist."
            ]
          },
          {
            "Name": "DoubleClaimInPeriod",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Multiple claims in the same period is not allowed."
            ]
          },
          {
            "Name": "LiquidityMiningCanceled",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Liquidity mining is canceled."
            ]
          },
          {
            "Name": "LiquidityMiningIsActive",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Liquidity mining is not canceled."
            ]
          },
          {
            "Name": "LiquidityMiningIsNotStopped",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Liquidity mining is in `active` or `terminated` state and action cannot be completed."
            ]
          },
          {
            "Name": "InvalidDepositAmount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "LP shares amount is not valid."
            ]
          },
          {
            "Name": "Forbidden",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Account is not allowed to perform action."
            ]
          },
          {
            "Name": "InvalidMultiplier",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Yield farm multiplier can't be 0."
            ]
          },
          {
            "Name": "YieldFarmAlreadyExists",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Yield farm with given `amm_pool_id` already exists in global farm."
            ]
          },
          {
            "Name": "InvalidInitialRewardPercentage",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Loyalty curve's initial reward percentage is not valid. Valid range is: [0, 1)."
            ]
          },
          {
            "Name": "GlobalFarmIsNotEmpty",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "One or more yield farms exist in global farm."
            ]
          },
          {
            "Name": "MissingIncentivizedAsset",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Farm's `incentivized_asset` is missing in provided asset pair."
            ]
          },
          {
            "Name": "InsufficientRewardCurrencyBalance",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Reward currency balance is not sufficient."
            ]
          },
          {
            "Name": "InvalidBlocksPerPeriod",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Blocks per period can't be 0."
            ]
          },
          {
            "Name": "InvalidYieldPerPeriod",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Yield per period can't be 0."
            ]
          },
          {
            "Name": "InvalidTotalRewards",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Total rewards is less than `MinTotalFarmRewards`."
            ]
          },
          {
            "Name": "InvalidPlannedYieldingPeriods",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Planned yielding periods is less than `MinPlannedYieldingPeriods`."
            ]
          },
          {
            "Name": "MaxEntriesPerDeposit",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Maximum number of locks reached for deposit."
            ]
          },
          {
            "Name": "DoubleLock",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Trying to lock LP shares into already locked yield farm."
            ]
          },
          {
            "Name": "YieldFarmEntryNotFound",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Yield farm entry doesn't exist for given deposit."
            ]
          },
          {
            "Name": "GlobalFarmIsFull",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Max number of yield farms in global farm was reached. Global farm can't accept new",
              "yield farms until some yield farm is not removed from storage."
            ]
          },
          {
            "Name": "InvalidMinDeposit",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Invalid min. deposit was set for global farm."
            ]
          },
          {
            "Name": "InvalidPriceAdjustment",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Price adjustment multiplier can't be 0."
            ]
          },
          {
            "Name": "ErrorGetAccountId",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Account creation from id failed."
            ]
          },
          {
            "Name": "IncorrectValuedShares",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "Value of deposited shares amount in reward currency is bellow min. limit."
            ]
          },
          {
            "Name": "RewardCurrencyNotRegistered",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "`reward_currency` is not registered in asset registry."
            ]
          },
          {
            "Name": "IncentivizedAssetNotRegistered",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "`incentivized_asset` is not registered in asset registry."
            ]
          },
          {
            "Name": "InconsistentState",
            "TypeFields": [
              {
                "TypeName": "InconsistentStateError",
                "TypeId": 519
              }
            ],
            "Index": 28,
            "Docs": [
              "Action cannot be completed because unexpected error has occurred. This should be reported",
              "to protocol maintainers."
            ]
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "519": {
        "Variants": [
          {
            "Name": "YieldFarmNotFound",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "GlobalFarmNotFound",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "LiquidityIsNotActive",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "GlobalFarmIsNotActive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "DepositNotFound",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "InvalidPeriod",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "NotEnoughRewardsInYieldFarm",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLiveYielFarmsCount",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "InvalidTotalYieldFarmsCount",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "InvalidYieldFarmEntriesCount",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "InvalidTotalShares",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "InvalidValuedShares",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "InvalidTotalSharesZ",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "InvalidPaidAccumulatedRewards",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "InvalidFarmId",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "InvalidLoyaltyMultiplier",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "NoExistentialDepositForAsset",
            "TypeFields": null,
            "Index": 16
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "pallet",
          "InconsistentStateError"
        ],
        "TypeDef": "Variant"
      },
      "520": {
        "Variants": [
          {
            "Name": "LastBlock",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Short",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "TenMinutes",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Hour",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Day",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Week",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "hydradx_traits",
          "oracle",
          "OraclePeriod"
        ],
        "TypeDef": "Variant"
      },
      "521": {
        "Variants": [
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Asset is not in the omnipool."
            ]
          },
          {
            "Name": "Forbidden",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Signed account is not owner of the deposit."
            ]
          },
          {
            "Name": "ZeroClaimedRewards",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Rewards to claim are 0."
            ]
          },
          {
            "Name": "InconsistentState",
            "TypeFields": [
              {
                "TypeName": "InconsistentStateError",
                "TypeId": 522
              }
            ],
            "Index": 3,
            "Docs": [
              "Action cannot be completed because unexpected error has occurred. This should be reported",
              "to protocol maintainers."
            ]
          },
          {
            "Name": "OracleNotAvailable",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Oracle could not be found for requested assets."
            ]
          },
          {
            "Name": "PriceAdjustmentNotAvailable",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Oracle providing `price_adjustment` could not be found for requested assets."
            ]
          }
        ],
        "Path": [
          "pallet_omnipool_liquidity_mining",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "522": {
        "Variants": [
          {
            "Name": "MissingLpPosition",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "DepositDataNotFound",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_omnipool_liquidity_mining",
          "pallet",
          "InconsistentStateError"
        ],
        "TypeDef": "Variant"
      },
      "523": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "asset_in",
            "TypeName": "AssetId",
            "TypeId": 4
          },
          {
            "Name": "asset_out",
            "TypeName": "AssetId",
            "TypeId": 4
          },
          {
            "Name": "amount_in",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "amount_out",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "partially_fillable",
            "TypeName": "bool",
            "TypeId": 48
          }
        ],
        "Path": [
          "pallet_otc",
          "Order"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "AssetId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "524": {
        "Variants": [
          {
            "Name": "AssetNotRegistered",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Asset does not exist in registry"
            ]
          },
          {
            "Name": "OrderNotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Order cannot be found"
            ]
          },
          {
            "Name": "OrderIdOutOfBound",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Size of order ID exceeds the bound"
            ]
          },
          {
            "Name": "OrderNotPartiallyFillable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Cannot partially fill an order which is not partially fillable"
            ]
          },
          {
            "Name": "OrderAmountTooSmall",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Order amount_in and amount_out must at all times be greater than the existential deposit",
              "for the asset multiplied by the ExistentialDepositMultiplier.",
              "A fill order may not leave behind amounts smaller than this."
            ]
          },
          {
            "Name": "MathError",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Error with math calculations"
            ]
          },
          {
            "Name": "Forbidden",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The caller does not have permission to complete the action"
            ]
          },
          {
            "Name": "InsufficientReservedAmount",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Reserved amount not sufficient."
            ]
          }
        ],
        "Path": [
          "pallet_otc",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "525": {
        "TypeFields": [
          {
            "Name": "volume_in",
            "TypeName": "T::Balance",
            "TypeId": 6
          },
          {
            "Name": "volume_out",
            "TypeName": "T::Balance",
            "TypeId": 6
          },
          {
            "Name": "limit",
            "TypeName": "T::Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_circuit_breaker",
          "TradeVolumeLimit"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "526": {
        "TypeFields": [
          {
            "Name": "liquidity",
            "TypeName": "T::Balance",
            "TypeId": 6
          },
          {
            "Name": "limit",
            "TypeName": "T::Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_circuit_breaker",
          "LiquidityLimit"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "527": {
        "Variants": [
          {
            "Name": "InvalidLimitValue",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Invalid value for a limit. Limit must be non-zero."
            ]
          },
          {
            "Name": "LiquidityLimitNotStoredForAsset",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Allowed liquidity limit is not stored for asset"
            ]
          },
          {
            "Name": "TokenOutflowLimitReached",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Token trade outflow per block has been reached"
            ]
          },
          {
            "Name": "TokenInfluxLimitReached",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Token trade influx per block has been reached"
            ]
          },
          {
            "Name": "MaxLiquidityLimitPerBlockReached",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Maximum pool's liquidity limit per block has been reached"
            ]
          },
          {
            "Name": "NotAllowed",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Asset is not allowed to have a limit"
            ]
          }
        ],
        "Path": [
          "pallet_circuit_breaker",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "528": {
        "Variants": [
          {
            "Name": "TradingLimitReached",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The trading limit has been reached"
            ]
          },
          {
            "Name": "MaxTradesExceeded",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The the max number of trades limit is reached"
            ]
          },
          {
            "Name": "PoolNotSupported",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The AMM pool is not supported for executing trades"
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The user has not enough balance to execute the trade"
            ]
          },
          {
            "Name": "RouteCalculationFailed",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The calculation of route trade amounts failed in the underlying AMM"
            ]
          },
          {
            "Name": "InvalidRoute",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The route is invalid"
            ]
          },
          {
            "Name": "RouteUpdateIsNotSuccessful",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The route update was not successful"
            ]
          },
          {
            "Name": "InsufficientAssetNotSupported",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Insufficient asset is not supported for on chain routing"
            ]
          },
          {
            "Name": "InvalidRouteExecution",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The route execution failed in the underlying AMM"
            ]
          },
          {
            "Name": "NotAllowed",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Trading same assets is not allowed."
            ]
          }
        ],
        "Path": [
          "pallet_route_executor",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "529": {
        "TypeFields": [
          {
            "Name": "asset_fee",
            "TypeName": "Fee",
            "TypeId": 88
          },
          {
            "Name": "protocol_fee",
            "TypeName": "Fee",
            "TypeId": 88
          },
          {
            "Name": "timestamp",
            "TypeName": "Block",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_dynamic_fees",
          "types",
          "FeeEntry"
        ],
        "TypeParams": [
          {
            "Name": "Fee",
            "TypeId": 88
          },
          {
            "Name": "Block",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "530": {
        "TypeFields": [
          {
            "Name": "min_fee",
            "TypeName": "Fee",
            "TypeId": 88
          },
          {
            "Name": "max_fee",
            "TypeName": "Fee",
            "TypeId": 88
          },
          {
            "Name": "decay",
            "TypeName": "FixedU128",
            "TypeId": 86
          },
          {
            "Name": "amplification",
            "TypeName": "FixedU128",
            "TypeId": 86
          }
        ],
        "Path": [
          "pallet_dynamic_fees",
          "types",
          "FeeParams"
        ],
        "TypeParams": [
          {
            "Name": "Fee",
            "TypeId": 88
          }
        ],
        "TypeDef": "Composite"
      },
      "531": {
        "Variants": null,
        "Path": [
          "pallet_dynamic_fees",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "532": {
        "TypeFields": [
          {
            "Name": "total_stake",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "accumulated_reward_per_stake",
            "TypeName": "FixedU128",
            "TypeId": 86
          },
          {
            "Name": "pot_reserved_balance",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_staking",
          "types",
          "StakingData"
        ],
        "TypeDef": "Composite"
      },
      "533": {
        "TypeFields": [
          {
            "Name": "stake",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "action_points",
            "TypeName": "Point",
            "TypeId": 6
          },
          {
            "Name": "reward_per_stake",
            "TypeName": "FixedU128",
            "TypeId": 86
          },
          {
            "Name": "created_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "accumulated_slash_points",
            "TypeName": "Point",
            "TypeId": 6
          },
          {
            "Name": "accumulated_unpaid_rewards",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "accumulated_locked_rewards",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_staking",
          "types",
          "Position"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "534": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "BoundedVec<(ReferendumIndex, Vote), MaxVotes>",
            "TypeId": 535
          }
        ],
        "Path": [
          "pallet_staking",
          "types",
          "Voting"
        ],
        "TypeParams": [
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Composite"
      },
      "535": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 539
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 536
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "536": {
        "TypeIds": [
          4,
          537
        ],
        "TypeDef": "Tuple"
      },
      "537": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "conviction",
            "TypeName": "Conviction",
            "TypeId": 538
          }
        ],
        "Path": [
          "pallet_staking",
          "types",
          "Vote"
        ],
        "TypeDef": "Composite"
      },
      "538": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Locked1x",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Locked2x",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Locked3x",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Locked4x",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Locked5x",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Locked6x",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_staking",
          "types",
          "Conviction"
        ],
        "TypeDef": "Variant"
      },
      "539": {
        "TypeId": 536,
        "TypeDef": "Sequence"
      },
      "540": {
        "TypeIds": [
          0,
          4
        ],
        "TypeDef": "Tuple"
      },
      "541": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Perbill"
        ],
        "TypeDef": "Composite"
      },
      "542": {
        "Variants": [
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Balance is too low."
            ]
          },
          {
            "Name": "InsufficientStake",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Staked amount is too low."
            ]
          },
          {
            "Name": "PositionNotFound",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Staking position has not been found."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Maximum amount of votes were reached for staking position."
            ]
          },
          {
            "Name": "NotInitialized",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Staking is not initialized."
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Staking is already initialized."
            ]
          },
          {
            "Name": "Arithmetic",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Arithmetic error."
            ]
          },
          {
            "Name": "MissingPotBalance",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Pot's balance is zero."
            ]
          },
          {
            "Name": "PositionAlreadyExists",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Account's position already exists."
            ]
          },
          {
            "Name": "Forbidden",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Signer is not an owner of the staking position."
            ]
          },
          {
            "Name": "ExistingVotes",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Position contains registered votes."
            ]
          },
          {
            "Name": "ExistingProcessedVotes",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Position contains processed votes. Removed these votes first before increasing stake or claiming."
            ]
          },
          {
            "Name": "InconsistentState",
            "TypeFields": [
              {
                "TypeName": "InconsistentStateError",
                "TypeId": 543
              }
            ],
            "Index": 12,
            "Docs": [
              "Action cannot be completed because unexpected error has occurred. This should be reported",
              "to protocol maintainers."
            ]
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "543": {
        "Variants": [
          {
            "Name": "PositionNotFound",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NegativePendingRewards",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NegativeUnpaidRewards",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "TooManyPositions",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Arithmetic",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "InconsistentStateError"
        ],
        "TypeDef": "Variant"
      },
      "544": {
        "TypeFields": [
          {
            "Name": "assets",
            "TypeName": "BoundedVec<AssetId, ConstU32<MAX_ASSETS_IN_POOL>>",
            "TypeId": 545
          },
          {
            "Name": "initial_amplification",
            "TypeName": "NonZeroU16",
            "TypeId": 105
          },
          {
            "Name": "final_amplification",
            "TypeName": "NonZeroU16",
            "TypeId": 105
          },
          {
            "Name": "initial_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "final_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "fee",
            "TypeName": "Permill",
            "TypeId": 88
          }
        ],
        "Path": [
          "pallet_stableswap",
          "types",
          "PoolInfo"
        ],
        "TypeParams": [
          {
            "Name": "AssetId",
            "TypeId": 4
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "545": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 101
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "546": {
        "TypeFields": [
          {
            "Name": "start",
            "TypeName": "Idx",
            "TypeId": 105
          },
          {
            "Name": "end",
            "TypeName": "Idx",
            "TypeId": 105
          }
        ],
        "Path": [
          "RangeInclusive"
        ],
        "TypeParams": [
          {
            "Name": "Idx",
            "TypeId": 105
          }
        ],
        "TypeDef": "Composite"
      },
      "547": {
        "Variants": [
          {
            "Name": "IncorrectAssets",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Creating a pool with same assets or less than 2 assets is not allowed."
            ]
          },
          {
            "Name": "MaxAssetsExceeded",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Maximum number of assets has been exceeded."
            ]
          },
          {
            "Name": "PoolNotFound",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "A pool with given assets does not exist."
            ]
          },
          {
            "Name": "PoolExists",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A pool with given assets already exists."
            ]
          },
          {
            "Name": "AssetNotInPool",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Asset is not in the pool."
            ]
          },
          {
            "Name": "ShareAssetNotRegistered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Share asset is not registered in Registry."
            ]
          },
          {
            "Name": "ShareAssetInPoolAssets",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Share asset is amount assets when creating a pool."
            ]
          },
          {
            "Name": "AssetNotRegistered",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "One or more assets are not registered in AssetRegistry"
            ]
          },
          {
            "Name": "InvalidAssetAmount",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Invalid asset amount provided. Amount must be greater than zero."
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Balance of an asset is not sufficient to perform a trade."
            ]
          },
          {
            "Name": "InsufficientShares",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Balance of a share asset is not sufficient to withdraw liquidity."
            ]
          },
          {
            "Name": "InsufficientLiquidity",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Liquidity has not reached the required minimum."
            ]
          },
          {
            "Name": "InsufficientLiquidityRemaining",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Insufficient liquidity left in the pool after withdrawal."
            ]
          },
          {
            "Name": "InsufficientTradingAmount",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Amount is less than the minimum trading amount configured."
            ]
          },
          {
            "Name": "BuyLimitNotReached",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Minimum limit has not been reached during trade."
            ]
          },
          {
            "Name": "SellLimitExceeded",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Maximum limit has been exceeded during trade."
            ]
          },
          {
            "Name": "InvalidInitialLiquidity",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Initial liquidity of asset must be > 0."
            ]
          },
          {
            "Name": "InvalidAmplification",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Amplification is outside configured range."
            ]
          },
          {
            "Name": "InsufficientShareBalance",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Remaining balance of share asset is below asset's existential deposit."
            ]
          },
          {
            "Name": "NotAllowed",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Not allowed to perform an operation on given asset."
            ]
          },
          {
            "Name": "PastBlock",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Future block number is in the past."
            ]
          },
          {
            "Name": "SameAmplification",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "New amplification is equal to the previous value."
            ]
          },
          {
            "Name": "SlippageLimit",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Slippage protection."
            ]
          },
          {
            "Name": "UnknownDecimals",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Failed to retrieve asset decimals."
            ]
          }
        ],
        "Path": [
          "pallet_stableswap",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "548": {
        "TypeIds": [
          4,
          11
        ],
        "TypeDef": "Tuple"
      },
      "549": {
        "Variants": [
          {
            "Name": "NotRegistered",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Bond not registered"
            ]
          },
          {
            "Name": "NotMature",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Bond is not mature"
            ]
          },
          {
            "Name": "InvalidMaturity",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Maturity not long enough"
            ]
          },
          {
            "Name": "DisallowedAsset",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Asset type not allowed for underlying asset"
            ]
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Asset is not registered in `AssetRegistry`"
            ]
          },
          {
            "Name": "InvalidBondName",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Generated name is not valid."
            ]
          },
          {
            "Name": "FailToParseName",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Bond's name parsing was now successful"
            ]
          }
        ],
        "Path": [
          "pallet_bonds",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "550": {
        "Variants": [
          {
            "Name": "CannotCreatePoolWithSameAssets",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Pool assets can not be the same"
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account is not a pool owner"
            ]
          },
          {
            "Name": "SaleStarted",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Sale already started"
            ]
          },
          {
            "Name": "SaleNotEnded",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Sale is still in progress"
            ]
          },
          {
            "Name": "SaleIsNotRunning",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Sale is not running"
            ]
          },
          {
            "Name": "MaxSaleDurationExceeded",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Sale duration is too long"
            ]
          },
          {
            "Name": "CannotAddZeroLiquidity",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Liquidity being added should not be zero"
            ]
          },
          {
            "Name": "InsufficientAssetBalance",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Asset balance too low"
            ]
          },
          {
            "Name": "PoolNotFound",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Pool does not exist"
            ]
          },
          {
            "Name": "PoolAlreadyExists",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Pool has been already created"
            ]
          },
          {
            "Name": "InvalidBlockRange",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Invalid block range"
            ]
          },
          {
            "Name": "WeightCalculationError",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Calculation error"
            ]
          },
          {
            "Name": "InvalidWeight",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Weight set is out of range"
            ]
          },
          {
            "Name": "ZeroAmount",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Can not perform a trade with zero amount"
            ]
          },
          {
            "Name": "MaxInRatioExceeded",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Trade amount is too high"
            ]
          },
          {
            "Name": "MaxOutRatioExceeded",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Trade amount is too high"
            ]
          },
          {
            "Name": "FeeAmountInvalid",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Invalid fee amount"
            ]
          },
          {
            "Name": "TradingLimitReached",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Trading limit reached"
            ]
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "An unexpected integer overflow occurred"
            ]
          },
          {
            "Name": "NothingToUpdate",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Nothing to update"
            ]
          },
          {
            "Name": "InsufficientLiquidity",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Liquidity has not reached the required minimum."
            ]
          },
          {
            "Name": "InsufficientTradingAmount",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Amount is less than minimum trading limit."
            ]
          },
          {
            "Name": "FeeCollectorWithAssetAlreadyUsed",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Not more than one fee collector per asset id"
            ]
          }
        ],
        "Path": [
          "pallet_lbp",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "551": {
        "Variants": [
          {
            "Name": "CannotCreatePoolWithSameAssets",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "It is not allowed to create a pool between same assets."
            ]
          },
          {
            "Name": "InsufficientLiquidity",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Liquidity has not reached the required minimum."
            ]
          },
          {
            "Name": "InsufficientTradingAmount",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Amount is less than min trading limit."
            ]
          },
          {
            "Name": "ZeroLiquidity",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Liquidity is zero."
            ]
          },
          {
            "Name": "ZeroInitialPrice",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "It is not allowed to create a pool with zero initial price.",
              "Not used, kept for backward compatibility"
            ]
          },
          {
            "Name": "CreatePoolAssetAmountInvalid",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Overflow",
              "Not used, kept for backward compatibility"
            ]
          },
          {
            "Name": "InvalidMintedLiquidity",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Overflow"
            ]
          },
          {
            "Name": "InvalidLiquidityAmount",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Overflow"
            ]
          },
          {
            "Name": "AssetAmountExceededLimit",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Asset amount has exceeded given limit."
            ]
          },
          {
            "Name": "AssetAmountNotReachedLimit",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Asset amount has not reached given limit."
            ]
          },
          {
            "Name": "InsufficientAssetBalance",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Asset balance is not sufficient."
            ]
          },
          {
            "Name": "InsufficientPoolAssetBalance",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Not enough asset liquidity in the pool."
            ]
          },
          {
            "Name": "InsufficientNativeCurrencyBalance",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Not enough core asset liquidity in the pool."
            ]
          },
          {
            "Name": "TokenPoolNotFound",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Liquidity pool for given assets does not exist."
            ]
          },
          {
            "Name": "TokenPoolAlreadyExists",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Liquidity pool for given assets already exists."
            ]
          },
          {
            "Name": "AddAssetAmountInvalid",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Overflow"
            ]
          },
          {
            "Name": "RemoveAssetAmountInvalid",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Overflow"
            ]
          },
          {
            "Name": "SellAssetAmountInvalid",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Overflow"
            ]
          },
          {
            "Name": "BuyAssetAmountInvalid",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Overflow"
            ]
          },
          {
            "Name": "FeeAmountInvalid",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Overflow"
            ]
          },
          {
            "Name": "CannotApplyDiscount",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Overflow"
            ]
          },
          {
            "Name": "MaxOutRatioExceeded",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Max fraction of pool to buy in single transaction has been exceeded."
            ]
          },
          {
            "Name": "MaxInRatioExceeded",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Max fraction of pool to sell in single transaction has been exceeded."
            ]
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Overflow"
            ]
          },
          {
            "Name": "CannotCreatePool",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Pool cannot be created due to outside factors."
            ]
          }
        ],
        "Path": [
          "pallet_xyk",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "552": {
        "TypeIds": [
          118,
          6
        ],
        "TypeDef": "Tuple"
      },
      "553": {
        "TypeIds": [
          4,
          118
        ],
        "TypeDef": "Tuple"
      },
      "554": {
        "TypeIds": [
          4,
          6,
          0
        ],
        "TypeDef": "Tuple"
      },
      "555": {
        "Variants": [
          {
            "Name": "TooLong",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Referral code is too long."
            ]
          },
          {
            "Name": "TooShort",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Referral code is too short."
            ]
          },
          {
            "Name": "InvalidCharacter",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Referral code contains invalid character. Only alphanumeric characters are allowed."
            ]
          },
          {
            "Name": "AlreadyExists",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Referral code already exists."
            ]
          },
          {
            "Name": "InvalidCode",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Provided referral code is invalid. Either does not exist or is too long."
            ]
          },
          {
            "Name": "AlreadyLinked",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Account is already linked to another referral account."
            ]
          },
          {
            "Name": "ZeroAmount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Nothing in the referral pot account for the asset."
            ]
          },
          {
            "Name": "LinkNotAllowed",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Linking an account to the same referral account is not allowed."
            ]
          },
          {
            "Name": "IncorrectRewardCalculation",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Calculated rewards are more than the fee amount. This can happen if percentages are incorrectly set."
            ]
          },
          {
            "Name": "IncorrectRewardPercentage",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Given referrer and trader percentages exceeds 100% percent."
            ]
          },
          {
            "Name": "AlreadyRegistered",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The account has already a code registered."
            ]
          },
          {
            "Name": "PriceNotFound",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Price for given asset pair not found."
            ]
          },
          {
            "Name": "ConversionMinTradingAmountNotReached",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Minimum trading amount for conversion has not been reached."
            ]
          },
          {
            "Name": "ConversionZeroAmountReceived",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Zero amount received from conversion."
            ]
          }
        ],
        "Path": [
          "pallet_referrals",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "556": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "last_updated",
            "TypeName": "RelayChainBlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_xcm_rate_limiter",
          "AccumulatedAmount"
        ],
        "TypeDef": "Composite"
      },
      "557": {
        "Variants": null,
        "Path": [
          "pallet_xcm_rate_limiter",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "558": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 560
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 559
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "559": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 122
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "orml_tokens",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "560": {
        "TypeId": 559,
        "TypeDef": "Sequence"
      },
      "561": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "frozen",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "orml_tokens",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "562": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 564
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 563
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "563": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 122
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "orml_tokens",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 122
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "564": {
        "TypeId": 563,
        "TypeDef": "Sequence"
      },
      "565": {
        "Variants": [
          {
            "Name": "BalanceTooLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The balance is too low"
            ]
          },
          {
            "Name": "AmountIntoBalanceFailed",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot convert Amount into Balance type"
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed because liquidity restrictions due to locking"
            ]
          },
          {
            "Name": "MaxLocksExceeded",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Failed because the maximum locks was exceeded"
            ]
          },
          {
            "Name": "KeepAlive",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account"
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Value too low to create account due to existential deposit"
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist"
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7
          }
        ],
        "Path": [
          "orml_tokens",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "566": {
        "Variants": [
          {
            "Name": "AmountIntoBalanceFailed",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Unable to convert the Amount type into Balance."
            ]
          },
          {
            "Name": "BalanceTooLow",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Balance is too low."
            ]
          },
          {
            "Name": "DepositFailed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Deposit result is not expected"
            ]
          }
        ],
        "Path": [
          "pallet_currencies",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "567": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 347
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 126
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "568": {
        "Variants": [
          {
            "Name": "ZeroVestingPeriod",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting period is zero"
            ]
          },
          {
            "Name": "ZeroVestingPeriodCount",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Number of vests is zero"
            ]
          },
          {
            "Name": "InsufficientBalanceToLock",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Insufficient amount of balance to lock"
            ]
          },
          {
            "Name": "TooManyVestingSchedules",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "This account have too many vesting schedules"
            ]
          },
          {
            "Name": "AmountLow",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The vested transfer amount is too low"
            ]
          },
          {
            "Name": "MaxVestingSchedulesExceeded",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Failed because the maximum vesting schedules was exceeded"
            ]
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "569": {
        "TypeFields": [
          {
            "Name": "size",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "hash",
            "TypeName": "H256",
            "TypeId": 12
          }
        ],
        "Path": [
          "pallet_evm",
          "CodeMetadata"
        ],
        "TypeDef": "Composite"
      },
      "570": {
        "TypeIds": [
          129,
          12
        ],
        "TypeDef": "Tuple"
      },
      "571": {
        "Variants": [
          {
            "Name": "BalanceLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Not enough balance to perform action"
            ]
          },
          {
            "Name": "FeeOverflow",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Calculating total fee overflowed"
            ]
          },
          {
            "Name": "PaymentOverflow",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Calculating total payment overflowed"
            ]
          },
          {
            "Name": "WithdrawFailed",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Withdraw fee failed"
            ]
          },
          {
            "Name": "GasPriceTooLow",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Gas price is too low."
            ]
          },
          {
            "Name": "InvalidNonce",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Nonce is invalid"
            ]
          },
          {
            "Name": "GasLimitTooLow",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Gas limit is too low."
            ]
          },
          {
            "Name": "GasLimitTooHigh",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Gas limit is too high."
            ]
          },
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Undefined error."
            ]
          },
          {
            "Name": "Reentrancy",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "EVM reentrancy"
            ]
          },
          {
            "Name": "TransactionMustComeFromEOA",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "EIP-3607,"
            ]
          }
        ],
        "Path": [
          "pallet_evm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "572": {
        "TypeId": 573,
        "TypeDef": "Sequence"
      },
      "573": {
        "TypeIds": [
          355,
          574,
          579
        ],
        "TypeDef": "Tuple"
      },
      "574": {
        "TypeFields": [
          {
            "Name": "transaction_hash",
            "TypeName": "H256",
            "TypeId": 12
          },
          {
            "Name": "transaction_index",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "from",
            "TypeName": "H160",
            "TypeId": 129
          },
          {
            "Name": "to",
            "TypeName": "Option<H160>",
            "TypeId": 575
          },
          {
            "Name": "contract_address",
            "TypeName": "Option<H160>",
            "TypeId": 575
          },
          {
            "Name": "logs",
            "TypeName": "Vec<Log>",
            "TypeId": 576
          },
          {
            "Name": "logs_bloom",
            "TypeName": "Bloom",
            "TypeId": 577
          }
        ],
        "Path": [
          "fp_rpc",
          "TransactionStatus"
        ],
        "TypeDef": "Composite"
      },
      "575": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 129
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 129
          }
        ],
        "TypeDef": "Variant"
      },
      "576": {
        "TypeId": 128,
        "TypeDef": "Sequence"
      },
      "577": {
        "TypeFields": [
          {
            "TypeName": "[u8; BLOOM_SIZE]",
            "TypeId": 578
          }
        ],
        "Path": [
          "ethbloom",
          "Bloom"
        ],
        "TypeDef": "Composite"
      },
      "578": {
        "Length": 256,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "579": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "TypeName": "EIP658ReceiptData",
                "TypeId": 580
              }
            ],
            "Index": 0
          },
          {
            "Name": "EIP2930",
            "TypeFields": [
              {
                "TypeName": "EIP2930ReceiptData",
                "TypeId": 580
              }
            ],
            "Index": 1
          },
          {
            "Name": "EIP1559",
            "TypeFields": [
              {
                "TypeName": "EIP1559ReceiptData",
                "TypeId": 580
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "ethereum",
          "receipt",
          "ReceiptV3"
        ],
        "TypeDef": "Variant"
      },
      "580": {
        "TypeFields": [
          {
            "Name": "status_code",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "used_gas",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "logs_bloom",
            "TypeName": "Bloom",
            "TypeId": 577
          },
          {
            "Name": "logs",
            "TypeName": "Vec<Log>",
            "TypeId": 576
          }
        ],
        "Path": [
          "ethereum",
          "receipt",
          "EIP658ReceiptData"
        ],
        "TypeDef": "Composite"
      },
      "581": {
        "TypeFields": [
          {
            "Name": "header",
            "TypeName": "Header",
            "TypeId": 582
          },
          {
            "Name": "transactions",
            "TypeName": "Vec<T>",
            "TypeId": 584
          },
          {
            "Name": "ommers",
            "TypeName": "Vec<Header>",
            "TypeId": 585
          }
        ],
        "Path": [
          "ethereum",
          "block",
          "Block"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 355
          }
        ],
        "TypeDef": "Composite"
      },
      "582": {
        "TypeFields": [
          {
            "Name": "parent_hash",
            "TypeName": "H256",
            "TypeId": 12
          },
          {
            "Name": "ommers_hash",
            "TypeName": "H256",
            "TypeId": 12
          },
          {
            "Name": "beneficiary",
            "TypeName": "H160",
            "TypeId": 129
          },
          {
            "Name": "state_root",
            "TypeName": "H256",
            "TypeId": 12
          },
          {
            "Name": "transactions_root",
            "TypeName": "H256",
            "TypeId": 12
          },
          {
            "Name": "receipts_root",
            "TypeName": "H256",
            "TypeId": 12
          },
          {
            "Name": "logs_bloom",
            "TypeName": "Bloom",
            "TypeId": 577
          },
          {
            "Name": "difficulty",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "number",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "gas_limit",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "gas_used",
            "TypeName": "U256",
            "TypeId": 349
          },
          {
            "Name": "timestamp",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "extra_data",
            "TypeName": "Bytes",
            "TypeId": 13
          },
          {
            "Name": "mix_hash",
            "TypeName": "H256",
            "TypeId": 12
          },
          {
            "Name": "nonce",
            "TypeName": "H64",
            "TypeId": 583
          }
        ],
        "Path": [
          "ethereum",
          "header",
          "Header"
        ],
        "TypeDef": "Composite"
      },
      "583": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 122
          }
        ],
        "Path": [
          "ethereum_types",
          "hash",
          "H64"
        ],
        "TypeDef": "Composite"
      },
      "584": {
        "TypeId": 355,
        "TypeDef": "Sequence"
      },
      "585": {
        "TypeId": 582,
        "TypeDef": "Sequence"
      },
      "586": {
        "TypeId": 579,
        "TypeDef": "Sequence"
      },
      "587": {
        "TypeId": 574,
        "TypeDef": "Sequence"
      },
      "588": {
        "Variants": [
          {
            "Name": "InvalidSignature",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Signature is invalid."
            ]
          },
          {
            "Name": "PreLogExists",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Pre-log is present, therefore transact is not allowed."
            ]
          }
        ],
        "Path": [
          "pallet_ethereum",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "589": {
        "Variants": [
          {
            "Name": "TruncatedAccountAlreadyUsed",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "EVM Account's nonce is not zero"
            ]
          },
          {
            "Name": "AddressAlreadyBound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Address is already bound"
            ]
          },
          {
            "Name": "BoundAddressCannotBeUsed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Bound address cannot be used"
            ]
          },
          {
            "Name": "AddressNotWhitelisted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Address not whitelisted"
            ]
          }
        ],
        "Path": [
          "pallet_evm_accounts",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "590": {
        "Variants": [
          {
            "Name": "CantFindDepositOwner",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Nft pallet didn't return an owner."
            ]
          },
          {
            "Name": "InsufficientXykSharesBalance",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account balance of XYK pool shares is not sufficient."
            ]
          },
          {
            "Name": "XykPoolDoesntExist",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "XYK pool does not exist"
            ]
          },
          {
            "Name": "NotDepositOwner",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Account is not deposit owner."
            ]
          },
          {
            "Name": "CantGetXykAssets",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "XYK did not return assets for given pool id"
            ]
          },
          {
            "Name": "DepositDataNotFound",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Deposit data not found"
            ]
          },
          {
            "Name": "ZeroClaimedRewards",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Calculated reward to claim is 0."
            ]
          },
          {
            "Name": "AssetNotInAssetPair",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Asset is not in the `AssetPair`."
            ]
          },
          {
            "Name": "InvalidAssetPair",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Provided `AssetPair` is not used by the deposit."
            ]
          },
          {
            "Name": "AssetNotRegistered",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Asset is not registered in asset registry."
            ]
          },
          {
            "Name": "FailToGetPotId",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Failed to calculate `pot`'s account."
            ]
          }
        ],
        "Path": [
          "pallet_xyk_liquidity_mining",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "591": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "GlobalFarmId",
            "TypeId": 4
          },
          {
            "Name": "owner",
            "TypeName": "T::AccountId",
            "TypeId": 0
          },
          {
            "Name": "updated_at",
            "TypeName": "PeriodOf<T>",
            "TypeId": 4
          },
          {
            "Name": "total_shares_z",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "accumulated_rpz",
            "TypeName": "FixedU128",
            "TypeId": 86
          },
          {
            "Name": "reward_currency",
            "TypeName": "T::AssetId",
            "TypeId": 4
          },
          {
            "Name": "pending_rewards",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "accumulated_paid_rewards",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "yield_per_period",
            "TypeName": "Perquintill",
            "TypeId": 93
          },
          {
            "Name": "planned_yielding_periods",
            "TypeName": "PeriodOf<T>",
            "TypeId": 4
          },
          {
            "Name": "blocks_per_period",
            "TypeName": "BlockNumberFor<T>",
            "TypeId": 4
          },
          {
            "Name": "incentivized_asset",
            "TypeName": "T::AssetId",
            "TypeId": 4
          },
          {
            "Name": "max_reward_per_period",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "min_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "live_yield_farms_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_yield_farms_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "price_adjustment",
            "TypeName": "FixedU128",
            "TypeId": 86
          },
          {
            "Name": "state",
            "TypeName": "FarmState",
            "TypeId": 511
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "types",
          "GlobalFarmData"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Composite"
      },
      "592": {
        "TypeIds": [
          0,
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "593": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "FarmId",
            "TypeId": 4
          },
          {
            "Name": "updated_at",
            "TypeName": "PeriodOf<T>",
            "TypeId": 4
          },
          {
            "Name": "total_shares",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "total_valued_shares",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "accumulated_rpvs",
            "TypeName": "FixedU128",
            "TypeId": 86
          },
          {
            "Name": "accumulated_rpz",
            "TypeName": "FixedU128",
            "TypeId": 86
          },
          {
            "Name": "loyalty_curve",
            "TypeName": "Option<LoyaltyCurve>",
            "TypeId": 94
          },
          {
            "Name": "multiplier",
            "TypeName": "FarmMultiplier",
            "TypeId": 86
          },
          {
            "Name": "state",
            "TypeName": "FarmState",
            "TypeId": 511
          },
          {
            "Name": "entries_count",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "left_to_distribute",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "total_stopped",
            "TypeName": "PeriodOf<T>",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "types",
          "YieldFarmData"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Composite"
      },
      "594": {
        "TypeFields": [
          {
            "Name": "shares",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "amm_pool_id",
            "TypeName": "T::AmmPoolId",
            "TypeId": 0
          },
          {
            "Name": "yield_farm_entries",
            "TypeName": "BoundedVec<YieldFarmEntry<T, I>, T::MaxFarmEntriesPerDeposit>",
            "TypeId": 595
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "types",
          "DepositData"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Composite"
      },
      "595": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 597
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 596
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "596": {
        "TypeFields": [
          {
            "Name": "global_farm_id",
            "TypeName": "GlobalFarmId",
            "TypeId": 4
          },
          {
            "Name": "yield_farm_id",
            "TypeName": "YieldFarmId",
            "TypeId": 4
          },
          {
            "Name": "valued_shares",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "accumulated_rpvs",
            "TypeName": "FixedU128",
            "TypeId": 86
          },
          {
            "Name": "accumulated_claimed_rewards",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "entered_at",
            "TypeName": "PeriodOf<T>",
            "TypeId": 4
          },
          {
            "Name": "updated_at",
            "TypeName": "PeriodOf<T>",
            "TypeId": 4
          },
          {
            "Name": "stopped_at_creation",
            "TypeName": "PeriodOf<T>",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "types",
          "YieldFarmEntry"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Composite"
      },
      "597": {
        "TypeId": 596,
        "TypeDef": "Sequence"
      },
      "598": {
        "Variants": [
          {
            "Name": "GlobalFarmNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Global farm does not exist."
            ]
          },
          {
            "Name": "YieldFarmNotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Yield farm does not exist."
            ]
          },
          {
            "Name": "DoubleClaimInPeriod",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Multiple claims in the same period is not allowed."
            ]
          },
          {
            "Name": "LiquidityMiningCanceled",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Liquidity mining is canceled."
            ]
          },
          {
            "Name": "LiquidityMiningIsActive",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Liquidity mining is not canceled."
            ]
          },
          {
            "Name": "LiquidityMiningIsNotStopped",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Liquidity mining is in `active` or `terminated` state and action cannot be completed."
            ]
          },
          {
            "Name": "InvalidDepositAmount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "LP shares amount is not valid."
            ]
          },
          {
            "Name": "Forbidden",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Account is not allowed to perform action."
            ]
          },
          {
            "Name": "InvalidMultiplier",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Yield farm multiplier can't be 0."
            ]
          },
          {
            "Name": "YieldFarmAlreadyExists",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Yield farm with given `amm_pool_id` already exists in global farm."
            ]
          },
          {
            "Name": "InvalidInitialRewardPercentage",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Loyalty curve's initial reward percentage is not valid. Valid range is: [0, 1)."
            ]
          },
          {
            "Name": "GlobalFarmIsNotEmpty",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "One or more yield farms exist in global farm."
            ]
          },
          {
            "Name": "MissingIncentivizedAsset",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Farm's `incentivized_asset` is missing in provided asset pair."
            ]
          },
          {
            "Name": "InsufficientRewardCurrencyBalance",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Reward currency balance is not sufficient."
            ]
          },
          {
            "Name": "InvalidBlocksPerPeriod",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Blocks per period can't be 0."
            ]
          },
          {
            "Name": "InvalidYieldPerPeriod",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Yield per period can't be 0."
            ]
          },
          {
            "Name": "InvalidTotalRewards",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Total rewards is less than `MinTotalFarmRewards`."
            ]
          },
          {
            "Name": "InvalidPlannedYieldingPeriods",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Planned yielding periods is less than `MinPlannedYieldingPeriods`."
            ]
          },
          {
            "Name": "MaxEntriesPerDeposit",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Maximum number of locks reached for deposit."
            ]
          },
          {
            "Name": "DoubleLock",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Trying to lock LP shares into already locked yield farm."
            ]
          },
          {
            "Name": "YieldFarmEntryNotFound",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Yield farm entry doesn't exist for given deposit."
            ]
          },
          {
            "Name": "GlobalFarmIsFull",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Max number of yield farms in global farm was reached. Global farm can't accept new",
              "yield farms until some yield farm is not removed from storage."
            ]
          },
          {
            "Name": "InvalidMinDeposit",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Invalid min. deposit was set for global farm."
            ]
          },
          {
            "Name": "InvalidPriceAdjustment",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Price adjustment multiplier can't be 0."
            ]
          },
          {
            "Name": "ErrorGetAccountId",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Account creation from id failed."
            ]
          },
          {
            "Name": "IncorrectValuedShares",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "Value of deposited shares amount in reward currency is bellow min. limit."
            ]
          },
          {
            "Name": "RewardCurrencyNotRegistered",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "`reward_currency` is not registered in asset registry."
            ]
          },
          {
            "Name": "IncentivizedAssetNotRegistered",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "`incentivized_asset` is not registered in asset registry."
            ]
          },
          {
            "Name": "InconsistentState",
            "TypeFields": [
              {
                "TypeName": "InconsistentStateError",
                "TypeId": 519
              }
            ],
            "Index": 28,
            "Docs": [
              "Action cannot be completed because unexpected error has occurred. This should be reported",
              "to protocol maintainers."
            ]
          }
        ],
        "Path": [
          "pallet_liquidity_mining",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "599": {
        "TypeId": 600,
        "TypeDef": "Sequence"
      },
      "600": {
        "TypeFields": [
          {
            "Name": "used_bandwidth",
            "TypeName": "UsedBandwidth",
            "TypeId": 601
          },
          {
            "Name": "para_head_hash",
            "TypeName": "Option<H>",
            "TypeId": 299
          },
          {
            "Name": "consumed_go_ahead_signal",
            "TypeName": "Option<relay_chain::UpgradeGoAhead>",
            "TypeId": 606
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "Ancestor"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "601": {
        "TypeFields": [
          {
            "Name": "ump_msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "ump_total_bytes",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_outgoing",
            "TypeName": "BTreeMap<ParaId, HrmpChannelUpdate>",
            "TypeId": 602
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "UsedBandwidth"
        ],
        "TypeDef": "Composite"
      },
      "602": {
        "TypeFields": [
          {
            "TypeId": 604
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 200
          },
          {
            "Name": "V",
            "TypeId": 603
          }
        ],
        "TypeDef": "Composite"
      },
      "603": {
        "TypeFields": [
          {
            "Name": "msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_bytes",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "HrmpChannelUpdate"
        ],
        "TypeDef": "Composite"
      },
      "604": {
        "TypeId": 605,
        "TypeDef": "Sequence"
      },
      "605": {
        "TypeIds": [
          200,
          603
        ],
        "TypeDef": "Tuple"
      },
      "606": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 607
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 607
          }
        ],
        "TypeDef": "Variant"
      },
      "607": {
        "Variants": [
          {
            "Name": "Abort",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "GoAhead",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v5",
          "UpgradeGoAhead"
        ],
        "TypeDef": "Variant"
      },
      "608": {
        "TypeFields": [
          {
            "Name": "used_bandwidth",
            "TypeName": "UsedBandwidth",
            "TypeId": 601
          },
          {
            "Name": "hrmp_watermark",
            "TypeName": "Option<relay_chain::BlockNumber>",
            "TypeId": 112
          },
          {
            "Name": "consumed_go_ahead_signal",
            "TypeName": "Option<relay_chain::UpgradeGoAhead>",
            "TypeId": 606
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "SegmentTracker"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "609": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 610
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 610
          }
        ],
        "TypeDef": "Variant"
      },
      "610": {
        "Variants": [
          {
            "Name": "Present",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v5",
          "UpgradeRestriction"
        ],
        "TypeDef": "Variant"
      },
      "611": {
        "TypeFields": [
          {
            "Name": "dmq_mqc_head",
            "TypeName": "relay_chain::Hash",
            "TypeId": 12
          },
          {
            "Name": "relay_dispatch_queue_remaining_capacity",
            "TypeName": "RelayDispatchQueueRemainingCapacity",
            "TypeId": 612
          },
          {
            "Name": "ingress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 613
          },
          {
            "Name": "egress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 613
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "relay_state_snapshot",
          "MessagingStateSnapshot"
        ],
        "TypeDef": "Composite"
      },
      "612": {
        "TypeFields": [
          {
            "Name": "remaining_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "remaining_size",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "relay_state_snapshot",
          "RelayDispatchQueueRemainingCapacity"
        ],
        "TypeDef": "Composite"
      },
      "613": {
        "TypeId": 614,
        "TypeDef": "Sequence"
      },
      "614": {
        "TypeIds": [
          200,
          615
        ],
        "TypeDef": "Tuple"
      },
      "615": {
        "TypeFields": [
          {
            "Name": "max_capacity",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "mqc_head",
            "TypeName": "Option<Hash>",
            "TypeId": 299
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v5",
          "AbridgedHrmpChannel"
        ],
        "TypeDef": "Composite"
      },
      "616": {
        "TypeFields": [
          {
            "Name": "max_code_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_head_data_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_max_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_cooldown",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "async_backing_params",
            "TypeName": "super::vstaging::AsyncBackingParams",
            "TypeId": 617
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v5",
          "AbridgedHostConfiguration"
        ],
        "TypeDef": "Composite"
      },
      "617": {
        "TypeFields": [
          {
            "Name": "max_candidate_depth",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "allowed_ancestry_len",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "vstaging",
          "AsyncBackingParams"
        ],
        "TypeDef": "Composite"
      },
      "618": {
        "TypeFields": [
          {
            "TypeName": "RelayHash",
            "TypeId": 12
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "MessageQueueChain"
        ],
        "TypeDef": "Composite"
      },
      "619": {
        "TypeFields": [
          {
            "TypeId": 620
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 200
          },
          {
            "Name": "V",
            "TypeId": 618
          }
        ],
        "TypeDef": "Composite"
      },
      "620": {
        "TypeId": 621,
        "TypeDef": "Sequence"
      },
      "621": {
        "TypeIds": [
          200,
          618
        ],
        "TypeDef": "Tuple"
      },
      "622": {
        "TypeId": 623,
        "TypeDef": "Sequence"
      },
      "623": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "Id",
            "TypeId": 200
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 13
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "OutboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 200
          }
        ],
        "TypeDef": "Composite"
      },
      "624": {
        "TypeFields": [
          {
            "Name": "code_hash",
            "TypeName": "T::Hash",
            "TypeId": 12
          },
          {
            "Name": "check_version",
            "TypeName": "bool",
            "TypeId": 48
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "CodeUpgradeAuthorization"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "625": {
        "Variants": [
          {
            "Name": "OverlappingUpgrades",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Attempt to upgrade validation function while existing upgrade pending."
            ]
          },
          {
            "Name": "ProhibitedByPolkadot",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Polkadot currently prohibits this parachain from upgrading its validation function."
            ]
          },
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The supplied validation function has compiled into a blob larger than Polkadot is",
              "willing to run."
            ]
          },
          {
            "Name": "ValidationDataNotAvailable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The inherent which supplies the validation data did not run this block."
            ]
          },
          {
            "Name": "HostConfigurationNotAvailable",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The inherent which supplies the host configuration did not run this block."
            ]
          },
          {
            "Name": "NotScheduled",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No validation function upgrade is currently scheduled."
            ]
          },
          {
            "Name": "NothingAuthorized",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "No code upgrade has been authorized."
            ]
          },
          {
            "Name": "Unauthorized",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The given code upgrade has not been authorized."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "626": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 629
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 627
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "627": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 628
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 628
          }
        ],
        "TypeDef": "Variant"
      },
      "628": {
        "TypeFields": [
          {
            "Name": "maybe_id",
            "TypeName": "Option<Name>",
            "TypeId": 145
          },
          {
            "Name": "priority",
            "TypeName": "schedule::Priority",
            "TypeId": 2
          },
          {
            "Name": "call",
            "TypeName": "Call",
            "TypeId": 296
          },
          {
            "Name": "maybe_periodic",
            "TypeName": "Option<schedule::Period<BlockNumber>>",
            "TypeId": 99
          },
          {
            "Name": "origin",
            "TypeName": "PalletsOrigin",
            "TypeId": 420
          }
        ],
        "Path": [
          "pallet_scheduler",
          "Scheduled"
        ],
        "TypeParams": [
          {
            "Name": "Name",
            "TypeId": 1
          },
          {
            "Name": "Call",
            "TypeId": 296
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PalletsOrigin",
            "TypeId": 420
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "629": {
        "TypeId": 627,
        "TypeDef": "Sequence"
      },
      "630": {
        "Variants": [
          {
            "Name": "FailedToSchedule",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to schedule a call"
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot find the scheduled call."
            ]
          },
          {
            "Name": "TargetBlockNumberInPast",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Given target block number is in the past."
            ]
          },
          {
            "Name": "RescheduleNoChange",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Reschedule failed because it does not change scheduled time."
            ]
          },
          {
            "Name": "Named",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Attempt to use a non-named function on a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "631": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 101
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "632": {
        "Variants": [
          {
            "Name": "ScheduleNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Schedule not exist"
            ]
          },
          {
            "Name": "MinTradeAmountNotReached",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The min trade amount is not reached"
            ]
          },
          {
            "Name": "Forbidden",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Forbidden as the user is not the owner of the schedule"
            ]
          },
          {
            "Name": "BlockNumberIsNotInFuture",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The next execution block number is not in the future"
            ]
          },
          {
            "Name": "PriceUnstable",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Price is unstable as price change from oracle data is bigger than max allowed"
            ]
          },
          {
            "Name": "CalculatingPriceError",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Error occurred when calculating price"
            ]
          },
          {
            "Name": "TotalAmountIsSmallerThanMinBudget",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The total amount to be reserved is smaller than min budget"
            ]
          },
          {
            "Name": "BudgetTooLow",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The budget is too low for executing one DCA"
            ]
          },
          {
            "Name": "NoFreeBlockFound",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "There is no free block found to plan DCA execution"
            ]
          },
          {
            "Name": "ManuallyTerminated",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The DCA schedule has been manually terminated"
            ]
          },
          {
            "Name": "MaxRetryReached",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Max number of retries reached for schedule"
            ]
          },
          {
            "Name": "TradeLimitReached",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Absolutely trade limit reached reached, leading to retry"
            ]
          },
          {
            "Name": "SlippageLimitReached",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Slippage limit calculated from oracle is reached, leading to retry"
            ]
          },
          {
            "Name": "NoParentHashFound",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "No parent hash has been found from relay chain"
            ]
          },
          {
            "Name": "InvalidState",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Error that should not really happen only in case of invalid state of the schedule storage entries"
            ]
          }
        ],
        "Path": [
          "pallet_dca",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "633": {
        "Variants": [
          {
            "Name": "Pending",
            "TypeFields": [
              {
                "Name": "responder",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 197
              },
              {
                "Name": "maybe_match_querier",
                "TypeName": "Option<VersionedMultiLocation>",
                "TypeId": 634
              },
              {
                "Name": "maybe_notify",
                "TypeName": "Option<(u8, u8)>",
                "TypeId": 635
              },
              {
                "Name": "timeout",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "VersionNotifier",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "VersionedMultiLocation",
                "TypeId": 197
              },
              {
                "Name": "is_active",
                "TypeName": "bool",
                "TypeId": 48
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ready",
            "TypeFields": [
              {
                "Name": "response",
                "TypeName": "VersionedResponse",
                "TypeId": 637
              },
              {
                "Name": "at",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "QueryStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "634": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 197
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 197
          }
        ],
        "TypeDef": "Variant"
      },
      "635": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 636
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 636
          }
        ],
        "TypeDef": "Variant"
      },
      "636": {
        "TypeIds": [
          2,
          2
        ],
        "TypeDef": "Tuple"
      },
      "637": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Response",
                "TypeId": 390
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Response",
                "TypeId": 166
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "VersionedResponse"
        ],
        "TypeDef": "Variant"
      },
      "638": {
        "TypeIds": [
          4,
          197
        ],
        "TypeDef": "Tuple"
      },
      "639": {
        "TypeIds": [
          11,
          9,
          4
        ],
        "TypeDef": "Tuple"
      },
      "640": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 642
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 641
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "641": {
        "TypeIds": [
          197,
          4
        ],
        "TypeDef": "Tuple"
      },
      "642": {
        "TypeId": 641,
        "TypeDef": "Sequence"
      },
      "643": {
        "Variants": [
          {
            "Name": "MigrateSupportedVersion",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "MigrateVersionNotifiers",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotifyCurrentTargets",
            "TypeFields": [
              {
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 644
              }
            ],
            "Index": 2
          },
          {
            "Name": "MigrateAndNotifyOldTargets",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "VersionMigrationStage"
        ],
        "TypeDef": "Variant"
      },
      "644": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 13
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 13
          }
        ],
        "TypeDef": "Variant"
      },
      "645": {
        "TypeIds": [
          4,
          0,
          646
        ],
        "TypeDef": "Tuple"
      },
      "646": {
        "Variants": [
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::AssetId",
                "TypeId": 162
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "VersionedAssetId"
        ],
        "TypeDef": "Variant"
      },
      "647": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "owner",
            "TypeName": "VersionedMultiLocation",
            "TypeId": 197
          },
          {
            "Name": "locker",
            "TypeName": "VersionedMultiLocation",
            "TypeId": 197
          },
          {
            "Name": "consumers",
            "TypeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>",
            "TypeId": 648
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "RemoteLockedFungibleRecord"
        ],
        "TypeParams": [
          {
            "Name": "ConsumerIdentifier",
            "TypeId": 36
          },
          {
            "Name": "MaxConsumers"
          }
        ],
        "TypeDef": "Composite"
      },
      "648": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 650
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 649
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "649": {
        "TypeIds": [
          36,
          6
        ],
        "TypeDef": "Tuple"
      },
      "650": {
        "TypeId": 649,
        "TypeDef": "Sequence"
      },
      "651": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 653
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 652
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "652": {
        "TypeIds": [
          6,
          197
        ],
        "TypeDef": "Tuple"
      },
      "653": {
        "TypeId": 652,
        "TypeDef": "Sequence"
      },
      "654": {
        "Variants": [
          {
            "Name": "Unreachable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The desired destination was unreachable, generally because there is a no way of routing",
              "to it."
            ]
          },
          {
            "Name": "SendFailure",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "There was some other issue (i.e. not to do with routing) in sending the message.",
              "Perhaps a lack of space for buffering the message."
            ]
          },
          {
            "Name": "Filtered",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The message execution fails the filter."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The destination `MultiLocation` provided cannot be inverted."
            ]
          },
          {
            "Name": "Empty",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The assets to be sent are empty."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the destination chain."
            ]
          },
          {
            "Name": "TooManyAssets",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too many assets have been attempted for transfer."
            ]
          },
          {
            "Name": "InvalidOrigin",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Origin is invalid for sending."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The version of the `Versioned` value used is not able to be interpreted."
            ]
          },
          {
            "Name": "BadLocation",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The given location could not be used (e.g. because it cannot be expressed in the",
              "desired version of XCM)."
            ]
          },
          {
            "Name": "NoSubscription",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referenced subscription could not be found."
            ]
          },
          {
            "Name": "AlreadySubscribed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The location is invalid since it already has a subscription from us."
            ]
          },
          {
            "Name": "InvalidAsset",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Invalid asset for the operation."
            ]
          },
          {
            "Name": "LowBalance",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The owner does not own (all) of the asset that they wish to do the operation on."
            ]
          },
          {
            "Name": "TooManyLocks",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset owner has too many locks on the asset."
            ]
          },
          {
            "Name": "AccountNotSovereign",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The given account is not an identifiable sovereign account for any location."
            ]
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The operation required fees to be paid which the initiator could not meet."
            ]
          },
          {
            "Name": "LockNotFound",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "A remote lock with the corresponding data could not be found."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The unlock operation cannot succeed because there are still consumers of the lock."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "655": {
        "Variants": null,
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "656": {
        "TypeId": 657,
        "TypeDef": "Sequence"
      },
      "657": {
        "TypeFields": [
          {
            "Name": "sender",
            "TypeName": "ParaId",
            "TypeId": 200
          },
          {
            "Name": "state",
            "TypeName": "InboundState",
            "TypeId": 658
          },
          {
            "Name": "message_metadata",
            "TypeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>",
            "TypeId": 659
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "InboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "658": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "InboundState"
        ],
        "TypeDef": "Variant"
      },
      "659": {
        "TypeId": 660,
        "TypeDef": "Sequence"
      },
      "660": {
        "TypeIds": [
          4,
          661
        ],
        "TypeDef": "Tuple"
      },
      "661": {
        "Variants": [
          {
            "Name": "ConcatenatedVersionedXcm",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ConcatenatedEncodedBlob",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Signals",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "polkadot_parachain_primitives",
          "primitives",
          "XcmpMessageFormat"
        ],
        "TypeDef": "Variant"
      },
      "662": {
        "TypeIds": [
          200,
          4
        ],
        "TypeDef": "Tuple"
      },
      "663": {
        "TypeId": 664,
        "TypeDef": "Sequence"
      },
      "664": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "ParaId",
            "TypeId": 200
          },
          {
            "Name": "state",
            "TypeName": "OutboundState",
            "TypeId": 665
          },
          {
            "Name": "signals_exist",
            "TypeName": "bool",
            "TypeId": 48
          },
          {
            "Name": "first_index",
            "TypeName": "u16",
            "TypeId": 53
          },
          {
            "Name": "last_index",
            "TypeName": "u16",
            "TypeId": 53
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "665": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundState"
        ],
        "TypeDef": "Variant"
      },
      "666": {
        "TypeIds": [
          200,
          53
        ],
        "TypeDef": "Tuple"
      },
      "667": {
        "TypeFields": [
          {
            "Name": "suspend_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "drop_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "resume_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "threshold_weight",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "weight_restrict_decay",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "xcmp_max_individual_weight",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "QueueConfigData"
        ],
        "TypeDef": "Composite"
      },
      "668": {
        "TypeIds": [
          200,
          4,
          13
        ],
        "TypeDef": "Tuple"
      },
      "669": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 670
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 201
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "670": {
        "TypeFields": [
          {
            "TypeId": 671
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 201
          }
        ],
        "TypeDef": "Composite"
      },
      "671": {
        "TypeId": 201,
        "TypeDef": "Sequence"
      },
      "672": {
        "TypeIds": [
          200,
          201
        ],
        "TypeDef": "Tuple"
      },
      "673": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 676
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 674
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "674": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 675
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 675
          }
        ],
        "TypeDef": "Variant"
      },
      "675": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "RelayBlockNumber",
            "TypeId": 4
          },
          {
            "Name": "deferred_to",
            "TypeName": "RelayBlockNumber",
            "TypeId": 4
          },
          {
            "Name": "sender",
            "TypeName": "ParaId",
            "TypeId": 200
          },
          {
            "Name": "xcm",
            "TypeName": "VersionedXcm<TRuntimeCall>",
            "TypeId": 398
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "DeferredMessage"
        ],
        "TypeParams": [
          {
            "Name": "TRuntimeCall",
            "TypeId": 253
          }
        ],
        "TypeDef": "Composite"
      },
      "676": {
        "TypeId": 674,
        "TypeDef": "Sequence"
      },
      "677": {
        "Variants": [
          {
            "Name": "FailedToSend",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to send XCM message."
            ]
          },
          {
            "Name": "BadXcmOrigin",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Bad XCM origin."
            ]
          },
          {
            "Name": "BadXcm",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Bad XCM data."
            ]
          },
          {
            "Name": "BadOverweightIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Bad overweight index."
            ]
          },
          {
            "Name": "WeightOverLimit",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Provided weight is possibly not enough to execute the message."
            ]
          },
          {
            "Name": "MessageNotFound",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Indicated message is not present."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "678": {
        "TypeFields": [
          {
            "Name": "max_individual",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "ConfigData"
        ],
        "TypeDef": "Composite"
      },
      "679": {
        "TypeFields": [
          {
            "Name": "begin_used",
            "TypeName": "PageCounter",
            "TypeId": 4
          },
          {
            "Name": "end_used",
            "TypeName": "PageCounter",
            "TypeId": 4
          },
          {
            "Name": "overweight_count",
            "TypeName": "OverweightIndex",
            "TypeId": 11
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "PageIndexData"
        ],
        "TypeDef": "Composite"
      },
      "680": {
        "TypeId": 681,
        "TypeDef": "Sequence"
      },
      "681": {
        "TypeIds": [
          4,
          13
        ],
        "TypeDef": "Tuple"
      },
      "682": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The message index given is unknown."
            ]
          },
          {
            "Name": "OverLimit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The amount of weight given is possibly not enough for executing the message."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_dmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "683": {
        "Variants": [
          {
            "Name": "Unreachable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The message and destination combination was not recognized as being",
              "reachable."
            ]
          },
          {
            "Name": "SendFailure",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The message and destination was recognized as being reachable but",
              "the operation could not be completed."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The version of the `Versioned` value used is not able to be",
              "interpreted."
            ]
          }
        ],
        "Path": [
          "orml_xcm",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "684": {
        "Variants": [
          {
            "Name": "AssetHasNoReserve",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Asset has no reserve location."
            ]
          },
          {
            "Name": "NotCrossChainTransfer",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not cross-chain transfer."
            ]
          },
          {
            "Name": "InvalidDest",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Invalid transfer destination."
            ]
          },
          {
            "Name": "NotCrossChainTransferableCurrency",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Currency is not cross-chain transferable."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "XcmExecutionFailed",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "XCM execution failed."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the",
              "destination chain."
            ]
          },
          {
            "Name": "InvalidAncestry",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Could not get ancestry of asset reserve location."
            ]
          },
          {
            "Name": "InvalidAsset",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The MultiAsset is invalid."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The destination `MultiLocation` provided cannot be inverted."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The version of the `Versioned` value used is not able to be",
              "interpreted."
            ]
          },
          {
            "Name": "DistinctReserveForAssetAndFee",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "We tried sending distinct asset and fee but they have different",
              "reserve chains."
            ]
          },
          {
            "Name": "ZeroFee",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The fee is zero."
            ]
          },
          {
            "Name": "ZeroAmount",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The transfering asset amount is zero."
            ]
          },
          {
            "Name": "TooManyAssetsBeingSent",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The number of assets to be sent is over the maximum."
            ]
          },
          {
            "Name": "AssetIndexNonExistent",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The specified index does not exist in a MultiAssets struct."
            ]
          },
          {
            "Name": "FeeNotEnough",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Fee is not enough."
            ]
          },
          {
            "Name": "NotSupportedMultiLocation",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Not supported MultiLocation"
            ]
          },
          {
            "Name": "MinXcmFeeNotDefined",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "MinXcmFee not registered for certain reserve location"
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "685": {
        "TypeIds": [
          72,
          72
        ],
        "TypeDef": "Tuple"
      },
      "686": {
        "TypeIds": [
          72,
          13
        ],
        "TypeDef": "Tuple"
      },
      "687": {
        "Variants": [
          {
            "Name": "BalanceTooLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The balance is too low."
            ]
          },
          {
            "Name": "BalanceOverflow",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The operation will cause balance to overflow."
            ]
          },
          {
            "Name": "UnhandledAsset",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Unhandled asset."
            ]
          }
        ],
        "Path": [
          "orml_unknown_tokens",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "688": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 690
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 689
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "689": {
        "TypeFields": [
          {
            "Name": "who",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_collator_selection",
          "pallet",
          "CandidateInfo"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "690": {
        "TypeId": 689,
        "TypeDef": "Sequence"
      },
      "691": {
        "Variants": [
          {
            "Name": "TooManyCandidates",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The pallet has too many candidates."
            ]
          },
          {
            "Name": "TooFewEligibleCollators",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Leaving would result in too few candidates."
            ]
          },
          {
            "Name": "AlreadyCandidate",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Account is already a candidate."
            ]
          },
          {
            "Name": "NotCandidate",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Account is not a candidate."
            ]
          },
          {
            "Name": "TooManyInvulnerables",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many Invulnerables."
            ]
          },
          {
            "Name": "AlreadyInvulnerable",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Account is already an Invulnerable."
            ]
          },
          {
            "Name": "NotInvulnerable",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Account is not an Invulnerable."
            ]
          },
          {
            "Name": "NoAssociatedValidatorId",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Account has no associated validator ID."
            ]
          },
          {
            "Name": "ValidatorNotRegistered",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Validator ID is not yet registered."
            ]
          }
        ],
        "Path": [
          "pallet_collator_selection",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "692": {
        "TypeId": 693,
        "TypeDef": "Sequence"
      },
      "693": {
        "TypeIds": [
          0,
          414
        ],
        "TypeDef": "Tuple"
      },
      "694": {
        "TypeIds": [
          695,
          13
        ],
        "TypeDef": "Tuple"
      },
      "695": {
        "TypeFields": [
          {
            "TypeName": "[u8; 4]",
            "TypeId": 17
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "KeyTypeId"
        ],
        "TypeDef": "Composite"
      },
      "696": {
        "Variants": [
          {
            "Name": "InvalidProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Invalid ownership proof."
            ]
          },
          {
            "Name": "NoAssociatedValidatorId",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No associated validator ID for account."
            ]
          },
          {
            "Name": "DuplicatedKey",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Registered duplicate key."
            ]
          },
          {
            "Name": "NoKeys",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "No keys are associated with this account."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Key setting account is not live, so it's impossible to associate keys."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the session pallet."
        ]
      },
      "697": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 698
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 415
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "698": {
        "TypeId": 415,
        "TypeDef": "Sequence"
      },
      "699": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "Slot"
        ],
        "TypeDef": "Composite"
      },
      "700": {
        "TypeIds": [
          699,
          4
        ],
        "TypeDef": "Tuple"
      },
      "701": {
        "Variants": null,
        "Path": [
          "pallet_relaychain_info",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "702": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 708
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 703
          },
          {
            "Name": "V",
            "TypeId": 704
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "703": {
        "TypeIds": [
          122,
          98
        ],
        "TypeDef": "Tuple"
      },
      "704": {
        "TypeFields": [
          {
            "Name": "price",
            "TypeName": "Price",
            "TypeId": 705
          },
          {
            "Name": "volume",
            "TypeName": "Volume<Balance>",
            "TypeId": 706
          },
          {
            "Name": "liquidity",
            "TypeName": "Liquidity<Balance>",
            "TypeId": 707
          },
          {
            "Name": "updated_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_ema_oracle",
          "types",
          "OracleEntry"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "705": {
        "TypeFields": [
          {
            "Name": "n",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "d",
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "hydra_dx_math",
          "ratio",
          "Ratio"
        ],
        "TypeDef": "Composite"
      },
      "706": {
        "TypeFields": [
          {
            "Name": "a_in",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "b_out",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "a_out",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "b_in",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "hydradx_traits",
          "oracle",
          "Volume"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "707": {
        "TypeFields": [
          {
            "Name": "a",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "b",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "hydradx_traits",
          "oracle",
          "Liquidity"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "708": {
        "TypeFields": [
          {
            "TypeId": 709
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 703
          },
          {
            "Name": "V",
            "TypeId": 704
          }
        ],
        "TypeDef": "Composite"
      },
      "709": {
        "TypeId": 710,
        "TypeDef": "Sequence"
      },
      "710": {
        "TypeIds": [
          703,
          704
        ],
        "TypeDef": "Tuple"
      },
      "711": {
        "TypeIds": [
          122,
          98,
          520
        ],
        "TypeDef": "Tuple"
      },
      "712": {
        "TypeIds": [
          704,
          4
        ],
        "TypeDef": "Tuple"
      },
      "713": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 714
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 703
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "714": {
        "TypeFields": [
          {
            "TypeId": 715
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 703
          }
        ],
        "TypeDef": "Composite"
      },
      "715": {
        "TypeId": 703,
        "TypeDef": "Sequence"
      },
      "716": {
        "Variants": [
          {
            "Name": "TooManyUniqueEntries",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "OnTradeValueZero",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "OracleNotFound",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_ema_oracle",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "717": {
        "Variants": [
          {
            "Name": "UnsupportedCurrency",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Selected currency is not supported."
            ]
          },
          {
            "Name": "ZeroBalance",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account balance should be non-zero."
            ]
          },
          {
            "Name": "AlreadyAccepted",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Currency is already in the list of accepted currencies."
            ]
          },
          {
            "Name": "CoreAssetNotAllowed",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "It is not allowed to add Core Asset as accepted currency. Core asset is accepted by design."
            ]
          },
          {
            "Name": "ZeroPrice",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Fallback price cannot be zero."
            ]
          },
          {
            "Name": "FallbackPriceNotFound",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Fallback price was not found."
            ]
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Math overflow"
            ]
          },
          {
            "Name": "EvmAccountNotAllowed",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "It is not allowed to change payment currency of an EVM account."
            ]
          },
          {
            "Name": "EvmPermitExpired",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "EVM permit expired."
            ]
          },
          {
            "Name": "EvmPermitInvalid",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "EVM permit is invalid."
            ]
          },
          {
            "Name": "EvmPermitCallExecutionError",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "EVM permit call failed."
            ]
          },
          {
            "Name": "EvmPermitRunnerError",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "EVM permit call failed."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_multi_payment",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "718": {
        "TypeFields": [
          {
            "TypeName": "sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>",
            "TypeId": 734
          }
        ],
        "Path": [
          "fp_self_contained",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 0
          },
          {
            "Name": "Call",
            "TypeId": 253
          },
          {
            "Name": "Signature",
            "TypeId": 719
          },
          {
            "Name": "Extra",
            "TypeId": 724
          }
        ],
        "TypeDef": "Composite"
      },
      "719": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Signature",
                "TypeId": 720
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Signature",
                "TypeId": 722
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Signature",
                "TypeId": 723
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "MultiSignature"
        ],
        "TypeDef": "Variant"
      },
      "720": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 721
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "721": {
        "Length": 64,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "722": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 721
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "723": {
        "TypeFields": [
          {
            "TypeName": "[u8; 65]",
            "TypeId": 323
          }
        ],
        "Path": [
          "sp_core",
          "ecdsa",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "724": {
        "TypeIds": [
          725,
          726,
          727,
          728,
          730,
          731,
          732,
          733
        ],
        "TypeDef": "Tuple"
      },
      "725": {
        "Path": [
          "frame_system",
          "extensions",
          "check_spec_version",
          "CheckSpecVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "726": {
        "Path": [
          "frame_system",
          "extensions",
          "check_tx_version",
          "CheckTxVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "727": {
        "Path": [
          "frame_system",
          "extensions",
          "check_genesis",
          "CheckGenesis"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "728": {
        "TypeFields": [
          {
            "TypeName": "Era",
            "TypeId": 729
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_mortality",
          "CheckMortality"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "729": {
        "Variants": [
          {
            "Name": "Immortal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mortal1",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "Mortal2",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 2
          },
          {
            "Name": "Mortal3",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "Mortal4",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "Mortal5",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "Mortal6",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "Mortal7",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "Mortal8",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "Mortal9",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "Mortal10",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "Mortal11",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 11
          },
          {
            "Name": "Mortal12",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 12
          },
          {
            "Name": "Mortal13",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 13
          },
          {
            "Name": "Mortal14",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 14
          },
          {
            "Name": "Mortal15",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 15
          },
          {
            "Name": "Mortal16",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 16
          },
          {
            "Name": "Mortal17",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 17
          },
          {
            "Name": "Mortal18",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 18
          },
          {
            "Name": "Mortal19",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 19
          },
          {
            "Name": "Mortal20",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 20
          },
          {
            "Name": "Mortal21",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 21
          },
          {
            "Name": "Mortal22",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 22
          },
          {
            "Name": "Mortal23",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 23
          },
          {
            "Name": "Mortal24",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 24
          },
          {
            "Name": "Mortal25",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 25
          },
          {
            "Name": "Mortal26",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 26
          },
          {
            "Name": "Mortal27",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 27
          },
          {
            "Name": "Mortal28",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 28
          },
          {
            "Name": "Mortal29",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 29
          },
          {
            "Name": "Mortal30",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 30
          },
          {
            "Name": "Mortal31",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 31
          },
          {
            "Name": "Mortal32",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 32
          },
          {
            "Name": "Mortal33",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 33
          },
          {
            "Name": "Mortal34",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 34
          },
          {
            "Name": "Mortal35",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 35
          },
          {
            "Name": "Mortal36",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 36
          },
          {
            "Name": "Mortal37",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 37
          },
          {
            "Name": "Mortal38",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 38
          },
          {
            "Name": "Mortal39",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 39
          },
          {
            "Name": "Mortal40",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 40
          },
          {
            "Name": "Mortal41",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 41
          },
          {
            "Name": "Mortal42",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 42
          },
          {
            "Name": "Mortal43",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 43
          },
          {
            "Name": "Mortal44",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 44
          },
          {
            "Name": "Mortal45",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 45
          },
          {
            "Name": "Mortal46",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 46
          },
          {
            "Name": "Mortal47",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 47
          },
          {
            "Name": "Mortal48",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 48
          },
          {
            "Name": "Mortal49",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 49
          },
          {
            "Name": "Mortal50",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 50
          },
          {
            "Name": "Mortal51",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 51
          },
          {
            "Name": "Mortal52",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 52
          },
          {
            "Name": "Mortal53",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 53
          },
          {
            "Name": "Mortal54",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 54
          },
          {
            "Name": "Mortal55",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 55
          },
          {
            "Name": "Mortal56",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 56
          },
          {
            "Name": "Mortal57",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 57
          },
          {
            "Name": "Mortal58",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 58
          },
          {
            "Name": "Mortal59",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 59
          },
          {
            "Name": "Mortal60",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 60
          },
          {
            "Name": "Mortal61",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 61
          },
          {
            "Name": "Mortal62",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 62
          },
          {
            "Name": "Mortal63",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 63
          },
          {
            "Name": "Mortal64",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 64
          },
          {
            "Name": "Mortal65",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 65
          },
          {
            "Name": "Mortal66",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 66
          },
          {
            "Name": "Mortal67",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 67
          },
          {
            "Name": "Mortal68",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 68
          },
          {
            "Name": "Mortal69",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 69
          },
          {
            "Name": "Mortal70",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 70
          },
          {
            "Name": "Mortal71",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 71
          },
          {
            "Name": "Mortal72",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 72
          },
          {
            "Name": "Mortal73",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 73
          },
          {
            "Name": "Mortal74",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 74
          },
          {
            "Name": "Mortal75",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 75
          },
          {
            "Name": "Mortal76",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 76
          },
          {
            "Name": "Mortal77",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 77
          },
          {
            "Name": "Mortal78",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 78
          },
          {
            "Name": "Mortal79",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 79
          },
          {
            "Name": "Mortal80",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 80
          },
          {
            "Name": "Mortal81",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 81
          },
          {
            "Name": "Mortal82",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 82
          },
          {
            "Name": "Mortal83",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 83
          },
          {
            "Name": "Mortal84",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 84
          },
          {
            "Name": "Mortal85",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 85
          },
          {
            "Name": "Mortal86",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 86
          },
          {
            "Name": "Mortal87",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 87
          },
          {
            "Name": "Mortal88",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 88
          },
          {
            "Name": "Mortal89",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 89
          },
          {
            "Name": "Mortal90",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 90
          },
          {
            "Name": "Mortal91",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 91
          },
          {
            "Name": "Mortal92",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 92
          },
          {
            "Name": "Mortal93",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 93
          },
          {
            "Name": "Mortal94",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 94
          },
          {
            "Name": "Mortal95",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 95
          },
          {
            "Name": "Mortal96",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 96
          },
          {
            "Name": "Mortal97",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 97
          },
          {
            "Name": "Mortal98",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 98
          },
          {
            "Name": "Mortal99",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 99
          },
          {
            "Name": "Mortal100",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 100
          },
          {
            "Name": "Mortal101",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 101
          },
          {
            "Name": "Mortal102",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 102
          },
          {
            "Name": "Mortal103",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 103
          },
          {
            "Name": "Mortal104",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 104
          },
          {
            "Name": "Mortal105",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 105
          },
          {
            "Name": "Mortal106",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 106
          },
          {
            "Name": "Mortal107",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 107
          },
          {
            "Name": "Mortal108",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 108
          },
          {
            "Name": "Mortal109",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 109
          },
          {
            "Name": "Mortal110",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 110
          },
          {
            "Name": "Mortal111",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 111
          },
          {
            "Name": "Mortal112",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 112
          },
          {
            "Name": "Mortal113",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 113
          },
          {
            "Name": "Mortal114",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 114
          },
          {
            "Name": "Mortal115",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 115
          },
          {
            "Name": "Mortal116",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 116
          },
          {
            "Name": "Mortal117",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 117
          },
          {
            "Name": "Mortal118",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 118
          },
          {
            "Name": "Mortal119",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 119
          },
          {
            "Name": "Mortal120",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 120
          },
          {
            "Name": "Mortal121",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 121
          },
          {
            "Name": "Mortal122",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 122
          },
          {
            "Name": "Mortal123",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 123
          },
          {
            "Name": "Mortal124",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 124
          },
          {
            "Name": "Mortal125",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 125
          },
          {
            "Name": "Mortal126",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 126
          },
          {
            "Name": "Mortal127",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 127
          },
          {
            "Name": "Mortal128",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 128
          },
          {
            "Name": "Mortal129",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 129
          },
          {
            "Name": "Mortal130",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 130
          },
          {
            "Name": "Mortal131",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 131
          },
          {
            "Name": "Mortal132",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 132
          },
          {
            "Name": "Mortal133",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 133
          },
          {
            "Name": "Mortal134",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 134
          },
          {
            "Name": "Mortal135",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 135
          },
          {
            "Name": "Mortal136",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 136
          },
          {
            "Name": "Mortal137",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 137
          },
          {
            "Name": "Mortal138",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 138
          },
          {
            "Name": "Mortal139",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 139
          },
          {
            "Name": "Mortal140",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 140
          },
          {
            "Name": "Mortal141",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 141
          },
          {
            "Name": "Mortal142",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 142
          },
          {
            "Name": "Mortal143",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 143
          },
          {
            "Name": "Mortal144",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 144
          },
          {
            "Name": "Mortal145",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 145
          },
          {
            "Name": "Mortal146",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 146
          },
          {
            "Name": "Mortal147",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 147
          },
          {
            "Name": "Mortal148",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 148
          },
          {
            "Name": "Mortal149",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 149
          },
          {
            "Name": "Mortal150",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 150
          },
          {
            "Name": "Mortal151",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 151
          },
          {
            "Name": "Mortal152",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 152
          },
          {
            "Name": "Mortal153",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 153
          },
          {
            "Name": "Mortal154",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 154
          },
          {
            "Name": "Mortal155",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 155
          },
          {
            "Name": "Mortal156",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 156
          },
          {
            "Name": "Mortal157",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 157
          },
          {
            "Name": "Mortal158",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 158
          },
          {
            "Name": "Mortal159",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 159
          },
          {
            "Name": "Mortal160",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 160
          },
          {
            "Name": "Mortal161",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 161
          },
          {
            "Name": "Mortal162",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 162
          },
          {
            "Name": "Mortal163",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 163
          },
          {
            "Name": "Mortal164",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 164
          },
          {
            "Name": "Mortal165",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 165
          },
          {
            "Name": "Mortal166",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 166
          },
          {
            "Name": "Mortal167",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 167
          },
          {
            "Name": "Mortal168",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 168
          },
          {
            "Name": "Mortal169",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 169
          },
          {
            "Name": "Mortal170",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 170
          },
          {
            "Name": "Mortal171",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 171
          },
          {
            "Name": "Mortal172",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 172
          },
          {
            "Name": "Mortal173",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 173
          },
          {
            "Name": "Mortal174",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 174
          },
          {
            "Name": "Mortal175",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 175
          },
          {
            "Name": "Mortal176",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 176
          },
          {
            "Name": "Mortal177",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 177
          },
          {
            "Name": "Mortal178",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 178
          },
          {
            "Name": "Mortal179",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 179
          },
          {
            "Name": "Mortal180",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 180
          },
          {
            "Name": "Mortal181",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 181
          },
          {
            "Name": "Mortal182",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 182
          },
          {
            "Name": "Mortal183",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 183
          },
          {
            "Name": "Mortal184",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 184
          },
          {
            "Name": "Mortal185",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 185
          },
          {
            "Name": "Mortal186",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 186
          },
          {
            "Name": "Mortal187",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 187
          },
          {
            "Name": "Mortal188",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 188
          },
          {
            "Name": "Mortal189",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 189
          },
          {
            "Name": "Mortal190",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 190
          },
          {
            "Name": "Mortal191",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 191
          },
          {
            "Name": "Mortal192",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 192
          },
          {
            "Name": "Mortal193",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 193
          },
          {
            "Name": "Mortal194",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 194
          },
          {
            "Name": "Mortal195",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 195
          },
          {
            "Name": "Mortal196",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 196
          },
          {
            "Name": "Mortal197",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 197
          },
          {
            "Name": "Mortal198",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 198
          },
          {
            "Name": "Mortal199",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 199
          },
          {
            "Name": "Mortal200",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 200
          },
          {
            "Name": "Mortal201",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 201
          },
          {
            "Name": "Mortal202",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 202
          },
          {
            "Name": "Mortal203",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 203
          },
          {
            "Name": "Mortal204",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 204
          },
          {
            "Name": "Mortal205",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 205
          },
          {
            "Name": "Mortal206",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 206
          },
          {
            "Name": "Mortal207",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 207
          },
          {
            "Name": "Mortal208",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 208
          },
          {
            "Name": "Mortal209",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 209
          },
          {
            "Name": "Mortal210",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 210
          },
          {
            "Name": "Mortal211",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 211
          },
          {
            "Name": "Mortal212",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 212
          },
          {
            "Name": "Mortal213",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 213
          },
          {
            "Name": "Mortal214",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 214
          },
          {
            "Name": "Mortal215",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 215
          },
          {
            "Name": "Mortal216",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 216
          },
          {
            "Name": "Mortal217",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 217
          },
          {
            "Name": "Mortal218",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 218
          },
          {
            "Name": "Mortal219",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 219
          },
          {
            "Name": "Mortal220",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 220
          },
          {
            "Name": "Mortal221",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 221
          },
          {
            "Name": "Mortal222",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 222
          },
          {
            "Name": "Mortal223",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 223
          },
          {
            "Name": "Mortal224",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 224
          },
          {
            "Name": "Mortal225",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 225
          },
          {
            "Name": "Mortal226",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 226
          },
          {
            "Name": "Mortal227",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 227
          },
          {
            "Name": "Mortal228",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 228
          },
          {
            "Name": "Mortal229",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 229
          },
          {
            "Name": "Mortal230",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 230
          },
          {
            "Name": "Mortal231",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 231
          },
          {
            "Name": "Mortal232",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 232
          },
          {
            "Name": "Mortal233",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 233
          },
          {
            "Name": "Mortal234",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 234
          },
          {
            "Name": "Mortal235",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 235
          },
          {
            "Name": "Mortal236",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 236
          },
          {
            "Name": "Mortal237",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 237
          },
          {
            "Name": "Mortal238",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 238
          },
          {
            "Name": "Mortal239",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 239
          },
          {
            "Name": "Mortal240",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 240
          },
          {
            "Name": "Mortal241",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 241
          },
          {
            "Name": "Mortal242",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 242
          },
          {
            "Name": "Mortal243",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 243
          },
          {
            "Name": "Mortal244",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 244
          },
          {
            "Name": "Mortal245",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 245
          },
          {
            "Name": "Mortal246",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 246
          },
          {
            "Name": "Mortal247",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 247
          },
          {
            "Name": "Mortal248",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 248
          },
          {
            "Name": "Mortal249",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 249
          },
          {
            "Name": "Mortal250",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 250
          },
          {
            "Name": "Mortal251",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 251
          },
          {
            "Name": "Mortal252",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 252
          },
          {
            "Name": "Mortal253",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 253
          },
          {
            "Name": "Mortal254",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 254
          },
          {
            "Name": "Mortal255",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 255
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "era",
          "Era"
        ],
        "TypeDef": "Variant"
      },
      "730": {
        "TypeFields": [
          {
            "TypeName": "T::Nonce",
            "TypeId": 75
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_nonce",
          "CheckNonce"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "731": {
        "Path": [
          "frame_system",
          "extensions",
          "check_weight",
          "CheckWeight"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "732": {
        "TypeFields": [
          {
            "TypeName": "BalanceOf<T>",
            "TypeId": 79
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "ChargeTransactionPayment"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "733": {
        "Path": [
          "pallet_claims",
          "ValidateClaim"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "734": {
        "TypeFields": [
          {
            "TypeId": 13
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 0
          },
          {
            "Name": "Call",
            "TypeId": 253
          },
          {
            "Name": "Signature",
            "TypeId": 719
          },
          {
            "Name": "Extra",
            "TypeId": 724
          }
        ],
        "TypeDef": "Composite"
      },
      "735": {
        "Path": [
          "hydradx_runtime",
          "Runtime"
        ],
        "TypeDef": "Composite"
      }
    },
    "Modules": {
      "1": {
        "Name": "System",
        "Storage": {
          "Prefix": "System",
          "Entries": [
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 3
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA=",
              "Docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "Name": "ExtrinsicCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "Name": "BlockWeight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AAAAAAAA",
              "Docs": [
                " The current weight for the block."
              ]
            },
            {
              "Name": "AllExtrinsicsLen",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 12
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "Name": "ExtrinsicData",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "Name": "Number",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "Name": "ParentHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Hash of the previous block."
              ]
            },
            {
              "Name": "Digest",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 14,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "Name": "Events",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 18,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "Name": "EventCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "Name": "EventTopics",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 12,
                  "Value": 213
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "Name": "LastRuntimeUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 214,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "Name": "UpgradedToU32RefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 48,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "Name": "UpgradedToTripleRefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 48,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "Name": "ExecutionPhase",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 212,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The execution phase of the block."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 215
        },
        "Events": {
          "TypeId": 21
        },
        "Constants": [
          {
            "Name": "BlockWeights",
            "TypeId": 219,
            "Value": "AlsfXQAHAIhSanQCAEABwqCpHQABB9CgRF9UAgDoAAEHAOa9T1cCAPAAAQAAwqCpHQABB9BC2XlxAgA4AQEHAIhSanQCAEABAQcAopQaHQIAUADCoKkdAAAAAA==",
            "Docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "Name": "BlockLength",
            "TypeId": 223,
            "Value": "AAA8AAAAUAAAAFAA",
            "Docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "Name": "BlockHashCount",
            "TypeId": 4,
            "Value": "YAkAAA==",
            "Docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "Name": "DbWeight",
            "TypeId": 225,
            "Value": "QHh9AQAAAAAA4fUFAAAAAA==",
            "Docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "Name": "Version",
            "TypeId": 226,
            "Value": "HGh5ZHJhZHgcaHlkcmFkeAEAAADxAAAAAAAAADTfastomQdgmwQAAAA345f8fJH15AIAAABA/jrUAfiVmgYAAADSvJiX7tCPFQMAAAD3iyeL5T9FTAIAAACrPAVyKR/riwEAAADdcY1cxTJi1AEAAADqk+Pxbz1pYgIAAAC8nYmQT1uSPwEAAAA3yLsTUKmiqAQAAABYIhH2W7FLiQUAAADmWwDkbO3QqgIAAAALtnpS/NBA/wEAAAABAAAAAQ==",
            "Docs": [
              " Get the chain's current version."
            ]
          },
          {
            "Name": "SS58Prefix",
            "TypeId": 53,
            "Value": "PwA=",
            "Docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 230
        },
        "Index": 1
      },
      "3": {
        "Name": "Timestamp",
        "Storage": {
          "Prefix": "Timestamp",
          "Entries": [
            {
              "Name": "Now",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current time for the current block."
              ]
            },
            {
              "Name": "DidUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 48,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Did the timestamp get updated in this block?"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 231
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MinimumPeriod",
            "TypeId": 11,
            "Value": "cBcAAAAAAAA=",
            "Docs": [
              " The minimum period between blocks. Beware that this is different to the *expected*",
              " period that the block production apparatus provides. Your chosen consensus system will",
              " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
              " double this period on default settings."
            ]
          }
        ],
        "Errors": null,
        "Index": 3
      },
      "7": {
        "Name": "Balances",
        "Storage": {
          "Prefix": "Balances",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units issued in the system."
              ]
            },
            {
              "Name": "InactiveIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 5
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgA==",
              "Docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 232
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock."
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 236
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances."
              ]
            },
            {
              "Name": "Holds",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 239
                }
              },
              "Default": "AA==",
              "Docs": [
                " Holds on account balances."
              ]
            },
            {
              "Name": "Freezes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 242
                }
              },
              "Default": "AA==",
              "Docs": [
                " Freeze locks on account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 243
        },
        "Events": {
          "TypeId": 30
        },
        "Constants": [
          {
            "Name": "ExistentialDeposit",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
              "",
              " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
              " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
              " In case you have multiple sources of provider references, you may also get unexpected",
              " behaviour if you set this to zero.",
              "",
              " Bottom line: Do yourself a favour and make it at least one!"
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation."
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          },
          {
            "Name": "MaxHolds",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " The maximum number of holds that can exist on an account at any time."
            ]
          },
          {
            "Name": "MaxFreezes",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " The maximum number of individual freeze locks that can exist on an account at any time."
            ]
          }
        ],
        "Errors": {
          "TypeId": 244
        },
        "Index": 7
      },
      "9": {
        "Name": "TransactionPayment",
        "Storage": {
          "Prefix": "TransactionPayment",
          "Entries": [
            {
              "Name": "NextFeeMultiplier",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 86,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 245,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 32
        },
        "Constants": [
          {
            "Name": "OperationalFeeMultiplier",
            "TypeId": 2,
            "Value": "AA==",
            "Docs": [
              " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "Errors": null,
        "Index": 9
      },
      "11": {
        "Name": "Treasury",
        "Storage": {
          "Prefix": "Treasury",
          "Entries": [
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of proposals that have been made."
              ]
            },
            {
              "Name": "Proposals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 246
                }
              },
              "Default": "AA==",
              "Docs": [
                " Proposals that have been made."
              ]
            },
            {
              "Name": "Deactivated",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The amount which has been reported as inactive to Currency."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 247,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Proposal indices that have been approved but not yet awarded."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 248
        },
        "Events": {
          "TypeId": 33
        },
        "Constants": [
          {
            "Name": "ProposalBond",
            "TypeId": 88,
            "Value": "MHUAAA==",
            "Docs": [
              " Fraction of a proposal's value that should be bonded in order to place the proposal.",
              " An accepted proposal gets these back. A rejected proposal does not."
            ]
          },
          {
            "Name": "ProposalBondMinimum",
            "TypeId": 6,
            "Value": "AADBb/KGIwAAAAAAAAAAAA==",
            "Docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "ProposalBondMaximum",
            "TypeId": 59,
            "Value": "AQAAxS68orEAAAAAAAAAAAA=",
            "Docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "SpendPeriod",
            "TypeId": 4,
            "Value": "IBwAAA==",
            "Docs": [
              " Period between successive spends."
            ]
          },
          {
            "Name": "Burn",
            "TypeId": 88,
            "Value": "AAAAAA==",
            "Docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 249,
            "Value": "cHkvdHJzcnk=",
            "Docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MaxApprovals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          }
        ],
        "Errors": {
          "TypeId": 250
        },
        "Index": 11
      },
      "13": {
        "Name": "Utility",
        "Storage": null,
        "Calls": {
          "TypeId": 251
        },
        "Events": {
          "TypeId": 34
        },
        "Constants": [
          {
            "Name": "batched_calls_limit",
            "TypeId": 4,
            "Value": "qioAAA==",
            "Docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "Errors": {
          "TypeId": 428
        },
        "Index": 13
      },
      "15": {
        "Name": "Preimage",
        "Storage": {
          "Prefix": "Preimage",
          "Entries": [
            {
              "Name": "StatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 429
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "PreimageFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 431,
                  "Value": 432
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 254
        },
        "Events": {
          "TypeId": 37
        },
        "Constants": [],
        "Errors": {
          "TypeId": 433
        },
        "Index": 15
      },
      "17": {
        "Name": "Identity",
        "Storage": {
          "Prefix": "Identity",
          "Entries": [
            {
              "Name": "IdentityOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 434
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information that is pertinent to identify the entity behind an account.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "SuperOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 291
                }
              },
              "Default": "AA==",
              "Docs": [
                " The super-identity of an alternative \"sub\" identity together with its name, within that",
                " context. If the account is not some other account's sub-identity, then just `None`."
              ]
            },
            {
              "Name": "SubsOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 438
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Alternative \"sub\" identities of this account.",
                "",
                " The first item is the deposit, the second is a vector of the accounts.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "Registrars",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 440,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The set of registrars. Not expected to get very big as can only be added through a",
                " special origin (likely a council motion).",
                "",
                " The index into this can be cast to `RegistrarIndex` to get a valid value."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 255
        },
        "Events": {
          "TypeId": 38
        },
        "Constants": [
          {
            "Name": "BasicDeposit",
            "TypeId": 6,
            "Value": "AEBjUr/GAQAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered identity"
            ]
          },
          {
            "Name": "FieldDeposit",
            "TypeId": 6,
            "Value": "AEB6EPNaAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit per additional field for a registered identity."
            ]
          },
          {
            "Name": "SubAccountDeposit",
            "TypeId": 6,
            "Value": "AEBjUr/GAQAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered subaccount. This should account for the fact",
              " that one storage item's value will increase by the size of an account ID, and there will",
              " be another trie item whose value is the size of an account ID plus 32 bytes."
            ]
          },
          {
            "Name": "MaxSubAccounts",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of sub-accounts allowed per identified account."
            ]
          },
          {
            "Name": "MaxAdditionalFields",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
              " required to access an identity, but can be pretty high."
            ]
          },
          {
            "Name": "MaxRegistrars",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
              " of, e.g., updating judgements."
            ]
          }
        ],
        "Errors": {
          "TypeId": 444
        },
        "Index": 17
      },
      "19": {
        "Name": "Democracy",
        "Storage": {
          "Prefix": "Democracy",
          "Entries": [
            {
              "Name": "PublicPropCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of (public) proposals that have been made so far."
              ]
            },
            {
              "Name": "PublicProps",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 445,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The public proposals. Unsorted. The second item is the proposal."
              ]
            },
            {
              "Name": "DepositOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 448
                }
              },
              "Default": "AA==",
              "Docs": [
                " Those who have locked a deposit.",
                "",
                " TWOX-NOTE: Safe, as increasing integer keys are safe."
              ]
            },
            {
              "Name": "ReferendumCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "Name": "LowestUnbaked",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The lowest referendum index representing an unbaked referendum. Equal to",
                " `ReferendumCount` if there isn't a unbaked referendum."
              ]
            },
            {
              "Name": "ReferendumInfoOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 450
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum.",
                "",
                " TWOX-NOTE: SAFE as indexes are not under an attacker���s control."
              ]
            },
            {
              "Name": "VotingOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 453
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " All votes for a particular voter. We store the balance for the number of votes that we",
                " have recorded. The second item is the total amount of delegations, that will be added.",
                "",
                " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
              ]
            },
            {
              "Name": "LastTabledWasExternal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 48,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the last referendum tabled was submitted externally. False if it was a public",
                " proposal."
              ]
            },
            {
              "Name": "NextExternal",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 459,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The referendum to be tabled whenever it would be valid to table an external proposal.",
                " This happens when a referendum needs to be tabled and one of two conditions are met:",
                " - `LastTabledWasExternal` is `false`; or",
                " - `PublicProps` is empty."
              ]
            },
            {
              "Name": "Blacklist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 460
                }
              },
              "Default": "AA==",
              "Docs": [
                " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                " (until when it may not be resubmitted) and who vetoed it."
              ]
            },
            {
              "Name": "Cancellations",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 48
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record of all proposals that have been subject to emergency cancellation."
              ]
            },
            {
              "Name": "MetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 43,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " General information concerning any proposal or referendum.",
                " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                " dump or IPFS hash of a JSON file.",
                "",
                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                " large preimages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 295
        },
        "Events": {
          "TypeId": 39
        },
        "Constants": [
          {
            "Name": "EnactmentPeriod",
            "TypeId": 4,
            "Value": "IBwAAA==",
            "Docs": [
              " The period between a proposal being approved and enacted.",
              "",
              " It should generally be a little more than the unstake period to ensure that",
              " voting stakers have an opportunity to remove themselves from the system in the case",
              " where they are on the losing side of a vote."
            ]
          },
          {
            "Name": "LaunchPeriod",
            "TypeId": 4,
            "Value": "YFQAAA==",
            "Docs": [
              " How often (in blocks) new public referenda are launched."
            ]
          },
          {
            "Name": "VotingPeriod",
            "TypeId": 4,
            "Value": "YFQAAA==",
            "Docs": [
              " How often (in blocks) to check for new votes."
            ]
          },
          {
            "Name": "VoteLockingPeriod",
            "TypeId": 4,
            "Value": "wKgAAA==",
            "Docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          },
          {
            "Name": "MinimumDeposit",
            "TypeId": 6,
            "Value": "AACKXXhFYwEAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "Name": "InstantAllowed",
            "TypeId": 48,
            "Value": "AQ==",
            "Docs": [
              " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
              " want to set this permanently to `false`, others may want to condition it on things such",
              " as an upgrade having happened recently."
            ]
          },
          {
            "Name": "FastTrackVotingPeriod",
            "TypeId": 4,
            "Value": "hAMAAA==",
            "Docs": [
              " Minimum voting period allowed for a fast-track referendum."
            ]
          },
          {
            "Name": "CooloffPeriod",
            "TypeId": 4,
            "Value": "4MQAAA==",
            "Docs": [
              " Period in blocks where an external proposal may not be re-submitted after being vetoed."
            ]
          },
          {
            "Name": "MaxVotes",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of votes for an account.",
              "",
              " Also used to compute weight, an overly big value can",
              " lead to extrinsic with very big weight: see `delegate` for instance."
            ]
          },
          {
            "Name": "MaxProposals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of public proposals that can exist at any time."
            ]
          },
          {
            "Name": "MaxDeposits",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of deposits a public proposal may have at any time."
            ]
          },
          {
            "Name": "MaxBlacklisted",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of items which can be blacklisted."
            ]
          }
        ],
        "Errors": {
          "TypeId": 461
        },
        "Index": 19
      },
      "21": {
        "Name": "Elections",
        "Storage": {
          "Prefix": "Elections",
          "Entries": [
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 462,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current elected members.",
                "",
                " Invariant: Always sorted based on account id."
              ]
            },
            {
              "Name": "RunnersUp",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 462,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current reserved runners-up.",
                "",
                " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
                " last (i.e. _best_) runner-up will be replaced."
              ]
            },
            {
              "Name": "Candidates",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 45,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The present candidate list. A current member or runner-up can never enter this vector",
                " and is always implicitly assumed to be a candidate.",
                "",
                " Second element is the deposit.",
                "",
                " Invariant: Always sorted based on account id."
              ]
            },
            {
              "Name": "ElectionRounds",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The total number of vote rounds that have happened, excluding the upcoming one."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 464
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " Votes and locked stake of a particular voter.",
                "",
                " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 300
        },
        "Events": {
          "TypeId": 44
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 122,
            "Value": "cGhyZWxlY3Q=",
            "Docs": [
              " Identifier for the elections-phragmen pallet's lock"
            ]
          },
          {
            "Name": "CandidacyBond",
            "TypeId": 6,
            "Value": "AEBjUr/GAQAAAAAAAAAAAA==",
            "Docs": [
              " How much should be locked up in order to submit one's candidacy."
            ]
          },
          {
            "Name": "VotingBondBase",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " Base deposit associated with voting.",
              "",
              " This should be sensibly high to economically ensure the pallet cannot be attacked by",
              " creating a gigantic number of votes."
            ]
          },
          {
            "Name": "VotingBondFactor",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of bond that need to be locked for each vote (32 bytes)."
            ]
          },
          {
            "Name": "DesiredMembers",
            "TypeId": 4,
            "Value": "DQAAAA==",
            "Docs": [
              " Number of members to elect."
            ]
          },
          {
            "Name": "DesiredRunnersUp",
            "TypeId": 4,
            "Value": "DwAAAA==",
            "Docs": [
              " Number of runners_up to keep."
            ]
          },
          {
            "Name": "TermDuration",
            "TypeId": 4,
            "Value": "4MQAAA==",
            "Docs": [
              " How long each seat is kept. This defines the next block number at which an election",
              " round will happen. If set to zero, no elections are ever triggered and the module will",
              " be in passive mode."
            ]
          },
          {
            "Name": "MaxCandidates",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of candidates in a phragmen election.",
              "",
              " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
              " consider how it will impact `T::WeightInfo::election_phragmen`.",
              "",
              " When this limit is reached no more candidates are accepted in the election."
            ]
          },
          {
            "Name": "MaxVoters",
            "TypeId": 4,
            "Value": "AAMAAA==",
            "Docs": [
              " The maximum number of voters to allow in a phragmen election.",
              "",
              " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
              " consider how it will impact `T::WeightInfo::election_phragmen`.",
              "",
              " When the limit is reached the new voters are ignored."
            ]
          },
          {
            "Name": "MaxVotesPerVoter",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " Maximum numbers of votes per voter.",
              "",
              " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
              " consider how it will impact `T::WeightInfo::election_phragmen`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 465
        },
        "Index": 21
      },
      "23": {
        "Name": "Council",
        "Storage": {
          "Prefix": "Council",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 466,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 253
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 467
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 207,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of absentations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 302
        },
        "Events": {
          "TypeId": 47
        },
        "Constants": [
          {
            "Name": "MaxProposalWeight",
            "TypeId": 9,
            "Value": "BwBEKTU6AgCgAA==",
            "Docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 468
        },
        "Index": 23
      },
      "25": {
        "Name": "TechnicalCommittee",
        "Storage": {
          "Prefix": "TechnicalCommittee",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 469,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 253
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 467
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 207,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of absentations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 303
        },
        "Events": {
          "TypeId": 49
        },
        "Constants": [
          {
            "Name": "MaxProposalWeight",
            "TypeId": 9,
            "Value": "BwBEKTU6AgCgAA==",
            "Docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 470
        },
        "Index": 25
      },
      "27": {
        "Name": "Tips",
        "Storage": {
          "Prefix": "Tips",
          "Entries": [
            {
              "Name": "Tips",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 12,
                  "Value": 471
                }
              },
              "Default": "AA==",
              "Docs": [
                " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
                " This has the insecure enumerable hash function since the key itself is already",
                " guaranteed to be a secure hash."
              ]
            },
            {
              "Name": "Reasons",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " Simple preimage lookup from the reason's hash to the original data. Again, has an",
                " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 304
        },
        "Events": {
          "TypeId": 50
        },
        "Constants": [
          {
            "Name": "MaximumReasonLength",
            "TypeId": 4,
            "Value": "AAQAAA==",
            "Docs": [
              " Maximum acceptable reason length.",
              "",
              " Benchmarks depend on this value, be sure to update weights file when changing this value"
            ]
          },
          {
            "Name": "DataDepositPerByte",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit per byte within the tip report reason or bounty description."
            ]
          },
          {
            "Name": "TipCountdown",
            "TypeId": 4,
            "Value": "IBwAAA==",
            "Docs": [
              " The period for which a tip remains open after is has achieved threshold tippers."
            ]
          },
          {
            "Name": "TipFindersFee",
            "TypeId": 472,
            "Value": "AQ==",
            "Docs": [
              " The percent of the final tip which goes to the original reporter of the tip."
            ]
          },
          {
            "Name": "TipReportDepositBase",
            "TypeId": 6,
            "Value": "AIDGpH6NAwAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for placing a tip report."
            ]
          }
        ],
        "Errors": {
          "TypeId": 473
        },
        "Index": 27
      },
      "29": {
        "Name": "Proxy",
        "Storage": {
          "Prefix": "Proxy",
          "Entries": [
            {
              "Name": "Proxies",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 474
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The set of account proxies. Maps the account which has delegated to the accounts",
                " which are being delegated to, together with the amount held on deposit."
              ]
            },
            {
              "Name": "Announcements",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 478
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The announcements made by the proxy (key)."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 305
        },
        "Events": {
          "TypeId": 51
        },
        "Constants": [
          {
            "Name": "ProxyDepositBase",
            "TypeId": 6,
            "Value": "AOARAh62AAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "ProxyDepositFactor",
            "TypeId": 6,
            "Value": "ACyZgOYAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "Name": "MaxProxies",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "Name": "MaxPending",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "Name": "AnnouncementDepositBase",
            "TypeId": 6,
            "Value": "AOARAh62AAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "Name": "AnnouncementDepositFactor",
            "TypeId": 6,
            "Value": "AFgyAc0BAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 482
        },
        "Index": 29
      },
      "31": {
        "Name": "Multisig",
        "Storage": {
          "Prefix": "Multisig",
          "Entries": [
            {
              "Name": "Multisigs",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 483,
                  "Value": 484
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of open multisig operations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 307
        },
        "Events": {
          "TypeId": 54
        },
        "Constants": [
          {
            "Name": "DepositBase",
            "TypeId": 6,
            "Value": "AKA3zUy4AAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "DepositFactor",
            "TypeId": 6,
            "Value": "AIB1hN8AAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "Name": "MaxSignatories",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "Errors": {
          "TypeId": 486
        },
        "Index": 31
      },
      "32": {
        "Name": "Uniques",
        "Storage": {
          "Prefix": "Uniques",
          "Entries": [
            {
              "Name": "Class",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 487
                }
              },
              "Default": "AA==",
              "Docs": [
                " Details of a collection."
              ]
            },
            {
              "Name": "OwnershipAcceptance",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " The collection, if any, of which an account is willing to take ownership."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 488,
                  "Value": 36
                }
              },
              "Default": "AA==",
              "Docs": [
                " The items held by any given account; set out this way so that items owned by a single",
                " account can be enumerated."
              ]
            },
            {
              "Name": "ClassAccount",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 46,
                  "Value": 36
                }
              },
              "Default": "AA==",
              "Docs": [
                " The collections owned by any given account; set out this way so that collections owned by",
                " a single account can be enumerated."
              ]
            },
            {
              "Name": "Asset",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 326,
                  "Value": 489
                }
              },
              "Default": "AA==",
              "Docs": [
                " The items in existence and their ownership details."
              ]
            },
            {
              "Name": "ClassMetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 490
                }
              },
              "Default": "AA==",
              "Docs": [
                " Metadata of a collection."
              ]
            },
            {
              "Name": "InstanceMetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 326,
                  "Value": 491
                }
              },
              "Default": "AA==",
              "Docs": [
                " Metadata of an item."
              ]
            },
            {
              "Name": "Attribute",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 492,
                  "Value": 493
                }
              },
              "Default": "AA==",
              "Docs": [
                " Attributes of a collection."
              ]
            },
            {
              "Name": "ItemPriceOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 326,
                  "Value": 494
                }
              },
              "Default": "AA==",
              "Docs": [
                " Price of an asset instance."
              ]
            },
            {
              "Name": "CollectionMaxSupply",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Keeps track of the number of items a collection might have."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 309
        },
        "Events": {
          "TypeId": 56
        },
        "Constants": [
          {
            "Name": "CollectionDeposit",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved for collection."
            ]
          },
          {
            "Name": "ItemDeposit",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved for an item."
            ]
          },
          {
            "Name": "MetadataDepositBase",
            "TypeId": 6,
            "Value": "AIDGpH6NAwAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved when adding metadata to your item."
            ]
          },
          {
            "Name": "AttributeDepositBase",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved when adding an attribute to an item."
            ]
          },
          {
            "Name": "DepositPerByte",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The additional funds that must be reserved for the number of bytes store in metadata,",
              " either \"normal\" metadata or attribute metadata."
            ]
          },
          {
            "Name": "StringLimit",
            "TypeId": 4,
            "Value": "SAAAAA==",
            "Docs": [
              " The maximum length of data stored on-chain."
            ]
          },
          {
            "Name": "KeyLimit",
            "TypeId": 4,
            "Value": "AAEAAA==",
            "Docs": [
              " The maximum length of an attribute key."
            ]
          },
          {
            "Name": "ValueLimit",
            "TypeId": 4,
            "Value": "AAQAAA==",
            "Docs": [
              " The maximum length of an attribute value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 495
        },
        "Index": 32
      },
      "35": {
        "Name": "StateTrieMigration",
        "Storage": {
          "Prefix": "StateTrieMigration",
          "Entries": [
            {
              "Name": "MigrationProcess",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 314,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Migration progress.",
                "",
                " This stores the snapshot of the last migrated keys. It can be set into motion and move",
                " forward by any of the means provided by this pallet."
              ]
            },
            {
              "Name": "AutoLimits",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 312,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The limits that are imposed on automatic migrations.",
                "",
                " If set to None, then no automatic migration happens."
              ]
            },
            {
              "Name": "SignedMigrationMaxLimits",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 313,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The maximum limits that the signed migration could use.",
                "",
                " If not set, no signed submission is allowed."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 311
        },
        "Events": {
          "TypeId": 63
        },
        "Constants": [
          {
            "Name": "MaxKeyLen",
            "TypeId": 4,
            "Value": "AAIAAA==",
            "Docs": [
              " Maximal number of bytes that a key can have.",
              "",
              " FRAME itself does not limit the key length.",
              " The concrete value must therefore depend on your storage usage.",
              " A [`frame_support::storage::StorageNMap`] for example can have an arbitrary number of",
              " keys which are then hashed and concatenated, resulting in arbitrarily long keys.",
              "",
              " Use the *state migration RPC* to retrieve the length of the longest key in your",
              " storage: <https://github.com/paritytech/substrate/issues/11642>",
              "",
              " The migration will halt with a `Halted` event if this value is too small.",
              " Since there is no real penalty from over-estimating, it is advised to use a large",
              " value. The default is 512 byte.",
              "",
              " Some key lengths for reference:",
              " - [`frame_support::storage::StorageValue`]: 32 byte",
              " - [`frame_support::storage::StorageMap`]: 64 byte",
              " - [`frame_support::storage::StorageDoubleMap`]: 96 byte",
              "",
              " For more info see",
              " <https://www.shawntabrizi.com/substrate/querying-substrate-storage-via-rpc/>"
            ]
          }
        ],
        "Errors": {
          "TypeId": 65
        },
        "Index": 35
      },
      "51": {
        "Name": "AssetRegistry",
        "Storage": {
          "Prefix": "AssetRegistry",
          "Entries": [
            {
              "Name": "Assets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 496
                }
              },
              "Default": "AA==",
              "Docs": [
                " Details of an asset."
              ]
            },
            {
              "Name": "NextAssetId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AQAAAA==",
              "Docs": [
                " Next available asset id. This is sequential id assigned for each new registered asset."
              ]
            },
            {
              "Name": "AssetIds",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 68,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between asset name and asset id."
              ]
            },
            {
              "Name": "AssetLocations",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 71
                }
              },
              "Default": "AA==",
              "Docs": [
                " Native location of an asset."
              ]
            },
            {
              "Name": "BannedAssets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 36
                }
              },
              "Default": "AA==",
              "Docs": [
                " Non-native assets which transfer is banned."
              ]
            },
            {
              "Name": "LocationAssets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 71,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Local asset for native location."
              ]
            },
            {
              "Name": "ExistentialDepositCounter",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Number of accounts that paid existential deposits for insufficient assets.",
                " This storage is used by `SufficiencyCheck`."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 317
        },
        "Events": {
          "TypeId": 66
        },
        "Constants": [
          {
            "Name": "SequentialIdStartAt",
            "TypeId": 4,
            "Value": "QEIPAA==",
            "Docs": []
          },
          {
            "Name": "StringLimit",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum length of a name or symbol stored on-chain."
            ]
          },
          {
            "Name": "MinStringLimit",
            "TypeId": 4,
            "Value": "AwAAAA==",
            "Docs": [
              " The min length of a name or symbol stored on-chain."
            ]
          },
          {
            "Name": "RegExternalWeightMultiplier",
            "TypeId": 11,
            "Value": "CgAAAAAAAAA=",
            "Docs": [
              " Weight multiplier for `register_external` extrinsic"
            ]
          }
        ],
        "Errors": {
          "TypeId": 497
        },
        "Index": 51
      },
      "53": {
        "Name": "Claims",
        "Storage": {
          "Prefix": "Claims",
          "Entries": [
            {
              "Name": "Claims",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 83,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Asset id storage for each shared token"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 321
        },
        "Events": {
          "TypeId": 82
        },
        "Constants": [],
        "Errors": {
          "TypeId": 498
        },
        "Index": 53
      },
      "55": {
        "Name": "GenesisHistory",
        "Storage": {
          "Prefix": "GenesisHistory",
          "Entries": [
            {
              "Name": "PreviousChain",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 499,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 324
        },
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 55
      },
      "57": {
        "Name": "CollatorRewards",
        "Storage": {
          "Prefix": "CollatorRewards",
          "Entries": [
            {
              "Name": "Collators",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 500
                }
              },
              "Default": "AA==",
              "Docs": [
                " Stores the collators per session (index)."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 84
        },
        "Constants": [
          {
            "Name": "RewardPerCollator",
            "TypeId": 6,
            "Value": "ePqLdSieAQAAAAAAAAAAAA==",
            "Docs": [
              " Reward amount per one collator."
            ]
          },
          {
            "Name": "RewardCurrencyId",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " Reward Asset Id"
            ]
          }
        ],
        "Errors": {
          "TypeId": 501
        },
        "Index": 57
      },
      "59": {
        "Name": "Omnipool",
        "Storage": {
          "Prefix": "Omnipool",
          "Entries": [
            {
              "Name": "Assets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 502
                }
              },
              "Default": "AA==",
              "Docs": [
                " State of an asset in the omnipool"
              ]
            },
            {
              "Name": "HubAssetImbalance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 503,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAE=",
              "Docs": [
                " Imbalance of hub asset"
              ]
            },
            {
              "Name": "HubAssetTradability",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 87,
                "Item2": null
              },
              "Default": "AQ==",
              "Docs": [
                " Tradable state of hub asset."
              ]
            },
            {
              "Name": "Positions",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 504
                }
              },
              "Default": "AA==",
              "Docs": [
                " LP positions. Maps NFT instance id to corresponding position"
              ]
            },
            {
              "Name": "NextPositionId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Position ids sequencer"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 325
        },
        "Events": {
          "TypeId": 85
        },
        "Constants": [
          {
            "Name": "HdxAssetId",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " Native Asset ID"
            ]
          },
          {
            "Name": "HubAssetId",
            "TypeId": 4,
            "Value": "AQAAAA==",
            "Docs": [
              " Hub Asset ID"
            ]
          },
          {
            "Name": "MinWithdrawalFee",
            "TypeId": 88,
            "Value": "ZAAAAA==",
            "Docs": [
              " Minimum withdrawal fee"
            ]
          },
          {
            "Name": "MinimumTradingLimit",
            "TypeId": 6,
            "Value": "6AMAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum trading limit"
            ]
          },
          {
            "Name": "MinimumPoolLiquidity",
            "TypeId": 6,
            "Value": "QEIPAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum pool liquidity which can be added"
            ]
          },
          {
            "Name": "MaxInRatio",
            "TypeId": 6,
            "Value": "AwAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Max fraction of asset reserve to sell in single transaction"
            ]
          },
          {
            "Name": "MaxOutRatio",
            "TypeId": 6,
            "Value": "AwAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Max fraction of asset reserve to buy in single transaction"
            ]
          },
          {
            "Name": "NFTCollectionId",
            "TypeId": 6,
            "Value": "OQUAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Non fungible class id"
            ]
          }
        ],
        "Errors": {
          "TypeId": 505
        },
        "Index": 59
      },
      "60": {
        "Name": "TransactionPause",
        "Storage": {
          "Prefix": "TransactionPause",
          "Entries": [
            {
              "Name": "PausedTransactions",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 506,
                  "Value": 36
                }
              },
              "Default": "AA==",
              "Docs": [
                " The paused transaction map",
                "",
                " map (PalletNameBytes, FunctionNameBytes) => Option<()>"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 327
        },
        "Events": {
          "TypeId": 89
        },
        "Constants": [],
        "Errors": {
          "TypeId": 508
        },
        "Index": 60
      },
      "61": {
        "Name": "Duster",
        "Storage": {
          "Prefix": "Duster",
          "Entries": [
            {
              "Name": "AccountBlacklist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 36
                }
              },
              "Default": "AA==",
              "Docs": [
                " Accounts excluded from dusting."
              ]
            },
            {
              "Name": "RewardAccount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Account to take reward from."
              ]
            },
            {
              "Name": "DustAccount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Account to send dust to."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 328
        },
        "Events": {
          "TypeId": 90
        },
        "Constants": [
          {
            "Name": "Reward",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Reward amount"
            ]
          },
          {
            "Name": "NativeCurrencyId",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " Native Asset Id"
            ]
          }
        ],
        "Errors": {
          "TypeId": 509
        },
        "Index": 61
      },
      "62": {
        "Name": "OmnipoolWarehouseLM",
        "Storage": {
          "Prefix": "OmnipoolWarehouseLM",
          "Entries": [
            {
              "Name": "FarmSequencer",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Id sequencer for `GlobalFarm` and `YieldFarm`."
              ]
            },
            {
              "Name": "DepositSequencer",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "GlobalFarm",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 510
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "YieldFarm",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 512,
                  "Value": 513
                }
              },
              "Default": "AA==",
              "Docs": [
                " Yield farm details."
              ]
            },
            {
              "Name": "Deposit",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 514
                }
              },
              "Default": "AA==",
              "Docs": [
                " Deposit details."
              ]
            },
            {
              "Name": "ActiveYieldFarm",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 98,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Active(farms able to receive LP shares deposits) yield farms."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 329
        },
        "Events": {
          "TypeId": 91
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 249,
            "Value": "T21uaVdoTE0=",
            "Docs": [
              " Pallet id."
            ]
          },
          {
            "Name": "TreasuryAccountId",
            "TypeId": 0,
            "Value": "bW9kbHB5L3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": [
              " Treasury account to receive claimed rewards lower than ED"
            ]
          },
          {
            "Name": "MinTotalFarmRewards",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum total rewards to distribute from global farm during liquidity mining."
            ]
          },
          {
            "Name": "MinPlannedYieldingPeriods",
            "TypeId": 4,
            "Value": "aDgAAA==",
            "Docs": [
              " Minimum number of periods to run liquidity mining program."
            ]
          },
          {
            "Name": "MaxFarmEntriesPerDeposit",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " Maximum number of yield farms same LP shares can be re/deposited into. This value always",
              " MUST BE >= 1.         "
            ]
          },
          {
            "Name": "MaxYieldFarmsPerGlobalFarm",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " Max number of yield farms can exist in global farm. This includes all farms in the",
              " storage(active, stopped, terminated)."
            ]
          }
        ],
        "Errors": {
          "TypeId": 518
        },
        "Index": 62
      },
      "63": {
        "Name": "OmnipoolLiquidityMining",
        "Storage": {
          "Prefix": "OmnipoolLiquidityMining",
          "Entries": [
            {
              "Name": "OmniPositionId",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " Map of omnipool position's ids to LM's deposit ids."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 330
        },
        "Events": {
          "TypeId": 92
        },
        "Constants": [
          {
            "Name": "NFTCollectionId",
            "TypeId": 6,
            "Value": "GAoAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " NFT collection id for liquidity mining's deposit nfts."
            ]
          },
          {
            "Name": "OracleSource",
            "TypeId": 122,
            "Value": "b21uaXBvb2w=",
            "Docs": [
              " Identifier of oracle data soruce"
            ]
          },
          {
            "Name": "OraclePeriod",
            "TypeId": 520,
            "Value": "Ag==",
            "Docs": [
              " Oracle's price aggregation period."
            ]
          }
        ],
        "Errors": {
          "TypeId": 521
        },
        "Index": 63
      },
      "64": {
        "Name": "OTC",
        "Storage": {
          "Prefix": "OTC",
          "Entries": [
            {
              "Name": "NextOrderId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " ID sequencer for Orders"
              ]
            },
            {
              "Name": "Orders",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 523
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 331
        },
        "Events": {
          "TypeId": 96
        },
        "Constants": [
          {
            "Name": "ExistentialDepositMultiplier",
            "TypeId": 2,
            "Value": "BQ==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 524
        },
        "Index": 64
      },
      "65": {
        "Name": "CircuitBreaker",
        "Storage": {
          "Prefix": "CircuitBreaker",
          "Entries": [
            {
              "Name": "TradeVolumeLimitPerAsset",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 98
                }
              },
              "Default": "iBMAABAnAAA=",
              "Docs": [
                " Trade volume limits of assets set by set_trade_volume_limit.",
                " If not set, returns the default limit."
              ]
            },
            {
              "Name": "AllowedTradeVolumeLimitPerAsset",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 525
                }
              },
              "Default": "AA==",
              "Docs": [
                " Trade volumes per asset"
              ]
            },
            {
              "Name": "LiquidityAddLimitPerAsset",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 99
                }
              },
              "Default": "AfQBAAAQJwAA",
              "Docs": [
                " Liquidity limits of assets for adding liquidity.",
                " If not set, returns the default limit."
              ]
            },
            {
              "Name": "AllowedAddLiquidityAmountPerAsset",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 526
                }
              },
              "Default": "AA==",
              "Docs": [
                " Add liquidity volumes per asset"
              ]
            },
            {
              "Name": "LiquidityRemoveLimitPerAsset",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 99
                }
              },
              "Default": "AfQBAAAQJwAA",
              "Docs": [
                " Liquidity limits of assets for removing liquidity.",
                " If not set, returns the default limit."
              ]
            },
            {
              "Name": "AllowedRemoveLiquidityAmountPerAsset",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 526
                }
              },
              "Default": "AA==",
              "Docs": [
                " Remove liquidity volumes per asset"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 332
        },
        "Events": {
          "TypeId": 97
        },
        "Constants": [
          {
            "Name": "DefaultMaxNetTradeVolumeLimitPerBlock",
            "TypeId": 98,
            "Value": "iBMAABAnAAA=",
            "Docs": [
              " The maximum percentage of a pool's liquidity that can be traded in a block.",
              " Represented as a non-zero fraction (nominator, denominator) with the max value being 10_000."
            ]
          },
          {
            "Name": "DefaultMaxAddLiquidityLimitPerBlock",
            "TypeId": 99,
            "Value": "AfQBAAAQJwAA",
            "Docs": [
              " The maximum percentage of a pool's liquidity that can be added in a block.",
              " Represented as an optional non-zero fraction (nominator, denominator) with the max value being 10_000.",
              " If set to None, the limits are not enforced."
            ]
          },
          {
            "Name": "DefaultMaxRemoveLiquidityLimitPerBlock",
            "TypeId": 99,
            "Value": "AfQBAAAQJwAA",
            "Docs": [
              " The maximum percentage of a pool's liquidity that can be removed in a block.",
              " Represented as an optional non-zero fraction (nominator, denominator) with the max value being 10_000.",
              " If set to None, the limits are not enforced."
            ]
          }
        ],
        "Errors": {
          "TypeId": 527
        },
        "Index": 65
      },
      "67": {
        "Name": "Router",
        "Storage": {
          "Prefix": "Router",
          "Entries": [
            {
              "Name": "Routes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 334,
                  "Value": 149
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storing routes for asset pairs"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 333
        },
        "Events": {
          "TypeId": 100
        },
        "Constants": [
          {
            "Name": "NativeAssetId",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " Native Asset Id"
            ]
          }
        ],
        "Errors": {
          "TypeId": 528
        },
        "Index": 67
      },
      "68": {
        "Name": "DynamicFees",
        "Storage": {
          "Prefix": "DynamicFees",
          "Entries": [
            {
              "Name": "AssetFee",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 529
                }
              },
              "Default": "AA==",
              "Docs": [
                " Stores last calculated fee of an asset and block number in which it was changed..",
                " Stored as (Asset fee, Protocol fee, Block number)"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 335
        },
        "Events": {
          "TypeId": 102
        },
        "Constants": [
          {
            "Name": "AssetFeeParameters",
            "TypeId": 530,
            "Value": "xAkAAFDDAAAAoHJOGAkAAAAAAAAAAAAAAADITmdtwRsAAAAAAAAAAA==",
            "Docs": []
          },
          {
            "Name": "ProtocolFeeParameters",
            "TypeId": 530,
            "Value": "9AEAAOgDAAAAUDknjAQAAAAAAAAAAAAAAABkp7O24A0AAAAAAAAAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 531
        },
        "Index": 68
      },
      "69": {
        "Name": "Staking",
        "Storage": {
          "Prefix": "Staking",
          "Entries": [
            {
              "Name": "Staking",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 532,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " Global staking state."
              ]
            },
            {
              "Name": "Positions",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 533
                }
              },
              "Default": "AA==",
              "Docs": [
                " User's position state."
              ]
            },
            {
              "Name": "NextPositionId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Position ids sequencer."
              ]
            },
            {
              "Name": "PositionVotes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 6,
                  "Value": 534
                }
              },
              "Default": "AA==",
              "Docs": [
                " List of position votes."
              ]
            },
            {
              "Name": "ProcessedVotes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 540,
                  "Value": 537
                }
              },
              "Default": "AA==",
              "Docs": [
                " List of processed vote. Used to determine if the vote should be locked in case of voting not in favor."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 336
        },
        "Events": {
          "TypeId": 103
        },
        "Constants": [
          {
            "Name": "PeriodLength",
            "TypeId": 4,
            "Value": "IBwAAA==",
            "Docs": [
              " Staking period length in blocks."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 249,
            "Value": "c3Rha2luZyM=",
            "Docs": [
              " Pallet id."
            ]
          },
          {
            "Name": "NativeAssetId",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " Native Asset ID."
            ]
          },
          {
            "Name": "MinStake",
            "TypeId": 6,
            "Value": "AIDGpH6NAwAAAAAAAAAAAA==",
            "Docs": [
              " Min amount user must stake."
            ]
          },
          {
            "Name": "TimePointsWeight",
            "TypeId": 88,
            "Value": "QEIPAA==",
            "Docs": [
              " Weight of the time points in total points calculations."
            ]
          },
          {
            "Name": "ActionPointsWeight",
            "TypeId": 541,
            "Value": "AMLrCw==",
            "Docs": [
              " Weight of the action points in total points calculations."
            ]
          },
          {
            "Name": "TimePointsPerPeriod",
            "TypeId": 2,
            "Value": "AQ==",
            "Docs": [
              " Number of time points users receive for each period."
            ]
          },
          {
            "Name": "UnclaimablePeriods",
            "TypeId": 6,
            "Value": "AQAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Number of periods user can't claim rewards for. User can exit but won't receive any rewards.",
              " If he stay longer than `UnclaimablePeriods` he will receive rewards also for these periods."
            ]
          },
          {
            "Name": "CurrentStakeWeight",
            "TypeId": 2,
            "Value": "Ag==",
            "Docs": [
              " Weight of the actual stake in slash points calculation. Bigger the value lower the calculated slash points."
            ]
          },
          {
            "Name": "MaxVotes",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Max amount of votes the user can have at any time."
            ]
          },
          {
            "Name": "NFTCollectionId",
            "TypeId": 6,
            "Value": "rggAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " NFT collection id."
            ]
          }
        ],
        "Errors": {
          "TypeId": 542
        },
        "Index": 69
      },
      "70": {
        "Name": "Stableswap",
        "Storage": {
          "Prefix": "Stableswap",
          "Entries": [
            {
              "Name": "Pools",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 544
                }
              },
              "Default": "AA==",
              "Docs": [
                " Existing pools"
              ]
            },
            {
              "Name": "AssetTradability",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 98,
                  "Value": 108
                }
              },
              "Default": "Dw==",
              "Docs": [
                " Tradability state of pool assets."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 337
        },
        "Events": {
          "TypeId": 104
        },
        "Constants": [
          {
            "Name": "MinPoolLiquidity",
            "TypeId": 6,
            "Value": "QEIPAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum pool liquidity"
            ]
          },
          {
            "Name": "MinTradingLimit",
            "TypeId": 6,
            "Value": "6AMAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum trading amount"
            ]
          },
          {
            "Name": "AmplificationRange",
            "TypeId": 546,
            "Value": "AgAQJw==",
            "Docs": [
              " Amplification inclusive range. Pool's amp can be selected from the range only."
            ]
          }
        ],
        "Errors": {
          "TypeId": 547
        },
        "Index": 70
      },
      "71": {
        "Name": "Bonds",
        "Storage": {
          "Prefix": "Bonds",
          "Entries": [
            {
              "Name": "BondIds",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 548,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Registered bond ids.",
                " Maps (underlying asset ID, maturity) -> bond ID"
              ]
            },
            {
              "Name": "Bonds",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 548
                }
              },
              "Default": "AA==",
              "Docs": [
                " Registered bonds.",
                " Maps bond ID -> (underlying asset ID, maturity)"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 338
        },
        "Events": {
          "TypeId": 109
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 249,
            "Value": "cGx0Ym9uZHM=",
            "Docs": [
              " The pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "ProtocolFee",
            "TypeId": 88,
            "Value": "IE4AAA==",
            "Docs": [
              " Protocol fee."
            ]
          },
          {
            "Name": "FeeReceiver",
            "TypeId": 0,
            "Value": "bW9kbHB5L3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": [
              " Protocol fee receiver."
            ]
          }
        ],
        "Errors": {
          "TypeId": 549
        },
        "Index": 71
      },
      "73": {
        "Name": "LBP",
        "Storage": {
          "Prefix": "LBP",
          "Entries": [
            {
              "Name": "PoolData",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 111
                }
              },
              "Default": "AA==",
              "Docs": [
                " Details of a pool."
              ]
            },
            {
              "Name": "FeeCollectorWithAsset",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 540,
                  "Value": 48
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage used for tracking existing fee collectors",
                " Not more than one fee collector per asset possible"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 339
        },
        "Events": {
          "TypeId": 110
        },
        "Constants": [
          {
            "Name": "MinTradingLimit",
            "TypeId": 6,
            "Value": "6AMAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum trading limit, sole purpose of this is to keep the math working"
            ]
          },
          {
            "Name": "MinPoolLiquidity",
            "TypeId": 6,
            "Value": "QEIPAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum pool liquidity, sole purpose of this is to keep the math working"
            ]
          },
          {
            "Name": "MaxInRatio",
            "TypeId": 6,
            "Value": "AwAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Max fraction of pool to sell in single transaction"
            ]
          },
          {
            "Name": "MaxOutRatio",
            "TypeId": 6,
            "Value": "AwAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Max fraction of pool to buy in single transaction"
            ]
          },
          {
            "Name": "repay_fee",
            "TypeId": 98,
            "Value": "AgAAAAoAAAA=",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 550
        },
        "Index": 73
      },
      "74": {
        "Name": "XYK",
        "Storage": {
          "Prefix": "XYK",
          "Entries": [
            {
              "Name": "ShareToken",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Asset id storage for shared pool tokens"
              ]
            },
            {
              "Name": "TotalLiquidity",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total liquidity in a pool."
              ]
            },
            {
              "Name": "PoolAssets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 98
                }
              },
              "Default": "AA==",
              "Docs": [
                " Asset pair in a pool."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 341
        },
        "Events": {
          "TypeId": 114
        },
        "Constants": [
          {
            "Name": "NativeAssetId",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " Native Asset Id"
            ]
          },
          {
            "Name": "GetExchangeFee",
            "TypeId": 98,
            "Value": "AwAAAOgDAAA=",
            "Docs": [
              " Trading fee rate"
            ]
          },
          {
            "Name": "MinTradingLimit",
            "TypeId": 6,
            "Value": "6AMAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum trading limit"
            ]
          },
          {
            "Name": "MinPoolLiquidity",
            "TypeId": 6,
            "Value": "QEIPAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum pool liquidity"
            ]
          },
          {
            "Name": "MaxInRatio",
            "TypeId": 6,
            "Value": "AwAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Max fraction of pool to sell in single transaction"
            ]
          },
          {
            "Name": "MaxOutRatio",
            "TypeId": 6,
            "Value": "AwAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Max fraction of pool to buy in single transaction"
            ]
          },
          {
            "Name": "OracleSource",
            "TypeId": 122,
            "Value": "aHlkcmF4eWs=",
            "Docs": [
              " Oracle source identifier for this pallet."
            ]
          }
        ],
        "Errors": {
          "TypeId": 551
        },
        "Index": 74
      },
      "75": {
        "Name": "Referrals",
        "Storage": {
          "Prefix": "Referrals",
          "Entries": [
            {
              "Name": "ReferralCodes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 116,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " Referral codes",
                " Maps a referral code to an account."
              ]
            },
            {
              "Name": "ReferralAccounts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 116
                }
              },
              "Default": "AA==",
              "Docs": [
                " Referral accounts",
                " Maps an account to a referral code."
              ]
            },
            {
              "Name": "LinkedAccounts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " Linked accounts.",
                " Maps an account to a referral account."
              ]
            },
            {
              "Name": "ReferrerShares",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Shares of a referral account"
              ]
            },
            {
              "Name": "TraderShares",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Shares of a trader account"
              ]
            },
            {
              "Name": "TotalShares",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Total share issuance."
              ]
            },
            {
              "Name": "Referrer",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 552
                }
              },
              "Default": "AA==",
              "Docs": [
                " Referer level and total accumulated rewards over time.",
                " Maps referrer account to (Level, Balance). Level indicates current rewards and Balance is used to unlock next level.",
                " Dev note: we use OptionQuery here because this helps to easily determine that an account if referrer account."
              ]
            },
            {
              "Name": "AssetRewards",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 553,
                  "Value": 119
                }
              },
              "Default": "AA==",
              "Docs": [
                " Asset fee distribution rewards information.",
                " Maps (asset_id, level) to asset reward percentages."
              ]
            },
            {
              "Name": "PendingConversions",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 36
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information about assets that are currently in the rewards pot.",
                " Used to easily determine list of assets that need to be converted."
              ]
            },
            {
              "Name": "CounterForPendingConversions",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 342
        },
        "Events": {
          "TypeId": 115
        },
        "Constants": [
          {
            "Name": "RewardAsset",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " ID of an asset that is used to distribute rewards in."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 249,
            "Value": "cmVmZXJyYWw=",
            "Docs": [
              " Pallet id. Determines account which holds accumulated rewards in various assets."
            ]
          },
          {
            "Name": "RegistrationFee",
            "TypeId": 554,
            "Value": "AAAAAADgI2foyQAAAAAAAAAAAABtb2RscHkvdHJzcnkAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Registration fee details.",
              " (ID of an asset which fee is to be paid in, Amount, Beneficiary account)"
            ]
          },
          {
            "Name": "CodeLength",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " Maximum referral code length."
            ]
          },
          {
            "Name": "MinCodeLength",
            "TypeId": 4,
            "Value": "BAAAAA==",
            "Docs": [
              " Minimum referral code length."
            ]
          },
          {
            "Name": "SeedNativeAmount",
            "TypeId": 6,
            "Value": "AKByThgJAAAAAAAAAAAAAA==",
            "Docs": [
              " Seed amount that was sent to the reward pot."
            ]
          }
        ],
        "Errors": {
          "TypeId": 555
        },
        "Index": 75
      },
      "76": {
        "Name": "XcmRateLimiter",
        "Storage": {
          "Prefix": "XcmRateLimiter",
          "Entries": [
            {
              "Name": "AccumulatedAmounts",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 72,
                  "Value": 556
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Accumulated amounts for each asset"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 343
        },
        "Events": {
          "TypeId": 120
        },
        "Constants": [
          {
            "Name": "DeferDuration",
            "TypeId": 4,
            "Value": "YFQAAA==",
            "Docs": [
              " Defer duration base to be used for calculating the specific defer duration for any asset"
            ]
          },
          {
            "Name": "MaxDeferDuration",
            "TypeId": 4,
            "Value": "gDICAA==",
            "Docs": [
              " The maximum number of blocks to defer XCMs by."
            ]
          }
        ],
        "Errors": {
          "TypeId": 557
        },
        "Index": 76
      },
      "77": {
        "Name": "Tokens",
        "Storage": {
          "Prefix": "Tokens",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total issuance of a token type."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 540,
                  "Value": 558
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks of a token type under an account.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock."
              ]
            },
            {
              "Name": "Accounts",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 540,
                  "Value": 561
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " The balance of a token type under an account.",
                "",
                " NOTE: If the total is ever zero, decrease account ref account.",
                "",
                " NOTE: This is only used in the case that this module is used to store",
                " balances."
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 540,
                  "Value": 562
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 344
        },
        "Events": {
          "TypeId": 121
        },
        "Constants": [
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": []
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          }
        ],
        "Errors": {
          "TypeId": 565
        },
        "Index": 77
      },
      "79": {
        "Name": "Currencies",
        "Storage": null,
        "Calls": {
          "TypeId": 345
        },
        "Events": {
          "TypeId": 123
        },
        "Constants": [
          {
            "Name": "GetNativeCurrencyId",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 566
        },
        "Index": 79
      },
      "81": {
        "Name": "Vesting",
        "Storage": {
          "Prefix": "Vesting",
          "Entries": [
            {
              "Name": "VestingSchedules",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 567
                }
              },
              "Default": "AA==",
              "Docs": [
                " Vesting schedules of an account.",
                "",
                " VestingSchedules: map AccountId => Vec<VestingSchedule>"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 346
        },
        "Events": {
          "TypeId": 125
        },
        "Constants": [
          {
            "Name": "MinVestedTransfer",
            "TypeId": 6,
            "Value": "ZAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 568
        },
        "Index": 81
      },
      "90": {
        "Name": "EVM",
        "Storage": {
          "Prefix": "EVM",
          "Entries": [
            {
              "Name": "AccountCodes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 129,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "AccountCodesMetadata",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 129,
                  "Value": 569
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "AccountStorages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 570,
                  "Value": 12
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            },
            {
              "Name": "Suicided",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 129,
                  "Value": 36
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 348
        },
        "Events": {
          "TypeId": 127
        },
        "Constants": [],
        "Errors": {
          "TypeId": 571
        },
        "Index": 90
      },
      "91": {
        "Name": "EVMChainId",
        "Storage": {
          "Prefix": "EVMChainId",
          "Entries": [
            {
              "Name": "ChainId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The EVM chain ID."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 91
      },
      "92": {
        "Name": "Ethereum",
        "Storage": {
          "Prefix": "Ethereum",
          "Entries": [
            {
              "Name": "Pending",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 572,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current building block's transactions and receipts."
              ]
            },
            {
              "Name": "CurrentBlock",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 581,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current Ethereum block."
              ]
            },
            {
              "Name": "CurrentReceipts",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 586,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current Ethereum receipts."
              ]
            },
            {
              "Name": "CurrentTransactionStatuses",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 587,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current transaction statuses."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 349,
                  "Value": 12
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 354
        },
        "Events": {
          "TypeId": 131
        },
        "Constants": [],
        "Errors": {
          "TypeId": 588
        },
        "Index": 92
      },
      "93": {
        "Name": "EVMAccounts",
        "Storage": {
          "Prefix": "EVMAccounts",
          "Entries": [
            {
              "Name": "AccountExtension",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 129,
                  "Value": 270
                }
              },
              "Default": "AA==",
              "Docs": [
                " Maps an EVM address to the last 12 bytes of a substrate account."
              ]
            },
            {
              "Name": "ContractDeployer",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 129,
                  "Value": 36
                }
              },
              "Default": "AA==",
              "Docs": [
                " Whitelisted addresses that are allowed to deploy smart contracts."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 364
        },
        "Events": {
          "TypeId": 140
        },
        "Constants": [
          {
            "Name": "FeeMultiplier",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " Fee multiplier for the binding of addresses."
            ]
          }
        ],
        "Errors": {
          "TypeId": 589
        },
        "Index": 93
      },
      "94": {
        "Name": "DynamicEvmFee",
        "Storage": {
          "Prefix": "DynamicEvmFee",
          "Entries": [
            {
              "Name": "BaseFeePerGas",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 349,
                "Item2": null
              },
              "Default": "wOHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Base fee per gas"
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [
          {
            "Name": "WethAssetId",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " WETH Asset Id"
            ]
          }
        ],
        "Errors": null,
        "Index": 94
      },
      "95": {
        "Name": "XYKLiquidityMining",
        "Storage": null,
        "Calls": {
          "TypeId": 365
        },
        "Events": {
          "TypeId": 141
        },
        "Constants": [
          {
            "Name": "NFTCollectionId",
            "TypeId": 6,
            "Value": "DRUAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " NFT collection id for liquidity mining's deposit nfts."
            ]
          }
        ],
        "Errors": {
          "TypeId": 590
        },
        "Index": 95
      },
      "96": {
        "Name": "XYKWarehouseLM",
        "Storage": {
          "Prefix": "XYKWarehouseLM",
          "Entries": [
            {
              "Name": "FarmSequencer",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Id sequencer for `GlobalFarm` and `YieldFarm`."
              ]
            },
            {
              "Name": "DepositSequencer",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "GlobalFarm",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 591
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "YieldFarm",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 592,
                  "Value": 593
                }
              },
              "Default": "AA==",
              "Docs": [
                " Yield farm details."
              ]
            },
            {
              "Name": "Deposit",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 6,
                  "Value": 594
                }
              },
              "Default": "AA==",
              "Docs": [
                " Deposit details."
              ]
            },
            {
              "Name": "ActiveYieldFarm",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 540,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Active(farms able to receive LP shares deposits) yield farms."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 366
        },
        "Events": {
          "TypeId": 143
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 249,
            "Value": "eHlrTE1wSUQ=",
            "Docs": [
              " Pallet id."
            ]
          },
          {
            "Name": "TreasuryAccountId",
            "TypeId": 0,
            "Value": "bW9kbHB5L3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": [
              " Treasury account to receive claimed rewards lower than ED"
            ]
          },
          {
            "Name": "MinTotalFarmRewards",
            "TypeId": 6,
            "Value": "AEB6EPNaAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum total rewards to distribute from global farm during liquidity mining."
            ]
          },
          {
            "Name": "MinPlannedYieldingPeriods",
            "TypeId": 4,
            "Value": "aDgAAA==",
            "Docs": [
              " Minimum number of periods to run liquidity mining program."
            ]
          },
          {
            "Name": "MaxFarmEntriesPerDeposit",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " Maximum number of yield farms same LP shares can be re/deposited into. This value always",
              " MUST BE >= 1.         "
            ]
          },
          {
            "Name": "MaxYieldFarmsPerGlobalFarm",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " Max number of yield farms can exist in global farm. This includes all farms in the",
              " storage(active, stopped, terminated)."
            ]
          }
        ],
        "Errors": {
          "TypeId": 598
        },
        "Index": 96
      },
      "103": {
        "Name": "ParachainSystem",
        "Storage": {
          "Prefix": "ParachainSystem",
          "Entries": [
            {
              "Name": "UnincludedSegment",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 599,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Latest included block descendants the runtime accepted. In other words, these are",
                " ancestors of the currently executing block which have not been included in the observed",
                " relay-chain state.",
                "",
                " The segment length is limited by the capacity returned from the [`ConsensusHook`] configured",
                " in the pallet."
              ]
            },
            {
              "Name": "AggregatedUnincludedSegment",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 608,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Storage field that keeps track of bandwidth used by the unincluded segment along with the",
                " latest the latest HRMP watermark. Used for limiting the acceptance of new blocks with",
                " respect to relay chain constraints."
              ]
            },
            {
              "Name": "PendingValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 13,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " In case of a scheduled upgrade, this storage field contains the validation code to be",
                " applied.",
                "",
                " As soon as the relay chain gives us the go-ahead signal, we will overwrite the",
                " [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process",
                " with the new validation code. This concludes the upgrade process."
              ]
            },
            {
              "Name": "NewValidationCode",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 13,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Validation code that is set by the parachain and is to be communicated to collator and",
                " consequently the relay-chain.",
                "",
                " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                " the value."
              ]
            },
            {
              "Name": "ValidationData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 369,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The [`PersistedValidationData`] set for this block.",
                " This value is expected to be set only once per block and it's never stored",
                " in the trie."
              ]
            },
            {
              "Name": "DidSetValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 48,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Were the validation data set to notify the relay chain?"
              ]
            },
            {
              "Name": "LastRelayChainBlockNumber",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The relay chain block number associated with the last parachain block."
              ]
            },
            {
              "Name": "UpgradeRestrictionSignal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 609,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                " candidate will be invalid.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "Name": "UpgradeGoAhead",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 606,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Optional upgrade go-ahead signal from the relay-chain.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "Name": "RelayStateProof",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 371,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The state proof for the last relay parent block.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "RelevantMessagingState",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 611,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The snapshot of some state related to messaging relevant to the current parachain as per",
                " the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "HostConfiguration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 616,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The parachain host configuration that was obtained from the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "LastDmqMqcHead",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 618,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The last downward message queue chain head we have observed.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "LastHrmpMqcHeads",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 619,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The message queue chain heads we have observed per each channel incoming channel.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "ProcessedDownwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of downward messages processed in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpWatermark",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " HRMP watermark that was set in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpOutboundMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 622,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " HRMP messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "UpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 218,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "PendingUpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 218,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that are still pending and not yet send to the relay chain."
              ]
            },
            {
              "Name": "AnnouncedHrmpMessagesPerCandidate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                " announcing the weight of `on_initialize` and `on_finalize`."
              ]
            },
            {
              "Name": "ReservedXcmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 9,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "ReservedDmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 9,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing DMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "AuthorizedUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 624,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The next authorized upgrade, if there is one."
              ]
            },
            {
              "Name": "CustomValidationHeadData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 13,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A custom head data that should be returned as result of `validate_block`.",
                "",
                " See `Pallet::set_custom_validation_head_data` for more information."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 367
        },
        "Events": {
          "TypeId": 144
        },
        "Constants": [],
        "Errors": {
          "TypeId": 625
        },
        "Index": 103
      },
      "105": {
        "Name": "ParachainInfo",
        "Storage": {
          "Prefix": "ParachainInfo",
          "Entries": [
            {
              "Name": "ParachainId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 200,
                "Item2": null
              },
              "Default": "ZAAAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 380
        },
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 105
      },
      "5": {
        "Name": "Scheduler",
        "Storage": {
          "Prefix": "Scheduler",
          "Entries": [
            {
              "Name": "IncompleteSince",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Agenda",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 626
                }
              },
              "Default": "AA==",
              "Docs": [
                " Items to be executed, indexed by the block number that they should be executed on."
              ]
            },
            {
              "Name": "Lookup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 1,
                  "Value": 98
                }
              },
              "Default": "AA==",
              "Docs": [
                " Lookup from a name to the block number and index of the task.",
                "",
                " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                " identities."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 381
        },
        "Events": {
          "TypeId": 146
        },
        "Constants": [
          {
            "Name": "MaximumWeight",
            "TypeId": 9,
            "Value": "BwCg2yFdAgAAAQ==",
            "Docs": [
              " The maximum weight that may be scheduled per block for any dispatchables."
            ]
          },
          {
            "Name": "MaxScheduledPerBlock",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of scheduled calls in the queue for a single block.",
              "",
              " NOTE:",
              " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
              " higher limit under `runtime-benchmarks` feature."
            ]
          }
        ],
        "Errors": {
          "TypeId": 630
        },
        "Index": 5
      },
      "66": {
        "Name": "DCA",
        "Storage": {
          "Prefix": "DCA",
          "Entries": [
            {
              "Name": "ScheduleIdSequencer",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Id sequencer for schedules"
              ]
            },
            {
              "Name": "Schedules",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 383
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storing schedule details"
              ]
            },
            {
              "Name": "ScheduleOwnership",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 540,
                  "Value": 36
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storing schedule ownership"
              ]
            },
            {
              "Name": "RemainingAmounts",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " Keep tracking the remaining amounts to spend for DCA schedules"
              ]
            },
            {
              "Name": "RetriesOnError",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 2
                }
              },
              "Default": "AA==",
              "Docs": [
                " Keep tracking the retry on error flag for DCA schedules"
              ]
            },
            {
              "Name": "ScheduleIdsPerBlock",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 631
                }
              },
              "Default": "AA==",
              "Docs": [
                " Keep tracking of the schedule ids to be executed in the block"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 382
        },
        "Events": {
          "TypeId": 147
        },
        "Constants": [
          {
            "Name": "MaxPriceDifferenceBetweenBlocks",
            "TypeId": 88,
            "Value": "mDoAAA==",
            "Docs": [
              "Max price difference allowed between blocks"
            ]
          },
          {
            "Name": "MaxSchedulePerBlock",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              "The number of max schedules to be executed per block"
            ]
          },
          {
            "Name": "MaxNumberOfRetriesOnError",
            "TypeId": 2,
            "Value": "Aw==",
            "Docs": [
              "The number of max retries in case of trade limit error"
            ]
          },
          {
            "Name": "MinimumTradingLimit",
            "TypeId": 6,
            "Value": "6AMAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum trading limit for a single trade"
            ]
          },
          {
            "Name": "NativeAssetId",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " Native Asset Id"
            ]
          },
          {
            "Name": "MinBudgetInNativeCurrency",
            "TypeId": 6,
            "Value": "AIDGpH6NAwAAAAAAAAAAAA==",
            "Docs": [
              "Minimum budget to be able to schedule a DCA, specified in native currency"
            ]
          },
          {
            "Name": "FeeReceiver",
            "TypeId": 0,
            "Value": "bW9kbHB5L3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
            "Docs": [
              "The fee receiver for transaction fees"
            ]
          },
          {
            "Name": "NamedReserveId",
            "TypeId": 122,
            "Value": "ZGNhb3JkZXI=",
            "Docs": [
              " Named reserve identifier to store named reserves for orders of each users"
            ]
          }
        ],
        "Errors": {
          "TypeId": 632
        },
        "Index": 66
      },
      "107": {
        "Name": "PolkadotXcm",
        "Storage": {
          "Prefix": "PolkadotXcm",
          "Entries": [
            {
              "Name": "QueryCounter",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The latest available query index."
              ]
            },
            {
              "Name": "Queries",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 11,
                  "Value": 633
                }
              },
              "Default": "AA==",
              "Docs": [
                " The ongoing queries."
              ]
            },
            {
              "Name": "AssetTraps",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The existing asset traps.",
                "",
                " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                " times this pair has been trapped (usually just 1 if it exists at all)."
              ]
            },
            {
              "Name": "SafeXcmVersion",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                " then the destinations whose XCM version is unknown are considered unreachable."
              ]
            },
            {
              "Name": "SupportedVersion",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 638,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The Latest versions that we know various locations support."
              ]
            },
            {
              "Name": "VersionNotifiers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 638,
                  "Value": 11
                }
              },
              "Default": "AA==",
              "Docs": [
                " All locations that we have requested version notifications from."
              ]
            },
            {
              "Name": "VersionNotifyTargets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 638,
                  "Value": 639
                }
              },
              "Default": "AA==",
              "Docs": [
                " The target locations that are subscribed to our version changes, as well as the most recent",
                " of our versions we informed them of."
              ]
            },
            {
              "Name": "VersionDiscoveryQueue",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 640,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                " the `u32` counter is the number of times that a send to the destination has been attempted,",
                " which is used as a prioritization."
              ]
            },
            {
              "Name": "CurrentMigration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 643,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current migration's stage, if any."
              ]
            },
            {
              "Name": "RemoteLockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 645,
                  "Value": 647
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on a remote chain."
              ]
            },
            {
              "Name": "LockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 651
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on this chain."
              ]
            },
            {
              "Name": "XcmExecutionSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 48,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Global suspension state of the XCM executor."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 385
        },
        "Events": {
          "TypeId": 153
        },
        "Constants": [],
        "Errors": {
          "TypeId": 654
        },
        "Index": 107
      },
      "109": {
        "Name": "CumulusXcm",
        "Storage": null,
        "Calls": {
          "TypeId": 406
        },
        "Events": {
          "TypeId": 198
        },
        "Constants": [],
        "Errors": {
          "TypeId": 655
        },
        "Index": 109
      },
      "111": {
        "Name": "XcmpQueue",
        "Storage": {
          "Prefix": "XcmpQueue",
          "Entries": [
            {
              "Name": "InboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 656,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Status of the inbound XCMP channels."
              ]
            },
            {
              "Name": "InboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 662,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
              ]
            },
            {
              "Name": "OutboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 663,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                " and last outbound message. If the two indices are equal, then it indicates an empty",
                " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                " case of the need to send a high-priority signal message this block.",
                " The bool is true if there is a signal message waiting to be sent."
              ]
            },
            {
              "Name": "OutboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 666,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages outbound in a given XCMP channel."
              ]
            },
            {
              "Name": "SignalMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 200,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any signal messages waiting to be sent."
              ]
            },
            {
              "Name": "QueueConfig",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 667,
                "Item2": null
              },
              "Default": "AgAAAAUAAAABAAAAghoGAAAIAAcAyBeoBAIABAA=",
              "Docs": [
                " The configuration which controls the dynamics of the outbound queue."
              ]
            },
            {
              "Name": "Overweight",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 11,
                  "Value": 668
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages that exceeded max individual message weight budget.",
                "",
                " These message stay in this storage map until they are manually dispatched via",
                " `service_overweight`."
              ]
            },
            {
              "Name": "CounterForOverweight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "OverweightCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
                " available free overweight index."
              ]
            },
            {
              "Name": "DeferredIndices",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 200,
                  "Value": 669
                }
              },
              "Default": "AA==",
              "Docs": [
                " Index of deferred message buckets to process."
              ]
            },
            {
              "Name": "DeferredMessageBuckets",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 672,
                  "Value": 673
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage for deferred messages, indexed by para id, block and counter."
              ]
            },
            {
              "Name": "QueueSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 48,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
              ]
            },
            {
              "Name": "DeferredQueueSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 48,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether or not the Deferred queue is suspended from executing XCMs or not."
              ]
            },
            {
              "Name": "DeferAllBy",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether or not and if so by how much to defer all incoming XCMs."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 199
        },
        "Constants": [],
        "Errors": {
          "TypeId": 677
        },
        "Index": 111
      },
      "113": {
        "Name": "DmpQueue",
        "Storage": {
          "Prefix": "DmpQueue",
          "Entries": [
            {
              "Name": "Configuration",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 678,
                "Item2": null
              },
              "Default": "BwDkC1QCAgAEAA==",
              "Docs": [
                " The configuration."
              ]
            },
            {
              "Name": "PageIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 679,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The page index."
              ]
            },
            {
              "Name": "Pages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 680
                }
              },
              "Default": "AA==",
              "Docs": [
                " The queue pages."
              ]
            },
            {
              "Name": "Overweight",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 11,
                  "Value": 681
                }
              },
              "Default": "AA==",
              "Docs": [
                " The overweight messages."
              ]
            },
            {
              "Name": "CounterForOverweight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 407
        },
        "Events": {
          "TypeId": 202
        },
        "Constants": [],
        "Errors": {
          "TypeId": 682
        },
        "Index": 113
      },
      "135": {
        "Name": "OrmlXcm",
        "Storage": null,
        "Calls": {
          "TypeId": 408
        },
        "Events": {
          "TypeId": 203
        },
        "Constants": [],
        "Errors": {
          "TypeId": 683
        },
        "Index": 135
      },
      "137": {
        "Name": "XTokens",
        "Storage": null,
        "Calls": {
          "TypeId": 409
        },
        "Events": {
          "TypeId": 204
        },
        "Constants": [
          {
            "Name": "SelfLocation",
            "TypeId": 72,
            "Value": "AQEAyR8=",
            "Docs": [
              " Self chain location."
            ]
          },
          {
            "Name": "BaseXcmWeight",
            "TypeId": 9,
            "Value": "AoTXFwA=",
            "Docs": [
              " Base XCM weight.",
              "",
              " The actually weight for an XCM message is `T::BaseXcmWeight +",
              " T::Weigher::weight(&msg)`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 684
        },
        "Index": 137
      },
      "139": {
        "Name": "UnknownTokens",
        "Storage": {
          "Prefix": "UnknownTokens",
          "Entries": [
            {
              "Name": "ConcreteFungibleBalances",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 685,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Concrete fungible balances under a given location and a concrete",
                " fungible id.",
                "",
                " double_map: who, asset_id => u128"
              ]
            },
            {
              "Name": "AbstractFungibleBalances",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 686,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Abstract fungible balances under a given location and a abstract",
                " fungible id.",
                "",
                " double_map: who, asset_id => u128"
              ]
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 205
        },
        "Constants": [],
        "Errors": {
          "TypeId": 687
        },
        "Index": 139
      },
      "161": {
        "Name": "Authorship",
        "Storage": {
          "Prefix": "Authorship",
          "Entries": [
            {
              "Name": "Author",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Author of current block."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 161
      },
      "163": {
        "Name": "CollatorSelection",
        "Storage": {
          "Prefix": "CollatorSelection",
          "Entries": [
            {
              "Name": "Invulnerables",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 500,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The invulnerable, permissioned collators. This list must be sorted."
              ]
            },
            {
              "Name": "Candidates",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 688,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be",
                " mutually exclusive."
              ]
            },
            {
              "Name": "LastAuthoredBlock",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Last block authored by collator."
              ]
            },
            {
              "Name": "DesiredCandidates",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Desired number of candidates.",
                "",
                " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
              ]
            },
            {
              "Name": "CandidacyBond",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Fixed amount to deposit to become a collator.",
                "",
                " When a collator calls `leave_intent` they immediately receive the deposit back."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 412
        },
        "Events": {
          "TypeId": 206
        },
        "Constants": [],
        "Errors": {
          "TypeId": 691
        },
        "Index": 163
      },
      "165": {
        "Name": "Session",
        "Storage": {
          "Prefix": "Session",
          "Entries": [
            {
              "Name": "Validators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 207,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current set of validators."
              ]
            },
            {
              "Name": "CurrentIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Current index of the session."
              ]
            },
            {
              "Name": "QueuedChanged",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 48,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the underlying economic identities or weighting behind the validators",
                " has changed in the queued validator set."
              ]
            },
            {
              "Name": "QueuedKeys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 692,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The queued keys for the next session. When the next session begins, these keys",
                " will be used to determine the validator's session keys."
              ]
            },
            {
              "Name": "DisabledValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 101,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Indices of disabled validators.",
                "",
                " The vec is always kept sorted so that we can find whether a given validator is",
                " disabled using binary search. It gets cleared when `on_session_ending` returns",
                " a new set of identities."
              ]
            },
            {
              "Name": "NextKeys",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 414
                }
              },
              "Default": "AA==",
              "Docs": [
                " The next session keys for a validator."
              ]
            },
            {
              "Name": "KeyOwner",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 694,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 413
        },
        "Events": {
          "TypeId": 208
        },
        "Constants": [],
        "Errors": {
          "TypeId": 696
        },
        "Index": 165
      },
      "167": {
        "Name": "Aura",
        "Storage": {
          "Prefix": "Aura",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 697,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current authority set."
              ]
            },
            {
              "Name": "CurrentSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 699,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current slot of this block.",
                "",
                " This will be set in `on_initialize`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 167
      },
      "169": {
        "Name": "AuraExt",
        "Storage": {
          "Prefix": "AuraExt",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 697,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Serves as cache for the authorities.",
                "",
                " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                " but we require the old authorities to verify the seal when validating a PoV. This will",
                " always be updated to the latest AuRa authorities in `on_finalize`."
              ]
            },
            {
              "Name": "SlotInfo",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 700,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current slot paired with a number of authored blocks.",
                "",
                " Updated on each block initialization."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 169
      },
      "201": {
        "Name": "RelayChainInfo",
        "Storage": null,
        "Calls": {
          "TypeId": 417
        },
        "Events": {
          "TypeId": 209
        },
        "Constants": [],
        "Errors": {
          "TypeId": 701
        },
        "Index": 201
      },
      "202": {
        "Name": "EmaOracle",
        "Storage": {
          "Prefix": "EmaOracle",
          "Entries": [
            {
              "Name": "Accumulator",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 702,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Accumulator for oracle data in current block that will be recorded at the end of the block."
              ]
            },
            {
              "Name": "Oracles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 711,
                  "Value": 712
                }
              },
              "Default": "AA==",
              "Docs": [
                " Oracle storage keyed by data source, involved asset ids and the period length of the oracle.",
                "",
                " Stores the data entry as well as the block number when the oracle was first initialized."
              ]
            },
            {
              "Name": "WhitelistedAssets",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 713,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Assets that are whitelisted and tracked by the pallet."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 418
        },
        "Events": {
          "TypeId": 210
        },
        "Constants": [
          {
            "Name": "MaxUniqueEntries",
            "TypeId": 4,
            "Value": "KAAAAA==",
            "Docs": [
              " Maximum number of unique oracle entries expected in one block."
            ]
          }
        ],
        "Errors": {
          "TypeId": 716
        },
        "Index": 202
      },
      "203": {
        "Name": "MultiTransactionPayment",
        "Storage": {
          "Prefix": "MultiTransactionPayment",
          "Entries": [
            {
              "Name": "AccountCurrencyMap",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Account currency map"
              ]
            },
            {
              "Name": "AcceptedCurrencies",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 86
                }
              },
              "Default": "AA==",
              "Docs": [
                " Curated list of currencies which fees can be paid mapped to corresponding fallback price"
              ]
            },
            {
              "Name": "AcceptedCurrencyPrice",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 86
                }
              },
              "Default": "AA==",
              "Docs": [
                " Asset prices from the spot price provider or the fallback price if the price is not available. Updated at the beginning of every block."
              ]
            },
            {
              "Name": "TransactionCurrencyOverride",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 419
        },
        "Events": {
          "TypeId": 211
        },
        "Constants": [
          {
            "Name": "NativeAssetId",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " Native Asset"
            ]
          },
          {
            "Name": "EvmAssetId",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " EVM Asset"
            ]
          }
        ],
        "Errors": {
          "TypeId": 717
        },
        "Index": 203
      }
    },
    "Extrinsic": {
      "TypeId": 718,
      "Version": 4,
      "SignedExtensions": [
        {
          "SignedIdentifier": "CheckSpecVersion",
          "SignedExtType": 725,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckTxVersion",
          "SignedExtType": 726,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckGenesis",
          "SignedExtType": 727,
          "AddSignedExtType": 12
        },
        {
          "SignedIdentifier": "CheckMortality",
          "SignedExtType": 728,
          "AddSignedExtType": 12
        },
        {
          "SignedIdentifier": "CheckNonce",
          "SignedExtType": 730,
          "AddSignedExtType": 36
        },
        {
          "SignedIdentifier": "CheckWeight",
          "SignedExtType": 731,
          "AddSignedExtType": 36
        },
        {
          "SignedIdentifier": "ChargeTransactionPayment",
          "SignedExtType": 732,
          "AddSignedExtType": 36
        },
        {
          "SignedIdentifier": "ValidateClaim",
          "SignedExtType": 733,
          "AddSignedExtType": 36
        }
      ]
    },
    "TypeId": 735
  }
}