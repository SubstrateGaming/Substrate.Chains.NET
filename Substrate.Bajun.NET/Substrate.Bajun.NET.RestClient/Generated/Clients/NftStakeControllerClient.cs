//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Bajun.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Bajun.NET.NetApiExt.Generated.Model.sp_core.crypto;
   using Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.pallet;
   using Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.contracts;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Bajun.NET.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec;
   using Substrate.Bajun.NET.RestClient.Generated.Interfaces;
   
   public sealed class NftStakeControllerClient : BaseClient, INftStakeControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public NftStakeControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<AccountId32> GetOrganizer()
      {
         return await SendRequestAsync<AccountId32>(_httpClient, "nftstake/organizer");
      }
      public async Task<bool> SubscribeOrganizer()
      {
         return await _subscriptionClient.SubscribeAsync("NftStake.Organizer");
      }
      public async Task<EnumPalletLockedState> GetLockedState()
      {
         return await SendRequestAsync<EnumPalletLockedState>(_httpClient, "nftstake/lockedstate");
      }
      public async Task<bool> SubscribeLockedState()
      {
         return await _subscriptionClient.SubscribeAsync("NftStake.LockedState");
      }
      public async Task<StakingContract> GetActiveContracts(U128 key)
      {
         return await SendRequestAsync<StakingContract>(_httpClient, "nftstake/activecontracts", Substrate.Bajun.NET.NetApiExt.Generated.Storage.NftStakeStorage.ActiveContractsParams(key));
      }
      public async Task<bool> SubscribeActiveContracts(U128 key)
      {
         return await _subscriptionClient.SubscribeAsync("NftStake.ActiveContracts", Substrate.Bajun.NET.NetApiExt.Generated.Storage.NftStakeStorage.ActiveContractsParams(key));
      }
      public async Task<AccountId32> GetContractOwners(U128 key)
      {
         return await SendRequestAsync<AccountId32>(_httpClient, "nftstake/contractowners", Substrate.Bajun.NET.NetApiExt.Generated.Storage.NftStakeStorage.ContractOwnersParams(key));
      }
      public async Task<bool> SubscribeContractOwners(U128 key)
      {
         return await _subscriptionClient.SubscribeAsync("NftStake.ContractOwners", Substrate.Bajun.NET.NetApiExt.Generated.Storage.NftStakeStorage.ContractOwnersParams(key));
      }
      public async Task<U32> GetContractDurations(U128 key)
      {
         return await SendRequestAsync<U32>(_httpClient, "nftstake/contractdurations", Substrate.Bajun.NET.NetApiExt.Generated.Storage.NftStakeStorage.ContractDurationsParams(key));
      }
      public async Task<bool> SubscribeContractDurations(U128 key)
      {
         return await _subscriptionClient.SubscribeAsync("NftStake.ContractDurations", Substrate.Bajun.NET.NetApiExt.Generated.Storage.NftStakeStorage.ContractDurationsParams(key));
      }
      public async Task<BoundedVecT12> GetContractStakedAssets(U128 key)
      {
         return await SendRequestAsync<BoundedVecT12>(_httpClient, "nftstake/contractstakedassets", Substrate.Bajun.NET.NetApiExt.Generated.Storage.NftStakeStorage.ContractStakedAssetsParams(key));
      }
      public async Task<bool> SubscribeContractStakedAssets(U128 key)
      {
         return await _subscriptionClient.SubscribeAsync("NftStake.ContractStakedAssets", Substrate.Bajun.NET.NetApiExt.Generated.Storage.NftStakeStorage.ContractStakedAssetsParams(key));
      }
      public async Task<AccountId32> GetTreasuryAccount()
      {
         return await SendRequestAsync<AccountId32>(_httpClient, "nftstake/treasuryaccount");
      }
      public async Task<bool> SubscribeTreasuryAccount()
      {
         return await _subscriptionClient.SubscribeAsync("NftStake.TreasuryAccount");
      }
      public async Task<U32> GetContractCollectionId()
      {
         return await SendRequestAsync<U32>(_httpClient, "nftstake/contractcollectionid");
      }
      public async Task<bool> SubscribeContractCollectionId()
      {
         return await _subscriptionClient.SubscribeAsync("NftStake.ContractCollectionId");
      }
      public async Task<U128> GetNextContractId()
      {
         return await SendRequestAsync<U128>(_httpClient, "nftstake/nextcontractid");
      }
      public async Task<bool> SubscribeNextContractId()
      {
         return await _subscriptionClient.SubscribeAsync("NftStake.NextContractId");
      }
   }
}
