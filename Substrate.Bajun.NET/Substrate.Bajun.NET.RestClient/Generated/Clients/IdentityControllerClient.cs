//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Bajun.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_identity.types;
   using Substrate.Bajun.NET.NetApiExt.Generated.Model.sp_core.crypto;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Bajun.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.Bajun.NET.RestClient.Generated.Interfaces;
   
   public sealed class IdentityControllerClient : BaseClient, IIdentityControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public IdentityControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<BaseTuple<Registration, BaseOpt<BoundedVecT1>>> GetIdentityOf(AccountId32 key)
      {
         return await SendRequestAsync<BaseTuple<Registration, BaseOpt<BoundedVecT1>>>(_httpClient, "identity/identityof", Substrate.Bajun.NET.NetApiExt.Generated.Storage.IdentityStorage.IdentityOfParams(key));
      }
      public async Task<bool> SubscribeIdentityOf(AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Identity.IdentityOf", Substrate.Bajun.NET.NetApiExt.Generated.Storage.IdentityStorage.IdentityOfParams(key));
      }
      public async Task<BaseTuple<AccountId32, EnumData>> GetSuperOf(AccountId32 key)
      {
         return await SendRequestAsync<BaseTuple<AccountId32, EnumData>>(_httpClient, "identity/superof", Substrate.Bajun.NET.NetApiExt.Generated.Storage.IdentityStorage.SuperOfParams(key));
      }
      public async Task<bool> SubscribeSuperOf(AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Identity.SuperOf", Substrate.Bajun.NET.NetApiExt.Generated.Storage.IdentityStorage.SuperOfParams(key));
      }
      public async Task<BaseTuple<U128, BoundedVecT25>> GetSubsOf(AccountId32 key)
      {
         return await SendRequestAsync<BaseTuple<U128, BoundedVecT25>>(_httpClient, "identity/subsof", Substrate.Bajun.NET.NetApiExt.Generated.Storage.IdentityStorage.SubsOfParams(key));
      }
      public async Task<bool> SubscribeSubsOf(AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Identity.SubsOf", Substrate.Bajun.NET.NetApiExt.Generated.Storage.IdentityStorage.SubsOfParams(key));
      }
      public async Task<BoundedVecT26> GetRegistrars()
      {
         return await SendRequestAsync<BoundedVecT26>(_httpClient, "identity/registrars");
      }
      public async Task<bool> SubscribeRegistrars()
      {
         return await _subscriptionClient.SubscribeAsync("Identity.Registrars");
      }
      public async Task<AuthorityProperties> GetUsernameAuthorities(AccountId32 key)
      {
         return await SendRequestAsync<AuthorityProperties>(_httpClient, "identity/usernameauthorities", Substrate.Bajun.NET.NetApiExt.Generated.Storage.IdentityStorage.UsernameAuthoritiesParams(key));
      }
      public async Task<bool> SubscribeUsernameAuthorities(AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Identity.UsernameAuthorities", Substrate.Bajun.NET.NetApiExt.Generated.Storage.IdentityStorage.UsernameAuthoritiesParams(key));
      }
      public async Task<AccountId32> GetAccountOfUsername(BoundedVecT1 key)
      {
         return await SendRequestAsync<AccountId32>(_httpClient, "identity/accountofusername", Substrate.Bajun.NET.NetApiExt.Generated.Storage.IdentityStorage.AccountOfUsernameParams(key));
      }
      public async Task<bool> SubscribeAccountOfUsername(BoundedVecT1 key)
      {
         return await _subscriptionClient.SubscribeAsync("Identity.AccountOfUsername", Substrate.Bajun.NET.NetApiExt.Generated.Storage.IdentityStorage.AccountOfUsernameParams(key));
      }
      public async Task<BaseTuple<AccountId32, U32>> GetPendingUsernames(BoundedVecT1 key)
      {
         return await SendRequestAsync<BaseTuple<AccountId32, U32>>(_httpClient, "identity/pendingusernames", Substrate.Bajun.NET.NetApiExt.Generated.Storage.IdentityStorage.PendingUsernamesParams(key));
      }
      public async Task<bool> SubscribePendingUsernames(BoundedVecT1 key)
      {
         return await _subscriptionClient.SubscribeAsync("Identity.PendingUsernames", Substrate.Bajun.NET.NetApiExt.Generated.Storage.IdentityStorage.PendingUsernamesParams(key));
      }
   }
}
