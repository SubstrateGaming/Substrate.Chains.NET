//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Bajun.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Bajun.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.Bajun.NET.NetApiExt.Generated.Model.cumulus_pallet_xcmp_queue;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Bajun.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point;
   using Substrate.Bajun.NET.RestClient.Generated.Interfaces;
   
   public sealed class XcmpQueueControllerClient : BaseClient, IXcmpQueueControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public XcmpQueueControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<BoundedBTreeSetT1> GetInboundXcmpSuspended()
      {
         return await SendRequestAsync<BoundedBTreeSetT1>(_httpClient, "xcmpqueue/inboundxcmpsuspended");
      }
      public async Task<bool> SubscribeInboundXcmpSuspended()
      {
         return await _subscriptionClient.SubscribeAsync("XcmpQueue.InboundXcmpSuspended");
      }
      public async Task<BaseVec<OutboundChannelDetails>> GetOutboundXcmpStatus()
      {
         return await SendRequestAsync<BaseVec<OutboundChannelDetails>>(_httpClient, "xcmpqueue/outboundxcmpstatus");
      }
      public async Task<bool> SubscribeOutboundXcmpStatus()
      {
         return await _subscriptionClient.SubscribeAsync("XcmpQueue.OutboundXcmpStatus");
      }
      public async Task<BaseVec<U8>> GetOutboundXcmpMessages(BaseTuple<Substrate.Bajun.NET.NetApiExt.Generated.Model.polkadot_parachain_primitives.primitives.Id, U16> key)
      {
         return await SendRequestAsync<BaseVec<U8>>(_httpClient, "xcmpqueue/outboundxcmpmessages", Substrate.Bajun.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.OutboundXcmpMessagesParams(key));
      }
      public async Task<bool> SubscribeOutboundXcmpMessages(BaseTuple<Substrate.Bajun.NET.NetApiExt.Generated.Model.polkadot_parachain_primitives.primitives.Id, U16> key)
      {
         return await _subscriptionClient.SubscribeAsync("XcmpQueue.OutboundXcmpMessages", Substrate.Bajun.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.OutboundXcmpMessagesParams(key));
      }
      public async Task<BaseVec<U8>> GetSignalMessages(Substrate.Bajun.NET.NetApiExt.Generated.Model.polkadot_parachain_primitives.primitives.Id key)
      {
         return await SendRequestAsync<BaseVec<U8>>(_httpClient, "xcmpqueue/signalmessages", Substrate.Bajun.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.SignalMessagesParams(key));
      }
      public async Task<bool> SubscribeSignalMessages(Substrate.Bajun.NET.NetApiExt.Generated.Model.polkadot_parachain_primitives.primitives.Id key)
      {
         return await _subscriptionClient.SubscribeAsync("XcmpQueue.SignalMessages", Substrate.Bajun.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.SignalMessagesParams(key));
      }
      public async Task<QueueConfigData> GetQueueConfig()
      {
         return await SendRequestAsync<QueueConfigData>(_httpClient, "xcmpqueue/queueconfig");
      }
      public async Task<bool> SubscribeQueueConfig()
      {
         return await _subscriptionClient.SubscribeAsync("XcmpQueue.QueueConfig");
      }
      public async Task<Bool> GetQueueSuspended()
      {
         return await SendRequestAsync<Bool>(_httpClient, "xcmpqueue/queuesuspended");
      }
      public async Task<bool> SubscribeQueueSuspended()
      {
         return await _subscriptionClient.SubscribeAsync("XcmpQueue.QueueSuspended");
      }
      public async Task<FixedU128> GetDeliveryFeeFactor(Substrate.Bajun.NET.NetApiExt.Generated.Model.polkadot_parachain_primitives.primitives.Id key)
      {
         return await SendRequestAsync<FixedU128>(_httpClient, "xcmpqueue/deliveryfeefactor", Substrate.Bajun.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.DeliveryFeeFactorParams(key));
      }
      public async Task<bool> SubscribeDeliveryFeeFactor(Substrate.Bajun.NET.NetApiExt.Generated.Model.polkadot_parachain_primitives.primitives.Id key)
      {
         return await _subscriptionClient.SubscribeAsync("XcmpQueue.DeliveryFeeFactor", Substrate.Bajun.NET.NetApiExt.Generated.Storage.XcmpQueueStorage.DeliveryFeeFactorParams(key));
      }
   }
}
