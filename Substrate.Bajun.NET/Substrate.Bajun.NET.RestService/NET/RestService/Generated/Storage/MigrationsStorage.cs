//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Bajun.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IMigrationsStorage interface definition.
    /// </summary>
    public interface IMigrationsStorage : IStorage
    {
        
        /// <summary>
        /// >> Cursor
        ///  The currently active migration to run and its cursor.
        /// 
        ///  `None` indicates that no migration is running.
        /// </summary>
        Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_migrations.EnumMigrationCursor GetCursor();
        
        /// <summary>
        /// >> Historic
        ///  Set of all successfully executed migrations.
        /// 
        ///  This is used as blacklist, to not re-execute migrations that have not been removed from the
        ///  codebase yet. Governance can regularly clear this out via `clear_historic`.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple GetHistoric(string key);
    }
    
    /// <summary>
    /// MigrationsStorage class definition.
    /// </summary>
    public sealed class MigrationsStorage : IMigrationsStorage
    {
        
        /// <summary>
        /// _cursorTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_migrations.EnumMigrationCursor> _cursorTypedStorage;
        
        /// <summary>
        /// _historicTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> _historicTypedStorage;
        
        /// <summary>
        /// MigrationsStorage constructor.
        /// </summary>
        public MigrationsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.CursorTypedStorage = new TypedStorage<Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_migrations.EnumMigrationCursor>("Migrations.Cursor", storageDataProvider, storageChangeDelegates);
            this.HistoricTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple>("Migrations.Historic", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _cursorTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_migrations.EnumMigrationCursor> CursorTypedStorage
        {
            get
            {
                return _cursorTypedStorage;
            }
            set
            {
                _cursorTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _historicTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> HistoricTypedStorage
        {
            get
            {
                return _historicTypedStorage;
            }
            set
            {
                _historicTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await CursorTypedStorage.InitializeAsync("Migrations", "Cursor");
            await HistoricTypedStorage.InitializeAsync("Migrations", "Historic");
        }
        
        /// <summary>
        /// Implements any storage change for Migrations.Cursor
        /// </summary>
        [StorageChange("Migrations", "Cursor")]
        public void OnUpdateCursor(string data)
        {
            CursorTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Cursor
        ///  The currently active migration to run and its cursor.
        /// 
        ///  `None` indicates that no migration is running.
        /// </summary>
        public Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_migrations.EnumMigrationCursor GetCursor()
        {
            return CursorTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Migrations.Historic
        /// </summary>
        [StorageChange("Migrations", "Historic")]
        public void OnUpdateHistoric(string key, string data)
        {
            HistoricTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Historic
        ///  Set of all successfully executed migrations.
        /// 
        ///  This is used as blacklist, to not re-execute migrations that have not been removed from the
        ///  codebase yet. Governance can regularly clear this out via `clear_historic`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple GetHistoric(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (HistoricTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
