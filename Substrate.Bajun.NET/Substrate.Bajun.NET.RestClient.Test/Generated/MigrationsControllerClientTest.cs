//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Bajun.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Bajun.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.Bajun.NET.RestClient.Generated.Clients;
   using Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_migrations;
   using Substrate.NetApi.Model.Types.Base;
   
   public class MigrationsControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_migrations.EnumMigrationCursor GetTestValue2()
      {
         Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_migrations.EnumMigrationCursor result;
         result = new Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_migrations.EnumMigrationCursor();
         // NOT IMPLEMENTED >> Initialize Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_migrations.EnumMigrationCursor
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestCursor()
      {
         // Construct new Mockup client to test with.
         MigrationsControllerMockupClient mockupClient = new MigrationsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         MigrationsControllerClient rpcClient = new MigrationsControllerClient(_httpClient, subscriptionClient);
         Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_migrations.EnumMigrationCursor mockupValue = this.GetTestValue2();


         Assert.IsTrue(await rpcClient.SubscribeCursor());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetCursor(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.Bajun.NET.NetApiExt.Generated.Model.pallet_migrations.EnumMigrationCursor rpcResult = await rpcClient.GetCursor();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple GetTestValue4()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple();
         return result;
      }
      public Substrate.Bajun.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT17 GetTestValue5()
      {
         Substrate.Bajun.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT17 result;
         result = new Substrate.Bajun.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT17();
         result.Value = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestHistoric()
      {
         // Construct new Mockup client to test with.
         MigrationsControllerMockupClient mockupClient = new MigrationsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         MigrationsControllerClient rpcClient = new MigrationsControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Base.BaseTuple mockupValue = this.GetTestValue4();
         Substrate.Bajun.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT17 mockupKey = this.GetTestValue5();

         Assert.IsTrue(await rpcClient.SubscribeHistoric(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetHistoric(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Base.BaseTuple rpcResult = await rpcClient.GetHistoric(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
