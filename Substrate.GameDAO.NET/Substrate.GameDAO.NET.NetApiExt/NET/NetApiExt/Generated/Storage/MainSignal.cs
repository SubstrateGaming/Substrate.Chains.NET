//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.GameDAO.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> SignalStorage
    /// </summary>
    public sealed class SignalStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> SignalStorage Constructor
        /// </summary>
        public SignalStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Signal", "ProposalOf"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Proposal)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Signal", "ProposalStates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumProposalState)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Signal", "ProposalsByBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumBlockType, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Signal", "ProposalCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Signal", "ProposalVoting"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Voting)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Signal", "CampaignBalanceUsed"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> ProposalOfParams
        ///  Proposal by its hash (id).
        /// 
        ///  Proposals: map Hash => Proposal
        /// </summary>
        public static string ProposalOfParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Signal", "ProposalOf", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProposalOfDefault
        /// Default value as hex string
        /// </summary>
        public static string ProposalOfDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ProposalOf
        ///  Proposal by its hash (id).
        /// 
        ///  Proposals: map Hash => Proposal
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Proposal> ProposalOf(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = SignalStorage.ProposalOfParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Proposal>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ProposalStatesParams
        ///  Proposal's state: Created | Activated | Accepted | Rejected | Expired | Aborted | Finalized
        /// 
        ///  ProposalStates: map Hash => ProposalState
        /// </summary>
        public static string ProposalStatesParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Signal", "ProposalStates", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProposalStatesDefault
        /// Default value as hex string
        /// </summary>
        public static string ProposalStatesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ProposalStates
        ///  Proposal's state: Created | Activated | Accepted | Rejected | Expired | Aborted | Finalized
        /// 
        ///  ProposalStates: map Hash => ProposalState
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumProposalState> ProposalStates(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = SignalStorage.ProposalStatesParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumProposalState>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ProposalsByBlockParams
        ///  Proposals ending in a block.
        /// 
        ///  ProposalsByBlock: map BlockNumber => BoundedVec<Hash, MaxProposalsPerBlock>
        /// </summary>
        public static string ProposalsByBlockParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumBlockType, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("Signal", "ProposalsByBlock", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ProposalsByBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string ProposalsByBlockDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ProposalsByBlock
        ///  Proposals ending in a block.
        /// 
        ///  ProposalsByBlock: map BlockNumber => BoundedVec<Hash, MaxProposalsPerBlock>
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38> ProposalsByBlock(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumBlockType, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = SignalStorage.ProposalsByBlockParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ProposalCountParams
        /// </summary>
        public static string ProposalCountParams()
        {
            return RequestGenerator.GetStorage("Signal", "ProposalCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ProposalCountDefault
        /// Default value as hex string
        /// </summary>
        public static string ProposalCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ProposalCount
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ProposalCount(string blockhash, CancellationToken token)
        {
            string parameters = SignalStorage.ProposalCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ProposalVotingParams
        /// </summary>
        public static string ProposalVotingParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Signal", "ProposalVoting", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProposalVotingDefault
        /// Default value as hex string
        /// </summary>
        public static string ProposalVotingDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ProposalVoting
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Voting> ProposalVoting(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = SignalStorage.ProposalVotingParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Voting>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CampaignBalanceUsedParams
        ///  The amount of currency that a project has used.
        /// 
        ///  CampaignBalanceUsed: map Hash => Balance
        /// </summary>
        public static string CampaignBalanceUsedParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Signal", "CampaignBalanceUsed", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CampaignBalanceUsedDefault
        /// Default value as hex string
        /// </summary>
        public static string CampaignBalanceUsedDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> CampaignBalanceUsed
        ///  The amount of currency that a project has used.
        /// 
        ///  CampaignBalanceUsed: map Hash => Balance
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> CampaignBalanceUsed(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = SignalStorage.CampaignBalanceUsedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> SignalCalls
    /// </summary>
    public sealed class SignalCalls
    {
        
        /// <summary>
        /// >> proposal
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Proposal(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumProposalType proposal_type, Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 org_id, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 title, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 cid, Substrate.NetApi.Model.Types.Primitive.U32 expiry, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumMajority majority, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumUnit unit, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumScale scale, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> start, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Permill> quorum, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> deposit, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256> campaign_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> amount, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> beneficiary, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId> currency_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_type.Encode());
            byteArray.AddRange(org_id.Encode());
            byteArray.AddRange(title.Encode());
            byteArray.AddRange(cid.Encode());
            byteArray.AddRange(expiry.Encode());
            byteArray.AddRange(majority.Encode());
            byteArray.AddRange(unit.Encode());
            byteArray.AddRange(scale.Encode());
            byteArray.AddRange(start.Encode());
            byteArray.AddRange(quorum.Encode());
            byteArray.AddRange(deposit.Encode());
            byteArray.AddRange(campaign_id.Encode());
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(beneficiary.Encode());
            byteArray.AddRange(currency_id.Encode());
            return new Method(73, "Signal", 0, "proposal", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Vote(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 proposal_id, Substrate.NetApi.Model.Types.Primitive.Bool approve, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> deposit)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_id.Encode());
            byteArray.AddRange(approve.Encode());
            byteArray.AddRange(deposit.Encode());
            return new Method(73, "Signal", 1, "vote", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SignalConstants
    /// </summary>
    public sealed class SignalConstants
    {
        
        /// <summary>
        /// >> PaymentTokenId
        ///  The CurrencyId which is used as a payment token.
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId PaymentTokenId()
        {
            var result = new Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId();
            result.Create("0x0001");
            return result;
        }
        
        /// <summary>
        /// >> ProtocolTokenId
        ///  The CurrencyId which is used as a protokol token.
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId ProtocolTokenId()
        {
            var result = new Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId();
            result.Create("0x0002");
            return result;
        }
        
        /// <summary>
        /// >> MinProposalDeposit
        ///  Min deposit for Proposal creation
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinProposalDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0010A5D4E80000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> ProposalDurationLimits
        ///  Default time limit for a proposal in blocks.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> ProposalDurationLimits()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>();
            result.Create("0x64000000002F0D00");
            return result;
        }
        
        /// <summary>
        /// >> GameDAOTreasury
        ///  The GameDAO Treasury AccountId.
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GameDAOTreasury()
        {
            var result = new Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
            result.Create("0x6D6F646C67642F67647472730000000000000000000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxMembers
        ///  Max number of members per organization
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxMembers()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xE8030000");
            return result;
        }
        
        /// <summary>
        /// >> MaxProposalsPerBlock
        ///  The max number of proposals per one block.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxProposalsPerBlock()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> StringLimit
        ///  The maximum length of a string, stored on chain.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 StringLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x40000000");
            return result;
        }
        
        /// <summary>
        /// >> SlashingMajority
        ///  Majority of rejection >= {this value} * eligible voters --> slash deposit (default: 2/3).
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Permill SlashingMajority()
        {
            var result = new Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Permill();
            result.Create("0x2A2C0A00");
            return result;
        }
        
        /// <summary>
        /// >> GameDAOGetsFromSlashing
        ///  This part of slashing goes to GameDAO treasury (default: 1/4).
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Permill GameDAOGetsFromSlashing()
        {
            var result = new Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Permill();
            result.Create("0xA0860100");
            return result;
        }
    }
    
    /// <summary>
    /// >> SignalErrors
    /// </summary>
    public enum SignalErrors
    {
        
        /// <summary>
        /// >> AuthorizationError
        /// </summary>
        AuthorizationError,
        
        /// <summary>
        /// >> BalanceLow
        /// </summary>
        BalanceLow,
        
        /// <summary>
        /// >> CampaignUnsucceeded
        /// </summary>
        CampaignUnsucceeded,
        
        /// <summary>
        /// >> DepositInsufficient
        /// </summary>
        DepositInsufficient,
        
        /// <summary>
        /// >> DuplicateVote
        /// </summary>
        DuplicateVote,
        
        /// <summary>
        /// >> MissingParameter
        /// </summary>
        MissingParameter,
        
        /// <summary>
        /// >> OrgInactive
        /// </summary>
        OrgInactive,
        
        /// <summary>
        /// >> OutOfBounds
        /// </summary>
        OutOfBounds,
        
        /// <summary>
        /// >> ProposalExists
        /// </summary>
        ProposalExists,
        
        /// <summary>
        /// >> ProposalInvalid
        /// </summary>
        ProposalInvalid,
        
        /// <summary>
        /// >> ProposalNotActive
        /// </summary>
        ProposalNotActive,
        
        /// <summary>
        /// >> ProposalUnknown
        /// </summary>
        ProposalUnknown,
        
        /// <summary>
        /// >> TooManyProposals
        /// </summary>
        TooManyProposals,
        
        /// <summary>
        /// >> TreasuryBalanceLow
        /// </summary>
        TreasuryBalanceLow,
        
        /// <summary>
        /// >> TreasuryUnknown
        /// </summary>
        TreasuryUnknown,
        
        /// <summary>
        /// >> VoteLimitReached
        /// </summary>
        VoteLimitReached,
        
        /// <summary>
        /// >> VotingInvalid
        /// </summary>
        VotingInvalid,
        
        /// <summary>
        /// >> WrongParameter
        /// </summary>
        WrongParameter,
    }
}
