//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.GameDAO.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> BattlepassStorage
    /// </summary>
    public sealed class BattlepassStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> BattlepassStorage Constructor
        /// </summary>
        public BattlepassStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Battlepass", "Battlepasses"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Battlepass)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Battlepass", "BattlepassStates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumBattlepassState)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Battlepass", "BattlepassInfoByOrg"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.BattlepassInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Battlepass", "Points"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Battlepass", "Rewards"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Reward)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Battlepass", "RewardStates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumRewardState)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Battlepass", "ClaimedRewards"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Battlepass", "Levels"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Primitive.U8>), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Battlepass", "NftIndex"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> BattlepassesParams
        ///  Battlepass by its id.
        /// 
        ///  Battlepasses: map Hash => Battlepass
        /// </summary>
        public static string BattlepassesParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Battlepass", "Battlepasses", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BattlepassesDefault
        /// Default value as hex string
        /// </summary>
        public static string BattlepassesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Battlepasses
        ///  Battlepass by its id.
        /// 
        ///  Battlepasses: map Hash => Battlepass
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Battlepass> Battlepasses(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = BattlepassStorage.BattlepassesParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Battlepass>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BattlepassStatesParams
        ///  Battlepass state.
        /// 
        ///  BattlepassStates: map Hash => BattlepassState
        /// </summary>
        public static string BattlepassStatesParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Battlepass", "BattlepassStates", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BattlepassStatesDefault
        /// Default value as hex string
        /// </summary>
        public static string BattlepassStatesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BattlepassStates
        ///  Battlepass state.
        /// 
        ///  BattlepassStates: map Hash => BattlepassState
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumBattlepassState> BattlepassStates(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = BattlepassStorage.BattlepassStatesParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumBattlepassState>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BattlepassInfoByOrgParams
        ///  Battlepass info by organization.
        /// 
        ///  BattlepassInfoByOrg: map Hash => BattlepassInfo
        /// </summary>
        public static string BattlepassInfoByOrgParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Battlepass", "BattlepassInfoByOrg", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BattlepassInfoByOrgDefault
        /// Default value as hex string
        /// </summary>
        public static string BattlepassInfoByOrgDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BattlepassInfoByOrg
        ///  Battlepass info by organization.
        /// 
        ///  BattlepassInfoByOrg: map Hash => BattlepassInfo
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.BattlepassInfo> BattlepassInfoByOrg(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = BattlepassStorage.BattlepassInfoByOrgParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.BattlepassInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PointsParams
        ///  Total earned Points for users per each Battlepass.
        /// 
        ///  Points: map (Hash, AccountId) => u32
        /// </summary>
        public static string PointsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Battlepass", "Points", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> PointsDefault
        /// Default value as hex string
        /// </summary>
        public static string PointsDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> Points
        ///  Total earned Points for users per each Battlepass.
        /// 
        ///  Points: map (Hash, AccountId) => u32
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> Points(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = BattlepassStorage.PointsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RewardsParams
        ///  Reward by its id.
        /// 
        ///  Rewards: map Hash => Reward
        /// </summary>
        public static string RewardsParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Battlepass", "Rewards", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RewardsDefault
        /// Default value as hex string
        /// </summary>
        public static string RewardsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Rewards
        ///  Reward by its id.
        /// 
        ///  Rewards: map Hash => Reward
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Reward> Rewards(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = BattlepassStorage.RewardsParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Reward>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RewardStatesParams
        ///  Reward state by its id.
        /// 
        ///  RewardStates: map Hash => RewardState
        /// </summary>
        public static string RewardStatesParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Battlepass", "RewardStates", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RewardStatesDefault
        /// Default value as hex string
        /// </summary>
        public static string RewardStatesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RewardStates
        ///  Reward state by its id.
        /// 
        ///  RewardStates: map Hash => RewardState
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumRewardState> RewardStates(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = BattlepassStorage.RewardStatesParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumRewardState>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ClaimedRewardsParams
        ///  Claimed Reward-NFT by user.
        /// 
        ///  ClaimedRewards: map (Hash, AccountId) => ItemId
        /// </summary>
        public static string ClaimedRewardsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Battlepass", "ClaimedRewards", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ClaimedRewardsDefault
        /// Default value as hex string
        /// </summary>
        public static string ClaimedRewardsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ClaimedRewards
        ///  Claimed Reward-NFT by user.
        /// 
        ///  ClaimedRewards: map (Hash, AccountId) => ItemId
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ClaimedRewards(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = BattlepassStorage.ClaimedRewardsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LevelsParams
        ///  Achievement levels mapping for Battlepass
        /// 
        ///  Levels: map (Hash, u8) => u32
        /// </summary>
        public static string LevelsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Primitive.U8> key)
        {
            return RequestGenerator.GetStorage("Battlepass", "Levels", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> LevelsDefault
        /// Default value as hex string
        /// </summary>
        public static string LevelsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Levels
        ///  Achievement levels mapping for Battlepass
        /// 
        ///  Levels: map (Hash, u8) => u32
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> Levels(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Primitive.U8> key, string blockhash, CancellationToken token)
        {
            string parameters = BattlepassStorage.LevelsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NftIndexParams
        ///  A counter for created NFTs
        /// 
        ///  NftIndex: u32
        /// </summary>
        public static string NftIndexParams()
        {
            return RequestGenerator.GetStorage("Battlepass", "NftIndex", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NftIndexDefault
        /// Default value as hex string
        /// </summary>
        public static string NftIndexDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NftIndex
        ///  A counter for created NFTs
        /// 
        ///  NftIndex: u32
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NftIndex(string blockhash, CancellationToken token)
        {
            string parameters = BattlepassStorage.NftIndexParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> BattlepassCalls
    /// </summary>
    public sealed class BattlepassCalls
    {
        
        /// <summary>
        /// >> create_battlepass
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CreateBattlepass(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 org_id, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 name, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 cid, Substrate.NetApi.Model.Types.Primitive.U16 price)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(org_id.Encode());
            byteArray.AddRange(name.Encode());
            byteArray.AddRange(cid.Encode());
            byteArray.AddRange(price.Encode());
            return new Method(74, "Battlepass", 0, "create_battlepass", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_battlepass
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UpdateBattlepass(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 battlepass_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1> name, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1> cid, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U16> price)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(battlepass_id.Encode());
            byteArray.AddRange(name.Encode());
            byteArray.AddRange(cid.Encode());
            byteArray.AddRange(price.Encode());
            return new Method(74, "Battlepass", 1, "update_battlepass", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_battlepass
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClaimBattlepass(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 battlepass_id, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 claimer, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1> cid)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(battlepass_id.Encode());
            byteArray.AddRange(claimer.Encode());
            byteArray.AddRange(cid.Encode());
            return new Method(74, "Battlepass", 2, "claim_battlepass", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> activate_battlepass
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ActivateBattlepass(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 battlepass_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(battlepass_id.Encode());
            return new Method(74, "Battlepass", 3, "activate_battlepass", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> conclude_battlepass
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ConcludeBattlepass(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 battlepass_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(battlepass_id.Encode());
            return new Method(74, "Battlepass", 4, "conclude_battlepass", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_points
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetPoints(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 battlepass_id, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 account, Substrate.NetApi.Model.Types.Primitive.U32 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(battlepass_id.Encode());
            byteArray.AddRange(account.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(74, "Battlepass", 5, "set_points", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_reward
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CreateReward(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 battlepass_id, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 name, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 cid, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> max, Substrate.NetApi.Model.Types.Primitive.U8 level, Substrate.NetApi.Model.Types.Primitive.Bool transferable)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(battlepass_id.Encode());
            byteArray.AddRange(name.Encode());
            byteArray.AddRange(cid.Encode());
            byteArray.AddRange(max.Encode());
            byteArray.AddRange(level.Encode());
            byteArray.AddRange(transferable.Encode());
            return new Method(74, "Battlepass", 6, "create_reward", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_reward
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UpdateReward(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 reward_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1> name, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1> cid, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.Bool> transferable)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(reward_id.Encode());
            byteArray.AddRange(name.Encode());
            byteArray.AddRange(cid.Encode());
            byteArray.AddRange(transferable.Encode());
            return new Method(74, "Battlepass", 7, "update_reward", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> disable_reward
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method DisableReward(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 reward_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(reward_id.Encode());
            return new Method(74, "Battlepass", 8, "disable_reward", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_reward
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClaimReward(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 reward_id, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 claimer, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1> cid)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(reward_id.Encode());
            byteArray.AddRange(claimer.Encode());
            byteArray.AddRange(cid.Encode());
            return new Method(74, "Battlepass", 9, "claim_reward", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_level
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AddLevel(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 battlepass_id, Substrate.NetApi.Model.Types.Primitive.U8 level, Substrate.NetApi.Model.Types.Primitive.U32 points)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(battlepass_id.Encode());
            byteArray.AddRange(level.Encode());
            byteArray.AddRange(points.Encode());
            return new Method(74, "Battlepass", 10, "add_level", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_level
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveLevel(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 battlepass_id, Substrate.NetApi.Model.Types.Primitive.U8 level)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(battlepass_id.Encode());
            byteArray.AddRange(level.Encode());
            return new Method(74, "Battlepass", 11, "remove_level", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_bot
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AddBot(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 battlepass_id, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 bot)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(battlepass_id.Encode());
            byteArray.AddRange(bot.Encode());
            return new Method(74, "Battlepass", 12, "add_bot", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> BattlepassConstants
    /// </summary>
    public sealed class BattlepassConstants
    {
        
        /// <summary>
        /// >> StringLimit
        ///  The maximum length of a name, cid strings stored on-chain.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 StringLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x40000000");
            return result;
        }
        
        /// <summary>
        /// >> NativeTokenId
        ///  The CurrencyId which is used as a native token.
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId NativeTokenId()
        {
            var result = new Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId();
            result.Create("0x0000");
            return result;
        }
        
        /// <summary>
        /// >> ProtocolTokenId
        ///  The CurrencyId which is used as a protokol token.
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId ProtocolTokenId()
        {
            var result = new Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId();
            result.Create("0x0002");
            return result;
        }
    }
    
    /// <summary>
    /// >> BattlepassErrors
    /// </summary>
    public enum BattlepassErrors
    {
        
        /// <summary>
        /// >> AuthorizationError
        /// </summary>
        AuthorizationError,
        
        /// <summary>
        /// >> BattlepassExists
        /// </summary>
        BattlepassExists,
        
        /// <summary>
        /// >> BattlepassOwnershipExists
        /// </summary>
        BattlepassOwnershipExists,
        
        /// <summary>
        /// >> BattlepassOwnershipDoesntExist
        /// </summary>
        BattlepassOwnershipDoesntExist,
        
        /// <summary>
        /// >> BattlepassUnknown
        /// </summary>
        BattlepassUnknown,
        
        /// <summary>
        /// >> BattlepassStateUnknown
        /// </summary>
        BattlepassStateUnknown,
        
        /// <summary>
        /// >> BattlepassStateWrong
        /// </summary>
        BattlepassStateWrong,
        
        /// <summary>
        /// >> BattlepassInfoUnknown
        /// </summary>
        BattlepassInfoUnknown,
        
        /// <summary>
        /// >> LevelNotReached
        /// </summary>
        LevelNotReached,
        
        /// <summary>
        /// >> LevelUnknown
        /// </summary>
        LevelUnknown,
        
        /// <summary>
        /// >> NoAvailableCollectionId
        /// </summary>
        NoAvailableCollectionId,
        
        /// <summary>
        /// >> NoAvailableNftId
        /// </summary>
        NoAvailableNftId,
        
        /// <summary>
        /// >> NoChangesProvided
        /// </summary>
        NoChangesProvided,
        
        /// <summary>
        /// >> OrgPrimeUnknown
        /// </summary>
        OrgPrimeUnknown,
        
        /// <summary>
        /// >> OrgUnknownOrInactive
        /// </summary>
        OrgUnknownOrInactive,
        
        /// <summary>
        /// >> RewardClaimed
        /// </summary>
        RewardClaimed,
        
        /// <summary>
        /// >> RewardInactive
        /// </summary>
        RewardInactive,
        
        /// <summary>
        /// >> RewardUnknown
        /// </summary>
        RewardUnknown,
        
        /// <summary>
        /// >> RewardStateUnknown
        /// </summary>
        RewardStateUnknown,
    }
}
