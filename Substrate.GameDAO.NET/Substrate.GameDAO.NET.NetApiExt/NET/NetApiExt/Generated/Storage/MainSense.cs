//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.GameDAO.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> SenseStorage
    /// </summary>
    public sealed class SenseStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> SenseStorage Constructor
        /// </summary>
        public SenseStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Sense", "Entities"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_sense.types.Entity)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Sense", "EntityCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Sense", "Properties"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_sense.types.EnumPropertyType, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_sense.types.EntityProperty)));
        }
        
        /// <summary>
        /// >> EntitiesParams
        ///  Sense Entity of the account.
        /// 
        ///  Entities: map AccountId => Entity
        /// </summary>
        public static string EntitiesParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Sense", "Entities", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> EntitiesDefault
        /// Default value as hex string
        /// </summary>
        public static string EntitiesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Entities
        ///  Sense Entity of the account.
        /// 
        ///  Entities: map AccountId => Entity
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_sense.types.Entity> Entities(Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = SenseStorage.EntitiesParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_sense.types.Entity>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EntityCountParams
        ///  EntityCount. Increase per each entity creation.
        /// 
        ///  EntityCount: u128
        /// </summary>
        public static string EntityCountParams()
        {
            return RequestGenerator.GetStorage("Sense", "EntityCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EntityCountDefault
        /// Default value as hex string
        /// </summary>
        public static string EntityCountDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> EntityCount
        ///  EntityCount. Increase per each entity creation.
        /// 
        ///  EntityCount: u128
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> EntityCount(string blockhash, CancellationToken token)
        {
            string parameters = SenseStorage.EntityCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PropertiesParams
        ///  All properties of the account.
        /// 
        ///  Properties: map (PropertyType, AccountId) => EntityProperty
        /// </summary>
        public static string PropertiesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_sense.types.EnumPropertyType, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Sense", "Properties", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> PropertiesDefault
        /// Default value as hex string
        /// </summary>
        public static string PropertiesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Properties
        ///  All properties of the account.
        /// 
        ///  Properties: map (PropertyType, AccountId) => EntityProperty
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_sense.types.EntityProperty> Properties(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_sense.types.EnumPropertyType, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = SenseStorage.PropertiesParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_sense.types.EntityProperty>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> SenseCalls
    /// </summary>
    public sealed class SenseCalls
    {
        
        /// <summary>
        /// >> create_entity
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CreateEntity(Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 account_id, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 cid)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account_id.Encode());
            byteArray.AddRange(cid.Encode());
            return new Method(71, "Sense", 0, "create_entity", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_property
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UpdateProperty(Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 account_id, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_sense.types.EnumPropertyType property_type, Substrate.NetApi.Model.Types.Primitive.U8 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account_id.Encode());
            byteArray.AddRange(property_type.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(71, "Sense", 1, "update_property", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SenseConstants
    /// </summary>
    public sealed class SenseConstants
    {
        
        /// <summary>
        /// >> StringLimit
        ///  The maximum length of a name or symbol stored on-chain.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 StringLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x40000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> SenseErrors
    /// </summary>
    public enum SenseErrors
    {
        
        /// <summary>
        /// >> EntityExists
        /// Entity exists.
        /// </summary>
        EntityExists,
        
        /// <summary>
        /// >> EntityUnknown
        /// Entity unknown.
        /// </summary>
        EntityUnknown,
        
        /// <summary>
        /// >> InvalidParam
        /// Invalid param.
        /// </summary>
        InvalidParam,
        
        /// <summary>
        /// >> EntityPropertyOverflow
        /// Overflow adding a value to the entity property
        /// </summary>
        EntityPropertyOverflow,
        
        /// <summary>
        /// >> EntityPropertyUnknown
        /// No EntityProperty found for account.
        /// </summary>
        EntityPropertyUnknown,
        
        /// <summary>
        /// >> EntityCountOverflow
        /// Overflow adding a value to the entity count
        /// </summary>
        EntityCountOverflow,
    }
}
