//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.GameDAO.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> ControlStorage
    /// </summary>
    public sealed class ControlStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> ControlStorage Constructor
        /// </summary>
        public ControlStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Control", "Orgs"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.Org)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Control", "OrgStates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumOrgState)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Control", "Members"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Control", "OrgMemberCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Control", "MemberStates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumMemberState)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Control", "OrgTreasury"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Control", "OrgCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> OrgsParams
        ///  Org by its id.
        /// 
        ///  Org: map Hash => Org
        /// </summary>
        public static string OrgsParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Control", "Orgs", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OrgsDefault
        /// Default value as hex string
        /// </summary>
        public static string OrgsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Orgs
        ///  Org by its id.
        /// 
        ///  Org: map Hash => Org
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.Org> Orgs(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = ControlStorage.OrgsParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.Org>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OrgStatesParams
        ///  Org state (Inactive | Active | Locked) by org id.
        /// 
        ///  OrgStates: map Hash => OrgState
        /// </summary>
        public static string OrgStatesParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Control", "OrgStates", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OrgStatesDefault
        /// Default value as hex string
        /// </summary>
        public static string OrgStatesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OrgStates
        ///  Org state (Inactive | Active | Locked) by org id.
        /// 
        ///  OrgStates: map Hash => OrgState
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumOrgState> OrgStates(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = ControlStorage.OrgStatesParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumOrgState>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MembersParams
        ///  Org members list by org id.
        /// 
        ///  Members: map Hash => Vec<AccountId>
        /// </summary>
        public static string MembersParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Control", "Members", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MembersDefault
        /// Default value as hex string
        /// </summary>
        public static string MembersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Members
        ///  Org members list by org id.
        /// 
        ///  Members: map Hash => Vec<AccountId>
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37> Members(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = ControlStorage.MembersParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OrgMemberCountParams
        ///  Org members count by org id.
        /// 
        ///  OrgMemberCount: map Hash => MemberLimit
        /// </summary>
        public static string OrgMemberCountParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Control", "OrgMemberCount", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OrgMemberCountDefault
        /// Default value as hex string
        /// </summary>
        public static string OrgMemberCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> OrgMemberCount
        ///  Org members count by org id.
        /// 
        ///  OrgMemberCount: map Hash => MemberLimit
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> OrgMemberCount(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = ControlStorage.OrgMemberCountParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MemberStatesParams
        ///  Member state (Inactive | Active ...) by org Hash and member account.
        /// 
        ///  MemberStates: map Hash, AccountId => MemberState
        /// </summary>
        public static string MemberStatesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Control", "MemberStates", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> MemberStatesDefault
        /// Default value as hex string
        /// </summary>
        public static string MemberStatesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MemberStates
        ///  Member state (Inactive | Active ...) by org Hash and member account.
        /// 
        ///  MemberStates: map Hash, AccountId => MemberState
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumMemberState> MemberStates(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = ControlStorage.MemberStatesParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumMemberState>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OrgTreasuryParams
        ///  Treasury account of an Org.
        /// 
        ///  OrgTreasury: map Hash => AccountId
        /// </summary>
        public static string OrgTreasuryParams(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Control", "OrgTreasury", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OrgTreasuryDefault
        /// Default value as hex string
        /// </summary>
        public static string OrgTreasuryDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OrgTreasury
        ///  Treasury account of an Org.
        /// 
        ///  OrgTreasury: map Hash => AccountId
        /// </summary>
        public async Task<Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> OrgTreasury(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = ControlStorage.OrgTreasuryParams(key);
            var result = await _client.GetStorageAsync<Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OrgCountParams
        /// </summary>
        public static string OrgCountParams()
        {
            return RequestGenerator.GetStorage("Control", "OrgCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> OrgCountDefault
        /// Default value as hex string
        /// </summary>
        public static string OrgCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> OrgCount
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> OrgCount(string blockhash, CancellationToken token)
        {
            string parameters = ControlStorage.OrgCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> ControlCalls
    /// </summary>
    public sealed class ControlCalls
    {
        
        /// <summary>
        /// >> create_org
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CreateOrg(Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 name, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 cid, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumOrgType org_type, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumAccessModel access_model, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumFeeModel fee_model, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> member_limit, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> membership_fee, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId> gov_currency, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId> pay_currency, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> deposit)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(name.Encode());
            byteArray.AddRange(cid.Encode());
            byteArray.AddRange(org_type.Encode());
            byteArray.AddRange(access_model.Encode());
            byteArray.AddRange(fee_model.Encode());
            byteArray.AddRange(member_limit.Encode());
            byteArray.AddRange(membership_fee.Encode());
            byteArray.AddRange(gov_currency.Encode());
            byteArray.AddRange(pay_currency.Encode());
            byteArray.AddRange(deposit.Encode());
            return new Method(72, "Control", 0, "create_org", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_org
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UpdateOrg(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 org_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1> name, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1> cid, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> prime_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumOrgType> org_type, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumAccessModel> access_model, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> member_limit, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumFeeModel> fee_model, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> membership_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(org_id.Encode());
            byteArray.AddRange(name.Encode());
            byteArray.AddRange(cid.Encode());
            byteArray.AddRange(prime_id.Encode());
            byteArray.AddRange(org_type.Encode());
            byteArray.AddRange(access_model.Encode());
            byteArray.AddRange(member_limit.Encode());
            byteArray.AddRange(fee_model.Encode());
            byteArray.AddRange(membership_fee.Encode());
            return new Method(72, "Control", 1, "update_org", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> enable_org
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method EnableOrg(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 org_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(org_id.Encode());
            return new Method(72, "Control", 2, "enable_org", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> disable_org
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method DisableOrg(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 org_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(org_id.Encode());
            return new Method(72, "Control", 3, "disable_org", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_member
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AddMember(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 org_id, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(org_id.Encode());
            byteArray.AddRange(who.Encode());
            return new Method(72, "Control", 4, "add_member", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_member_state
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method UpdateMemberState(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 org_id, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 who, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumMemberState state)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(org_id.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(state.Encode());
            return new Method(72, "Control", 5, "update_member_state", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_member
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveMember(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 org_id, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(org_id.Encode());
            byteArray.AddRange(who.Encode());
            return new Method(72, "Control", 6, "remove_member", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> spend_funds
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SpendFunds(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256 org_id, Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId currency_id, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 beneficiary, Substrate.NetApi.Model.Types.Primitive.U128 amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(org_id.Encode());
            byteArray.AddRange(currency_id.Encode());
            byteArray.AddRange(beneficiary.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(72, "Control", 7, "spend_funds", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> ControlConstants
    /// </summary>
    public sealed class ControlConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  The ID for this pallet.
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Substrate.GameDAO.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x67642F636E74726C");
            return result;
        }
        
        /// <summary>
        /// >> MaxMembers
        ///  The max number of members per one org.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxMembers()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xE8030000");
            return result;
        }
        
        /// <summary>
        /// >> ProtocolTokenId
        ///  The CurrencyId which is used as a protokol token.
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId ProtocolTokenId()
        {
            var result = new Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId();
            result.Create("0x0002");
            return result;
        }
        
        /// <summary>
        /// >> PaymentTokenId
        ///  The CurrencyId which is used as a payment token.
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId PaymentTokenId()
        {
            var result = new Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId();
            result.Create("0x0001");
            return result;
        }
        
        /// <summary>
        /// >> MinimumDeposit
        ///  The min amount of the deposit which is locked during Org creation (in Protocol tokens).
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinimumDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00E40B54020000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> StringLimit
        ///  The maximum length of a name or cid stored on-chain.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 StringLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x40000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> ControlErrors
    /// </summary>
    public enum ControlErrors
    {
        
        /// <summary>
        /// >> AuthorizationError
        /// </summary>
        AuthorizationError,
        
        /// <summary>
        /// >> OrganizationExists
        /// Org Exists.
        /// </summary>
        OrganizationExists,
        
        /// <summary>
        /// >> OrganizationUnknown
        /// Org Unknown.
        /// </summary>
        OrganizationUnknown,
        
        /// <summary>
        /// >> BalanceLow
        /// Insufficient Balance to create Org.
        /// </summary>
        BalanceLow,
        
        /// <summary>
        /// >> MembershipLimitReached
        /// Membership Limit Reached.
        /// </summary>
        MembershipLimitReached,
        
        /// <summary>
        /// >> AlreadyMember
        /// Member Exists.
        /// </summary>
        AlreadyMember,
        
        /// <summary>
        /// >> NotMember
        /// Member Unknonw.
        /// </summary>
        NotMember,
        
        /// <summary>
        /// >> NoChangesProvided
        /// </summary>
        NoChangesProvided,
        
        /// <summary>
        /// >> TreasuryExists
        /// Treasury account already exists.
        /// </summary>
        TreasuryExists,
        
        /// <summary>
        /// >> TreasuryUnknown
        /// Treasury account does not exists.
        /// </summary>
        TreasuryUnknown,
        
        /// <summary>
        /// >> MinimumDepositTooLow
        /// Minimum deposit to Treasury too low.
        /// </summary>
        MinimumDepositTooLow,
        
        /// <summary>
        /// >> MissingParameter
        /// </summary>
        MissingParameter,
        
        /// <summary>
        /// >> WrongOrganizationType
        /// </summary>
        WrongOrganizationType,
    }
}
