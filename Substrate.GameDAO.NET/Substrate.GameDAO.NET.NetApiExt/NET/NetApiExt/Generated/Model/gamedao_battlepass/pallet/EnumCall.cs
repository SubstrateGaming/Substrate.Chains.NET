//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> create_battlepass
        /// Creates a Battlepass.
        /// Also creates a new collection to store claimed Battlepass NFTs.
        /// May be called only by Organization owner.
        /// 
        /// Parameters:
        /// - `org_id`: ID of the Organization for which to create a Battlepass.
        /// - `name`: Battlepass name.
        /// - `cid`: IPFS content identifier.
        /// - `price`: Price for the Battlepass subscription.
        /// </summary>
        create_battlepass = 0,
        
        /// <summary>
        /// >> update_battlepass
        /// Updates Battlepass.
        /// Also updates Collection's metadata if Battlepass CID has changed.
        /// May be called only by Organization owner.
        /// 
        /// Parameters:
        /// - `battlepass_id`: ID of the Battlepass to update.
        /// - `name`: Battlepass name.
        /// - `cid`: IPFS content identifier.
        /// - `price`: Price for the Battlepass subscription.
        /// </summary>
        update_battlepass = 1,
        
        /// <summary>
        /// >> claim_battlepass
        /// Claims the Battlepass-NFT for user who joined the Battlepass.
        /// This NFT may be used as a proof of a Battlepass membership.
        /// May be called by Organization owner or by a specially dedicated for this purpose account (Bot).
        /// 
        /// Parameters:
        /// - `battlepass_id`: ID of the Battlepass for which to claim NFT.
        /// - `claimer`: Account for which to claim NFT.
        /// - `cid`: If provided, store it in NFT's metadata. Otherwise, Battlepass CID will be stored there.
        /// </summary>
        claim_battlepass = 2,
        
        /// <summary>
        /// >> activate_battlepass
        /// Activates the Battlepass.
        /// Can activate only Battlepass in DRAFT state.
        /// May be called only by Organization owner.
        /// 
        /// Parameters:
        /// - `battlepass_id`: ID of the Battlepass to activate.
        /// </summary>
        activate_battlepass = 3,
        
        /// <summary>
        /// >> conclude_battlepass
        /// Concludes the Battlepass.
        /// Can conclude only Battlepass in ACTIVE state.
        /// After calling this extrinsic Battlepass state can not be changed any more.
        /// May be called only by Organization owner.
        /// 
        /// Parameters:
        /// - `battlepass_id`: ID of the Battlepass to conclude.
        /// </summary>
        conclude_battlepass = 4,
        
        /// <summary>
        /// >> set_points
        /// Sets Battlepass Points for user.
        /// So far no information about users' achievements is stored on chain. A separate trusted service (Bot)
        /// should collect such info, process it, validate it and call this extrinsic if user's Points have been updated. 
        /// May be called only by Organization owner or by a specially dedicated for this purpose account (Bot).
        /// 
        /// Parameters:
        /// - `battlepass_id`: ID of the Battlepass.
        /// - `account`: User's account for which to set Points.
        /// - `amount`: Amount of Points to set.
        /// </summary>
        set_points = 5,
        
        /// <summary>
        /// >> create_reward
        /// Creates a Reward Type for the Battlepass.
        /// Also creates a new collection to store claimed Reward NFTs.
        /// May be called only by Organization owner or by a specially dedicated for this purpose account (Bot).
        /// 
        /// Parameters:
        /// - `battlepass_id`: ID of the Battlepass to create a Reward for.
        /// - `name`: Name of the Reward.
        /// - `cid`: IPFS content identifier.
        /// - `max`: Maximum number of claimed rewards this Reward Type may have. Unlimited if empty.
        /// - `level`: Minimum Level user must reach to be able to claim this Reward Type.
        /// - `transferable`: Specifies whether claimed Reward NFTs could be transferred (sold) to another account.
        /// </summary>
        create_reward = 6,
        
        /// <summary>
        /// >> update_reward
        /// Updates Reward type.
        /// Also updates Collection's metadata if Reward's CID has changed.
        /// May be called only by Organization owner or by a specially dedicated for this purpose account (Bot).
        /// 
        /// Parameters:
        /// - `reward_id`: ID of the Reward Type to be updated.
        /// - `name`: Name of the Reward.
        /// - `cid`: IPFS content identifier.
        /// - `transferable`: Specifies whether claimed Reward NFTs could be transferred (sold) to another account.
        /// </summary>
        update_reward = 7,
        
        /// <summary>
        /// >> disable_reward
        /// Disables the Reward Type.
        /// After calling this extrinsic Reward Type state can not be changed any more.
        /// May be called only by Organization owner or by a specially dedicated for this purpose account (Bot).
        /// 
        /// Parameters:
        /// - `reward_id`: ID of the Reward Type to be disabled.
        /// </summary>
        disable_reward = 8,
        
        /// <summary>
        /// >> claim_reward
        /// Claims a reward for user.
        /// Mints a Reward NFT which may be used as a proof of a Reward posession.
        /// User must be eligible for the Reward Type to be able to claim it. Eligibility criteria are:
        /// - must be an Organization member.
        /// - must be a Battlepass member (posess a valid Battlepass NFT).
        /// - required achievement Level must be reached.
        /// May be called by Organization owner or by a specially dedicated for this purpose account (Bot).
        /// 
        /// Parameters:
        /// - `reward_id`: ID of the Reward Type to claim.
        /// - `claimer`: User account for who to claim the reward.
        /// - `cid`: If provided, store it in NFT's metadata. Otherwise, Reward CID will be stored there.
        /// </summary>
        claim_reward = 9,
        
        /// <summary>
        /// >> add_level
        /// Adds a new achievement Level.
        /// May be called only by Organization owner or by a specially dedicated for this purpose account (Bot).
        /// 
        /// Parameters:
        /// - `battlepass_id`: ID of the Battlepass to add a Level for.
        /// - `level`: Achievement Level.
        /// - `points`: Amount of Points needed to reach the Level.
        /// </summary>
        add_level = 10,
        
        /// <summary>
        /// >> remove_level
        /// Removes achievement Level.
        /// May be called only by Organization owner or by a specially dedicated for this purpose account (Bot).
        /// 
        /// Parameters:
        /// - `battlepass_id`: ID of the Battlepass to remove a Level for.
        /// - `level`: Achievement Level.
        /// </summary>
        remove_level = 11,
        
        /// <summary>
        /// >> add_bot
        /// Adds for a Battlepass a special trusted account (Bot) which will have a permission to update users' Points.
        /// May be called only by Organization owner.
        /// 
        /// Parameters:
        /// - `battlepass_id`: ID of the Battlepass to add a Bot for.
        /// - `bot`: Trusted Account ID.
        /// </summary>
        add_bot = 12,
    }
    
    /// <summary>
    /// >> 371 - Variant[gamedao_battlepass.pallet.Call]
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public sealed class EnumCall : BaseEnumExt<Call, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1, Substrate.NetApi.Model.Types.Primitive.U16>, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U16>>, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1>>, Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.U8, Substrate.NetApi.Model.Types.Primitive.Bool>, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.Bool>>, Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1>>, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Primitive.U8, Substrate.NetApi.Model.Types.Primitive.U32>, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Primitive.U8>, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>
    {
    }
}
