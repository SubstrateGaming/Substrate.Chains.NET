//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> create_org
        /// Create an on chain organization
        /// 
        /// Parameters:
        /// - `origin`: Org creator.
        /// - `name`: Org name.
        /// - `cid`: IPFS content identifier.
        /// - `org_type`: Individual | Company | Dao | Hybrid.
        /// - `access_model`:
        /// - `fee_model`:
        /// 
        /// Optional parameters:
        /// - `member_limit`: max members. Default: MaxMembers.
        /// - `member_fee`: fees amount to be applied to new members based on fee model (in `gov_asset` tokens).
        /// - `gov_asset`: control assets to empower actors.
        /// - `pay_asset`: asset used for payments.
        /// - `deposit`: initial deposit for the org treasury (in Protocol tokens).
        /// 
        /// Emits `OrgCreated` event when successful.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        create_org = 0,
        
        /// <summary>
        /// >> update_org
        /// Update Org
        /// 
        /// Allowed origins: Root or prime if OrgType::Individual
        /// 
        /// Parameters:
        /// - `org_id`: Org hash.
        /// 
        /// Optional parameters:
        /// - `prime_id`: new prime id.
        /// - `access_model`: new access model.
        /// - `member_limit`: new member limit.
        /// - `fee_model`: new fee model.
        /// - `membership_fee`: new membership fee.
        /// 
        /// Emits `OrgUpdated` event when successful.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        update_org = 1,
        
        /// <summary>
        /// >> enable_org
        /// Enable Org
        /// 
        /// Enables an Org to be used and changes it's state to Active.
        /// Allowed origins: Root or prime if OrgType::Individual
        /// 
        /// Parameters:
        /// - `org_id`: Org hash.
        /// 
        /// Emits `OrgEnabled` event when successful.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        enable_org = 2,
        
        /// <summary>
        /// >> disable_org
        /// Disable Org
        /// 
        /// Disables an Org to be used and changes it's state to Inactive.
        /// Allowed origins: Root or prime if OrgType::Individual
        /// 
        /// Parameters:
        /// - `org_id`: Org hash.
        /// 
        /// Emits `OrgDisabled` event when successful.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        disable_org = 3,
        
        /// <summary>
        /// >> add_member
        /// Add Member to Org
        /// 
        /// Parameters:
        /// - `org_id`: Org id
        /// - `who`: Account to be added
        /// 
        /// Emits `MemberAdded` event when successful.
        /// 
        /// Weight: `O(log n)`
        /// </summary>
        add_member = 4,
        
        /// <summary>
        /// >> update_member_state
        /// Update member state in the organization
        /// 
        /// Parameters:
        /// - `org_id`: Org id
        /// - `who`: Account to change state for
        /// - `state`: new state value
        /// 
        /// Emits `MemberUpdated` event when successful.
        /// 
        /// Weight: `O(log n)`
        /// </summary>
        update_member_state = 5,
        
        /// <summary>
        /// >> remove_member
        /// Remove member from Org
        /// 
        /// Parameters:
        /// - `org_id`: Org id
        /// - `who`: Account to be removed
        /// 
        /// Emits `MemberRemoved` event when successful.
        /// 
        /// Weight: `O(log n)`
        /// </summary>
        remove_member = 6,
        
        /// <summary>
        /// >> spend_funds
        /// Make spending from the org treasury
        /// 
        /// Allowed origins: Root or prime if OrgType::Individual
        /// 
        /// Parameters:
        /// - `org_id`: Org id
        /// - `currency_id`: currency to be spent
        /// - `beneficiary`: receiver account
        /// - `amount`: amount to be spent
        /// 
        /// Emits `FundsSpended` event when successful.
        /// 
        /// Weight: `O(1)`
        /// </summary>
        spend_funds = 7,
    }
    
    /// <summary>
    /// >> 362 - Variant[gamedao_control.pallet.Call]
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public sealed class EnumCall : BaseEnumExt<Call, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumOrgType, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumAccessModel, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumFeeModel, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>>, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumOrgType>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumAccessModel>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumFeeModel>, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>>, Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumMemberState>, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>, BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.zero_primitives.currency.EnumCurrencyId, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>>
    {
    }
}
