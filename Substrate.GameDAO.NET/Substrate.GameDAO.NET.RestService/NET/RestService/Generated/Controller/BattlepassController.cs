//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.GameDAO.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.GameDAO.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// BattlepassController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class BattlepassController : ControllerBase
    {
        
        private IBattlepassStorage _battlepassStorage;
        
        /// <summary>
        /// BattlepassController constructor.
        /// </summary>
        public BattlepassController(IBattlepassStorage battlepassStorage)
        {
            _battlepassStorage = battlepassStorage;
        }
        
        /// <summary>
        /// >> Battlepasses
        ///  Battlepass by its id.
        /// 
        ///  Battlepasses: map Hash => Battlepass
        /// </summary>
        [HttpGet("Battlepasses")]
        [ProducesResponseType(typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Battlepass), 200)]
        [StorageKeyBuilder(typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Storage.BattlepassStorage), "BattlepassesParams", typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256))]
        public IActionResult GetBattlepasses(string key)
        {
            return this.Ok(_battlepassStorage.GetBattlepasses(key));
        }
        
        /// <summary>
        /// >> BattlepassStates
        ///  Battlepass state.
        /// 
        ///  BattlepassStates: map Hash => BattlepassState
        /// </summary>
        [HttpGet("BattlepassStates")]
        [ProducesResponseType(typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumBattlepassState), 200)]
        [StorageKeyBuilder(typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Storage.BattlepassStorage), "BattlepassStatesParams", typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256))]
        public IActionResult GetBattlepassStates(string key)
        {
            return this.Ok(_battlepassStorage.GetBattlepassStates(key));
        }
        
        /// <summary>
        /// >> BattlepassInfoByOrg
        ///  Battlepass info by organization.
        /// 
        ///  BattlepassInfoByOrg: map Hash => BattlepassInfo
        /// </summary>
        [HttpGet("BattlepassInfoByOrg")]
        [ProducesResponseType(typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.BattlepassInfo), 200)]
        [StorageKeyBuilder(typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Storage.BattlepassStorage), "BattlepassInfoByOrgParams", typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256))]
        public IActionResult GetBattlepassInfoByOrg(string key)
        {
            return this.Ok(_battlepassStorage.GetBattlepassInfoByOrg(key));
        }
        
        /// <summary>
        /// >> Points
        ///  Total earned Points for users per each Battlepass.
        /// 
        ///  Points: map (Hash, AccountId) => u32
        /// </summary>
        [HttpGet("Points")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Storage.BattlepassStorage), "PointsParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>))]
        public IActionResult GetPoints(string key)
        {
            return this.Ok(_battlepassStorage.GetPoints(key));
        }
        
        /// <summary>
        /// >> Rewards
        ///  Reward by its id.
        /// 
        ///  Rewards: map Hash => Reward
        /// </summary>
        [HttpGet("Rewards")]
        [ProducesResponseType(typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Reward), 200)]
        [StorageKeyBuilder(typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Storage.BattlepassStorage), "RewardsParams", typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256))]
        public IActionResult GetRewards(string key)
        {
            return this.Ok(_battlepassStorage.GetRewards(key));
        }
        
        /// <summary>
        /// >> RewardStates
        ///  Reward state by its id.
        /// 
        ///  RewardStates: map Hash => RewardState
        /// </summary>
        [HttpGet("RewardStates")]
        [ProducesResponseType(typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumRewardState), 200)]
        [StorageKeyBuilder(typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Storage.BattlepassStorage), "RewardStatesParams", typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256))]
        public IActionResult GetRewardStates(string key)
        {
            return this.Ok(_battlepassStorage.GetRewardStates(key));
        }
        
        /// <summary>
        /// >> ClaimedRewards
        ///  Claimed Reward-NFT by user.
        /// 
        ///  ClaimedRewards: map (Hash, AccountId) => ItemId
        /// </summary>
        [HttpGet("ClaimedRewards")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Storage.BattlepassStorage), "ClaimedRewardsParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>))]
        public IActionResult GetClaimedRewards(string key)
        {
            return this.Ok(_battlepassStorage.GetClaimedRewards(key));
        }
        
        /// <summary>
        /// >> Levels
        ///  Achievement levels mapping for Battlepass
        /// 
        ///  Levels: map (Hash, u8) => u32
        /// </summary>
        [HttpGet("Levels")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Storage.BattlepassStorage), "LevelsParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Primitive.U8>))]
        public IActionResult GetLevels(string key)
        {
            return this.Ok(_battlepassStorage.GetLevels(key));
        }
        
        /// <summary>
        /// >> NftIndex
        ///  A counter for created NFTs
        /// 
        ///  NftIndex: u32
        /// </summary>
        [HttpGet("NftIndex")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.GameDAO.NET.NetApiExt.Generated.Storage.BattlepassStorage), "NftIndexParams")]
        public IActionResult GetNftIndex()
        {
            return this.Ok(_battlepassStorage.GetNftIndex());
        }
    }
}
