//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
using Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types;
using Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Primitive;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.GameDAO.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IFlowStorage interface definition.
    /// </summary>
    public interface IFlowStorage : IStorage
    {
        
        /// <summary>
        /// >> CampaignOf
        ///  Campaign by its id.
        /// 
        ///  CampaignOf: map Hash => Campaign
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.Campaign GetCampaignOf(string key);
        
        /// <summary>
        /// >> CampaignCount
        ///  Total number of campaigns.
        /// 
        ///  CampaignCount: u32
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetCampaignCount();
        
        /// <summary>
        /// >> CampaignBalance
        ///  Total contributions balance per campaign.
        /// 
        ///  CampaignBalance: map Hash => Balance
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetCampaignBalance(string key);
        
        /// <summary>
        /// >> CampaignContribution
        ///  Total contribution made by account id for particular campaign.
        ///  campaign id, account id -> contribution.
        /// 
        ///  CampaignContribution: double map Hash, AccountId => Balance
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetCampaignContribution(string key);
        
        /// <summary>
        /// >> CampaignStates
        ///  Campaign state by campaign id.
        ///  0 created, 1 activated, 2 paused, ...
        /// 
        ///  CampaignStates: map Hash => CampaignState
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.EnumCampaignState GetCampaignStates(string key);
        
        /// <summary>
        /// >> CampaignsByBlock
        ///  Campaigns starting/ending in block x.
        /// 
        ///  CampaignsByBlock: double map BlockType, BlockNumber => BoundedVec<Hash>
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT35 GetCampaignsByBlock(string key);
        
        /// <summary>
        /// >> CampaignFinalizationQueue
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.Campaign, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.EnumCampaignState, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT36> GetCampaignFinalizationQueue(string key);
        
        /// <summary>
        /// >> ProcessingOffset
        ///  Offset value - number of processed and sucessfully finalized contributions.
        ///  Used during campaign finalization for processing contributors in batches.
        ///  When MaxContributorsProcessing is achieved, set this offset to save the progress.
        /// 
        ///  ProcessingOffset: map Hash => u32
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetProcessingOffset(string key);
        
        /// <summary>
        /// >> CampaignContributorsCount
        ///  Total number of contributors for particular campaign. This is needed for voting
        ///  in order do determine eligible voters for Withdrawal proposal.
        /// 
        ///  CampaignContributors: map Hash => u64
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U64 GetCampaignContributorsCount(string key);
    }
    
    /// <summary>
    /// FlowStorage class definition.
    /// </summary>
    public sealed class FlowStorage : IFlowStorage
    {
        
        /// <summary>
        /// _campaignOfTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.Campaign> _campaignOfTypedStorage;
        
        /// <summary>
        /// _campaignCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _campaignCountTypedStorage;
        
        /// <summary>
        /// _campaignBalanceTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _campaignBalanceTypedStorage;
        
        /// <summary>
        /// _campaignContributionTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _campaignContributionTypedStorage;
        
        /// <summary>
        /// _campaignStatesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.EnumCampaignState> _campaignStatesTypedStorage;
        
        /// <summary>
        /// _campaignsByBlockTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT35> _campaignsByBlockTypedStorage;
        
        /// <summary>
        /// _campaignFinalizationQueueTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.Campaign, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.EnumCampaignState, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT36>> _campaignFinalizationQueueTypedStorage;
        
        /// <summary>
        /// _processingOffsetTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _processingOffsetTypedStorage;
        
        /// <summary>
        /// _campaignContributorsCountTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U64> _campaignContributorsCountTypedStorage;
        
        /// <summary>
        /// FlowStorage constructor.
        /// </summary>
        public FlowStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.CampaignOfTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.Campaign>("Flow.CampaignOf", storageDataProvider, storageChangeDelegates);
            this.CampaignCountTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Flow.CampaignCount", storageDataProvider, storageChangeDelegates);
            this.CampaignBalanceTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Flow.CampaignBalance", storageDataProvider, storageChangeDelegates);
            this.CampaignContributionTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Flow.CampaignContribution", storageDataProvider, storageChangeDelegates);
            this.CampaignStatesTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.EnumCampaignState>("Flow.CampaignStates", storageDataProvider, storageChangeDelegates);
            this.CampaignsByBlockTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT35>("Flow.CampaignsByBlock", storageDataProvider, storageChangeDelegates);
            this.CampaignFinalizationQueueTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.Campaign, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.EnumCampaignState, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT36>>("Flow.CampaignFinalizationQueue", storageDataProvider, storageChangeDelegates);
            this.ProcessingOffsetTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Flow.ProcessingOffset", storageDataProvider, storageChangeDelegates);
            this.CampaignContributorsCountTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U64>("Flow.CampaignContributorsCount", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _campaignOfTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.Campaign> CampaignOfTypedStorage
        {
            get
            {
                return _campaignOfTypedStorage;
            }
            set
            {
                _campaignOfTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _campaignCountTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> CampaignCountTypedStorage
        {
            get
            {
                return _campaignCountTypedStorage;
            }
            set
            {
                _campaignCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _campaignBalanceTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> CampaignBalanceTypedStorage
        {
            get
            {
                return _campaignBalanceTypedStorage;
            }
            set
            {
                _campaignBalanceTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _campaignContributionTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> CampaignContributionTypedStorage
        {
            get
            {
                return _campaignContributionTypedStorage;
            }
            set
            {
                _campaignContributionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _campaignStatesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.EnumCampaignState> CampaignStatesTypedStorage
        {
            get
            {
                return _campaignStatesTypedStorage;
            }
            set
            {
                _campaignStatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _campaignsByBlockTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT35> CampaignsByBlockTypedStorage
        {
            get
            {
                return _campaignsByBlockTypedStorage;
            }
            set
            {
                _campaignsByBlockTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _campaignFinalizationQueueTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.Campaign, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.EnumCampaignState, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT36>> CampaignFinalizationQueueTypedStorage
        {
            get
            {
                return _campaignFinalizationQueueTypedStorage;
            }
            set
            {
                _campaignFinalizationQueueTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _processingOffsetTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> ProcessingOffsetTypedStorage
        {
            get
            {
                return _processingOffsetTypedStorage;
            }
            set
            {
                _processingOffsetTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _campaignContributorsCountTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U64> CampaignContributorsCountTypedStorage
        {
            get
            {
                return _campaignContributorsCountTypedStorage;
            }
            set
            {
                _campaignContributorsCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await CampaignOfTypedStorage.InitializeAsync("Flow", "CampaignOf");
            await CampaignCountTypedStorage.InitializeAsync("Flow", "CampaignCount");
            await CampaignBalanceTypedStorage.InitializeAsync("Flow", "CampaignBalance");
            await CampaignContributionTypedStorage.InitializeAsync("Flow", "CampaignContribution");
            await CampaignStatesTypedStorage.InitializeAsync("Flow", "CampaignStates");
            await CampaignsByBlockTypedStorage.InitializeAsync("Flow", "CampaignsByBlock");
            await CampaignFinalizationQueueTypedStorage.InitializeAsync("Flow", "CampaignFinalizationQueue");
            await ProcessingOffsetTypedStorage.InitializeAsync("Flow", "ProcessingOffset");
            await CampaignContributorsCountTypedStorage.InitializeAsync("Flow", "CampaignContributorsCount");
        }
        
        /// <summary>
        /// Implements any storage change for Flow.CampaignOf
        /// </summary>
        [StorageChange("Flow", "CampaignOf")]
        public void OnUpdateCampaignOf(string key, string data)
        {
            CampaignOfTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CampaignOf
        ///  Campaign by its id.
        /// 
        ///  CampaignOf: map Hash => Campaign
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.Campaign GetCampaignOf(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CampaignOfTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.Campaign result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Flow.CampaignCount
        /// </summary>
        [StorageChange("Flow", "CampaignCount")]
        public void OnUpdateCampaignCount(string data)
        {
            CampaignCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CampaignCount
        ///  Total number of campaigns.
        /// 
        ///  CampaignCount: u32
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetCampaignCount()
        {
            return CampaignCountTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Flow.CampaignBalance
        /// </summary>
        [StorageChange("Flow", "CampaignBalance")]
        public void OnUpdateCampaignBalance(string key, string data)
        {
            CampaignBalanceTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CampaignBalance
        ///  Total contributions balance per campaign.
        /// 
        ///  CampaignBalance: map Hash => Balance
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetCampaignBalance(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CampaignBalanceTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Flow.CampaignContribution
        /// </summary>
        [StorageChange("Flow", "CampaignContribution")]
        public void OnUpdateCampaignContribution(string key, string data)
        {
            CampaignContributionTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CampaignContribution
        ///  Total contribution made by account id for particular campaign.
        ///  campaign id, account id -> contribution.
        /// 
        ///  CampaignContribution: double map Hash, AccountId => Balance
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetCampaignContribution(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CampaignContributionTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Flow.CampaignStates
        /// </summary>
        [StorageChange("Flow", "CampaignStates")]
        public void OnUpdateCampaignStates(string key, string data)
        {
            CampaignStatesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CampaignStates
        ///  Campaign state by campaign id.
        ///  0 created, 1 activated, 2 paused, ...
        /// 
        ///  CampaignStates: map Hash => CampaignState
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.EnumCampaignState GetCampaignStates(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CampaignStatesTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.EnumCampaignState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Flow.CampaignsByBlock
        /// </summary>
        [StorageChange("Flow", "CampaignsByBlock")]
        public void OnUpdateCampaignsByBlock(string key, string data)
        {
            CampaignsByBlockTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CampaignsByBlock
        ///  Campaigns starting/ending in block x.
        /// 
        ///  CampaignsByBlock: double map BlockType, BlockNumber => BoundedVec<Hash>
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT35 GetCampaignsByBlock(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CampaignsByBlockTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT35 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Flow.CampaignFinalizationQueue
        /// </summary>
        [StorageChange("Flow", "CampaignFinalizationQueue")]
        public void OnUpdateCampaignFinalizationQueue(string key, string data)
        {
            CampaignFinalizationQueueTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CampaignFinalizationQueue
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.Campaign, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.EnumCampaignState, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT36> GetCampaignFinalizationQueue(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CampaignFinalizationQueueTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.Campaign, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_flow.types.EnumCampaignState, Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT36> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Implements any storage change for Flow.ProcessingOffset
        /// </summary>
        [StorageChange("Flow", "ProcessingOffset")]
        public void OnUpdateProcessingOffset(string key, string data)
        {
            ProcessingOffsetTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ProcessingOffset
        ///  Offset value - number of processed and sucessfully finalized contributions.
        ///  Used during campaign finalization for processing contributors in batches.
        ///  When MaxContributorsProcessing is achieved, set this offset to save the progress.
        /// 
        ///  ProcessingOffset: map Hash => u32
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetProcessingOffset(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ProcessingOffsetTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Flow.CampaignContributorsCount
        /// </summary>
        [StorageChange("Flow", "CampaignContributorsCount")]
        public void OnUpdateCampaignContributorsCount(string key, string data)
        {
            CampaignContributorsCountTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CampaignContributorsCount
        ///  Total number of contributors for particular campaign. This is needed for voting
        ///  in order do determine eligible voters for Withdrawal proposal.
        /// 
        ///  CampaignContributors: map Hash => u64
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 GetCampaignContributorsCount(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CampaignContributorsCountTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U64 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }

    }
}
