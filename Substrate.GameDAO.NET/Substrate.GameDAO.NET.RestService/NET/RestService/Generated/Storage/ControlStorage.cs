//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.GameDAO.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IControlStorage interface definition.
    /// </summary>
    public interface IControlStorage : IStorage
    {
        
        /// <summary>
        /// >> Orgs
        ///  Org by its id.
        /// 
        ///  Org: map Hash => Org
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.Org GetOrgs(string key);
        
        /// <summary>
        /// >> OrgStates
        ///  Org state (Inactive | Active | Locked) by org id.
        /// 
        ///  OrgStates: map Hash => OrgState
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumOrgState GetOrgStates(string key);
        
        /// <summary>
        /// >> Members
        ///  Org members list by org id.
        /// 
        ///  Members: map Hash => Vec<AccountId>
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37 GetMembers(string key);
        
        /// <summary>
        /// >> OrgMemberCount
        ///  Org members count by org id.
        /// 
        ///  OrgMemberCount: map Hash => MemberLimit
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetOrgMemberCount(string key);
        
        /// <summary>
        /// >> MemberStates
        ///  Member state (Inactive | Active ...) by org Hash and member account.
        /// 
        ///  MemberStates: map Hash, AccountId => MemberState
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumMemberState GetMemberStates(string key);
        
        /// <summary>
        /// >> OrgTreasury
        ///  Treasury account of an Org.
        /// 
        ///  OrgTreasury: map Hash => AccountId
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetOrgTreasury(string key);
        
        /// <summary>
        /// >> OrgCount
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetOrgCount();
    }
    
    /// <summary>
    /// ControlStorage class definition.
    /// </summary>
    public sealed class ControlStorage : IControlStorage
    {
        
        /// <summary>
        /// _orgsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.Org> _orgsTypedStorage;
        
        /// <summary>
        /// _orgStatesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumOrgState> _orgStatesTypedStorage;
        
        /// <summary>
        /// _membersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37> _membersTypedStorage;
        
        /// <summary>
        /// _orgMemberCountTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _orgMemberCountTypedStorage;
        
        /// <summary>
        /// _memberStatesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumMemberState> _memberStatesTypedStorage;
        
        /// <summary>
        /// _orgTreasuryTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _orgTreasuryTypedStorage;
        
        /// <summary>
        /// _orgCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _orgCountTypedStorage;
        
        /// <summary>
        /// ControlStorage constructor.
        /// </summary>
        public ControlStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.OrgsTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.Org>("Control.Orgs", storageDataProvider, storageChangeDelegates);
            this.OrgStatesTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumOrgState>("Control.OrgStates", storageDataProvider, storageChangeDelegates);
            this.MembersTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37>("Control.Members", storageDataProvider, storageChangeDelegates);
            this.OrgMemberCountTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Control.OrgMemberCount", storageDataProvider, storageChangeDelegates);
            this.MemberStatesTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumMemberState>("Control.MemberStates", storageDataProvider, storageChangeDelegates);
            this.OrgTreasuryTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("Control.OrgTreasury", storageDataProvider, storageChangeDelegates);
            this.OrgCountTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Control.OrgCount", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _orgsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.Org> OrgsTypedStorage
        {
            get
            {
                return _orgsTypedStorage;
            }
            set
            {
                _orgsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _orgStatesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumOrgState> OrgStatesTypedStorage
        {
            get
            {
                return _orgStatesTypedStorage;
            }
            set
            {
                _orgStatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _membersTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37> MembersTypedStorage
        {
            get
            {
                return _membersTypedStorage;
            }
            set
            {
                _membersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _orgMemberCountTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> OrgMemberCountTypedStorage
        {
            get
            {
                return _orgMemberCountTypedStorage;
            }
            set
            {
                _orgMemberCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _memberStatesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumMemberState> MemberStatesTypedStorage
        {
            get
            {
                return _memberStatesTypedStorage;
            }
            set
            {
                _memberStatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _orgTreasuryTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> OrgTreasuryTypedStorage
        {
            get
            {
                return _orgTreasuryTypedStorage;
            }
            set
            {
                _orgTreasuryTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _orgCountTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> OrgCountTypedStorage
        {
            get
            {
                return _orgCountTypedStorage;
            }
            set
            {
                _orgCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await OrgsTypedStorage.InitializeAsync("Control", "Orgs");
            await OrgStatesTypedStorage.InitializeAsync("Control", "OrgStates");
            await MembersTypedStorage.InitializeAsync("Control", "Members");
            await OrgMemberCountTypedStorage.InitializeAsync("Control", "OrgMemberCount");
            await MemberStatesTypedStorage.InitializeAsync("Control", "MemberStates");
            await OrgTreasuryTypedStorage.InitializeAsync("Control", "OrgTreasury");
            await OrgCountTypedStorage.InitializeAsync("Control", "OrgCount");
        }
        
        /// <summary>
        /// Implements any storage change for Control.Orgs
        /// </summary>
        [StorageChange("Control", "Orgs")]
        public void OnUpdateOrgs(string key, string data)
        {
            OrgsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Orgs
        ///  Org by its id.
        /// 
        ///  Org: map Hash => Org
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.Org GetOrgs(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OrgsTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.Org result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Control.OrgStates
        /// </summary>
        [StorageChange("Control", "OrgStates")]
        public void OnUpdateOrgStates(string key, string data)
        {
            OrgStatesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> OrgStates
        ///  Org state (Inactive | Active | Locked) by org id.
        /// 
        ///  OrgStates: map Hash => OrgState
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumOrgState GetOrgStates(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OrgStatesTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumOrgState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Control.Members
        /// </summary>
        [StorageChange("Control", "Members")]
        public void OnUpdateMembers(string key, string data)
        {
            MembersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Members
        ///  Org members list by org id.
        /// 
        ///  Members: map Hash => Vec<AccountId>
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37 GetMembers(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MembersTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Control.OrgMemberCount
        /// </summary>
        [StorageChange("Control", "OrgMemberCount")]
        public void OnUpdateOrgMemberCount(string key, string data)
        {
            OrgMemberCountTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> OrgMemberCount
        ///  Org members count by org id.
        /// 
        ///  OrgMemberCount: map Hash => MemberLimit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetOrgMemberCount(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OrgMemberCountTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Control.MemberStates
        /// </summary>
        [StorageChange("Control", "MemberStates")]
        public void OnUpdateMemberStates(string key, string data)
        {
            MemberStatesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> MemberStates
        ///  Member state (Inactive | Active ...) by org Hash and member account.
        /// 
        ///  MemberStates: map Hash, AccountId => MemberState
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumMemberState GetMemberStates(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MemberStatesTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_control.types.EnumMemberState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Control.OrgTreasury
        /// </summary>
        [StorageChange("Control", "OrgTreasury")]
        public void OnUpdateOrgTreasury(string key, string data)
        {
            OrgTreasuryTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> OrgTreasury
        ///  Treasury account of an Org.
        /// 
        ///  OrgTreasury: map Hash => AccountId
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetOrgTreasury(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (OrgTreasuryTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Control.OrgCount
        /// </summary>
        [StorageChange("Control", "OrgCount")]
        public void OnUpdateOrgCount(string data)
        {
            OrgCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> OrgCount
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetOrgCount()
        {
            return OrgCountTypedStorage.Get();
        }
    }
}
