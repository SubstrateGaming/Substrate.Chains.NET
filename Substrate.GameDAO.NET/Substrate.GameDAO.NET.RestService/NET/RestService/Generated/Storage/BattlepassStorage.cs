//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.GameDAO.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IBattlepassStorage interface definition.
    /// </summary>
    public interface IBattlepassStorage : IStorage
    {
        
        /// <summary>
        /// >> Battlepasses
        ///  Battlepass by its id.
        /// 
        ///  Battlepasses: map Hash => Battlepass
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Battlepass GetBattlepasses(string key);
        
        /// <summary>
        /// >> BattlepassStates
        ///  Battlepass state.
        /// 
        ///  BattlepassStates: map Hash => BattlepassState
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumBattlepassState GetBattlepassStates(string key);
        
        /// <summary>
        /// >> BattlepassInfoByOrg
        ///  Battlepass info by organization.
        /// 
        ///  BattlepassInfoByOrg: map Hash => BattlepassInfo
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.BattlepassInfo GetBattlepassInfoByOrg(string key);
        
        /// <summary>
        /// >> Points
        ///  Total earned Points for users per each Battlepass.
        /// 
        ///  Points: map (Hash, AccountId) => u32
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetPoints(string key);
        
        /// <summary>
        /// >> Rewards
        ///  Reward by its id.
        /// 
        ///  Rewards: map Hash => Reward
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Reward GetRewards(string key);
        
        /// <summary>
        /// >> RewardStates
        ///  Reward state by its id.
        /// 
        ///  RewardStates: map Hash => RewardState
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumRewardState GetRewardStates(string key);
        
        /// <summary>
        /// >> ClaimedRewards
        ///  Claimed Reward-NFT by user.
        /// 
        ///  ClaimedRewards: map (Hash, AccountId) => ItemId
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetClaimedRewards(string key);
        
        /// <summary>
        /// >> Levels
        ///  Achievement levels mapping for Battlepass
        /// 
        ///  Levels: map (Hash, u8) => u32
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetLevels(string key);
        
        /// <summary>
        /// >> NftIndex
        ///  A counter for created NFTs
        /// 
        ///  NftIndex: u32
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetNftIndex();
    }
    
    /// <summary>
    /// BattlepassStorage class definition.
    /// </summary>
    public sealed class BattlepassStorage : IBattlepassStorage
    {
        
        /// <summary>
        /// _battlepassesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Battlepass> _battlepassesTypedStorage;
        
        /// <summary>
        /// _battlepassStatesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumBattlepassState> _battlepassStatesTypedStorage;
        
        /// <summary>
        /// _battlepassInfoByOrgTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.BattlepassInfo> _battlepassInfoByOrgTypedStorage;
        
        /// <summary>
        /// _pointsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _pointsTypedStorage;
        
        /// <summary>
        /// _rewardsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Reward> _rewardsTypedStorage;
        
        /// <summary>
        /// _rewardStatesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumRewardState> _rewardStatesTypedStorage;
        
        /// <summary>
        /// _claimedRewardsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _claimedRewardsTypedStorage;
        
        /// <summary>
        /// _levelsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _levelsTypedStorage;
        
        /// <summary>
        /// _nftIndexTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _nftIndexTypedStorage;
        
        /// <summary>
        /// BattlepassStorage constructor.
        /// </summary>
        public BattlepassStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.BattlepassesTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Battlepass>("Battlepass.Battlepasses", storageDataProvider, storageChangeDelegates);
            this.BattlepassStatesTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumBattlepassState>("Battlepass.BattlepassStates", storageDataProvider, storageChangeDelegates);
            this.BattlepassInfoByOrgTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.BattlepassInfo>("Battlepass.BattlepassInfoByOrg", storageDataProvider, storageChangeDelegates);
            this.PointsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Battlepass.Points", storageDataProvider, storageChangeDelegates);
            this.RewardsTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Reward>("Battlepass.Rewards", storageDataProvider, storageChangeDelegates);
            this.RewardStatesTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumRewardState>("Battlepass.RewardStates", storageDataProvider, storageChangeDelegates);
            this.ClaimedRewardsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Battlepass.ClaimedRewards", storageDataProvider, storageChangeDelegates);
            this.LevelsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Battlepass.Levels", storageDataProvider, storageChangeDelegates);
            this.NftIndexTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Battlepass.NftIndex", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _battlepassesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Battlepass> BattlepassesTypedStorage
        {
            get
            {
                return _battlepassesTypedStorage;
            }
            set
            {
                _battlepassesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _battlepassStatesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumBattlepassState> BattlepassStatesTypedStorage
        {
            get
            {
                return _battlepassStatesTypedStorage;
            }
            set
            {
                _battlepassStatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _battlepassInfoByOrgTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.BattlepassInfo> BattlepassInfoByOrgTypedStorage
        {
            get
            {
                return _battlepassInfoByOrgTypedStorage;
            }
            set
            {
                _battlepassInfoByOrgTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _pointsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> PointsTypedStorage
        {
            get
            {
                return _pointsTypedStorage;
            }
            set
            {
                _pointsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _rewardsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Reward> RewardsTypedStorage
        {
            get
            {
                return _rewardsTypedStorage;
            }
            set
            {
                _rewardsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _rewardStatesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumRewardState> RewardStatesTypedStorage
        {
            get
            {
                return _rewardStatesTypedStorage;
            }
            set
            {
                _rewardStatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _claimedRewardsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> ClaimedRewardsTypedStorage
        {
            get
            {
                return _claimedRewardsTypedStorage;
            }
            set
            {
                _claimedRewardsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _levelsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> LevelsTypedStorage
        {
            get
            {
                return _levelsTypedStorage;
            }
            set
            {
                _levelsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nftIndexTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> NftIndexTypedStorage
        {
            get
            {
                return _nftIndexTypedStorage;
            }
            set
            {
                _nftIndexTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await BattlepassesTypedStorage.InitializeAsync("Battlepass", "Battlepasses");
            await BattlepassStatesTypedStorage.InitializeAsync("Battlepass", "BattlepassStates");
            await BattlepassInfoByOrgTypedStorage.InitializeAsync("Battlepass", "BattlepassInfoByOrg");
            await PointsTypedStorage.InitializeAsync("Battlepass", "Points");
            await RewardsTypedStorage.InitializeAsync("Battlepass", "Rewards");
            await RewardStatesTypedStorage.InitializeAsync("Battlepass", "RewardStates");
            await ClaimedRewardsTypedStorage.InitializeAsync("Battlepass", "ClaimedRewards");
            await LevelsTypedStorage.InitializeAsync("Battlepass", "Levels");
            await NftIndexTypedStorage.InitializeAsync("Battlepass", "NftIndex");
        }
        
        /// <summary>
        /// Implements any storage change for Battlepass.Battlepasses
        /// </summary>
        [StorageChange("Battlepass", "Battlepasses")]
        public void OnUpdateBattlepasses(string key, string data)
        {
            BattlepassesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Battlepasses
        ///  Battlepass by its id.
        /// 
        ///  Battlepasses: map Hash => Battlepass
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Battlepass GetBattlepasses(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BattlepassesTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Battlepass result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Battlepass.BattlepassStates
        /// </summary>
        [StorageChange("Battlepass", "BattlepassStates")]
        public void OnUpdateBattlepassStates(string key, string data)
        {
            BattlepassStatesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> BattlepassStates
        ///  Battlepass state.
        /// 
        ///  BattlepassStates: map Hash => BattlepassState
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumBattlepassState GetBattlepassStates(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BattlepassStatesTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumBattlepassState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Battlepass.BattlepassInfoByOrg
        /// </summary>
        [StorageChange("Battlepass", "BattlepassInfoByOrg")]
        public void OnUpdateBattlepassInfoByOrg(string key, string data)
        {
            BattlepassInfoByOrgTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> BattlepassInfoByOrg
        ///  Battlepass info by organization.
        /// 
        ///  BattlepassInfoByOrg: map Hash => BattlepassInfo
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.BattlepassInfo GetBattlepassInfoByOrg(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BattlepassInfoByOrgTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.BattlepassInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Battlepass.Points
        /// </summary>
        [StorageChange("Battlepass", "Points")]
        public void OnUpdatePoints(string key, string data)
        {
            PointsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Points
        ///  Total earned Points for users per each Battlepass.
        /// 
        ///  Points: map (Hash, AccountId) => u32
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetPoints(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PointsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Battlepass.Rewards
        /// </summary>
        [StorageChange("Battlepass", "Rewards")]
        public void OnUpdateRewards(string key, string data)
        {
            RewardsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Rewards
        ///  Reward by its id.
        /// 
        ///  Rewards: map Hash => Reward
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Reward GetRewards(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RewardsTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.Reward result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Battlepass.RewardStates
        /// </summary>
        [StorageChange("Battlepass", "RewardStates")]
        public void OnUpdateRewardStates(string key, string data)
        {
            RewardStatesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> RewardStates
        ///  Reward state by its id.
        /// 
        ///  RewardStates: map Hash => RewardState
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumRewardState GetRewardStates(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RewardStatesTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_battlepass.types.EnumRewardState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Battlepass.ClaimedRewards
        /// </summary>
        [StorageChange("Battlepass", "ClaimedRewards")]
        public void OnUpdateClaimedRewards(string key, string data)
        {
            ClaimedRewardsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ClaimedRewards
        ///  Claimed Reward-NFT by user.
        /// 
        ///  ClaimedRewards: map (Hash, AccountId) => ItemId
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetClaimedRewards(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ClaimedRewardsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Battlepass.Levels
        /// </summary>
        [StorageChange("Battlepass", "Levels")]
        public void OnUpdateLevels(string key, string data)
        {
            LevelsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Levels
        ///  Achievement levels mapping for Battlepass
        /// 
        ///  Levels: map (Hash, u8) => u32
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetLevels(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LevelsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Battlepass.NftIndex
        /// </summary>
        [StorageChange("Battlepass", "NftIndex")]
        public void OnUpdateNftIndex(string data)
        {
            NftIndexTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NftIndex
        ///  A counter for created NFTs
        /// 
        ///  NftIndex: u32
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetNftIndex()
        {
            return NftIndexTypedStorage.Get();
        }
    }
}
