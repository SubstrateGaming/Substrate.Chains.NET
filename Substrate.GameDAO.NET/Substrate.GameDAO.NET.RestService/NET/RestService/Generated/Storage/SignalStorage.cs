//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.GameDAO.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// ISignalStorage interface definition.
    /// </summary>
    public interface ISignalStorage : IStorage
    {
        
        /// <summary>
        /// >> ProposalOf
        ///  Proposal by its hash (id).
        /// 
        ///  Proposals: map Hash => Proposal
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Proposal GetProposalOf(string key);
        
        /// <summary>
        /// >> ProposalStates
        ///  Proposal's state: Created | Activated | Accepted | Rejected | Expired | Aborted | Finalized
        /// 
        ///  ProposalStates: map Hash => ProposalState
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumProposalState GetProposalStates(string key);
        
        /// <summary>
        /// >> ProposalsByBlock
        ///  Proposals ending in a block.
        /// 
        ///  ProposalsByBlock: map BlockNumber => BoundedVec<Hash, MaxProposalsPerBlock>
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38 GetProposalsByBlock(string key);
        
        /// <summary>
        /// >> ProposalCount
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetProposalCount();
        
        /// <summary>
        /// >> ProposalVoting
        /// </summary>
        Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Voting GetProposalVoting(string key);
        
        /// <summary>
        /// >> CampaignBalanceUsed
        ///  The amount of currency that a project has used.
        /// 
        ///  CampaignBalanceUsed: map Hash => Balance
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetCampaignBalanceUsed(string key);
    }
    
    /// <summary>
    /// SignalStorage class definition.
    /// </summary>
    public sealed class SignalStorage : ISignalStorage
    {
        
        /// <summary>
        /// _proposalOfTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Proposal> _proposalOfTypedStorage;
        
        /// <summary>
        /// _proposalStatesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumProposalState> _proposalStatesTypedStorage;
        
        /// <summary>
        /// _proposalsByBlockTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38> _proposalsByBlockTypedStorage;
        
        /// <summary>
        /// _proposalCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _proposalCountTypedStorage;
        
        /// <summary>
        /// _proposalVotingTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Voting> _proposalVotingTypedStorage;
        
        /// <summary>
        /// _campaignBalanceUsedTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _campaignBalanceUsedTypedStorage;
        
        /// <summary>
        /// SignalStorage constructor.
        /// </summary>
        public SignalStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ProposalOfTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Proposal>("Signal.ProposalOf", storageDataProvider, storageChangeDelegates);
            this.ProposalStatesTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumProposalState>("Signal.ProposalStates", storageDataProvider, storageChangeDelegates);
            this.ProposalsByBlockTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38>("Signal.ProposalsByBlock", storageDataProvider, storageChangeDelegates);
            this.ProposalCountTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Signal.ProposalCount", storageDataProvider, storageChangeDelegates);
            this.ProposalVotingTypedStorage = new TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Voting>("Signal.ProposalVoting", storageDataProvider, storageChangeDelegates);
            this.CampaignBalanceUsedTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Signal.CampaignBalanceUsed", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _proposalOfTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Proposal> ProposalOfTypedStorage
        {
            get
            {
                return _proposalOfTypedStorage;
            }
            set
            {
                _proposalOfTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _proposalStatesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumProposalState> ProposalStatesTypedStorage
        {
            get
            {
                return _proposalStatesTypedStorage;
            }
            set
            {
                _proposalStatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _proposalsByBlockTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38> ProposalsByBlockTypedStorage
        {
            get
            {
                return _proposalsByBlockTypedStorage;
            }
            set
            {
                _proposalsByBlockTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _proposalCountTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> ProposalCountTypedStorage
        {
            get
            {
                return _proposalCountTypedStorage;
            }
            set
            {
                _proposalCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _proposalVotingTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Voting> ProposalVotingTypedStorage
        {
            get
            {
                return _proposalVotingTypedStorage;
            }
            set
            {
                _proposalVotingTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _campaignBalanceUsedTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> CampaignBalanceUsedTypedStorage
        {
            get
            {
                return _campaignBalanceUsedTypedStorage;
            }
            set
            {
                _campaignBalanceUsedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ProposalOfTypedStorage.InitializeAsync("Signal", "ProposalOf");
            await ProposalStatesTypedStorage.InitializeAsync("Signal", "ProposalStates");
            await ProposalsByBlockTypedStorage.InitializeAsync("Signal", "ProposalsByBlock");
            await ProposalCountTypedStorage.InitializeAsync("Signal", "ProposalCount");
            await ProposalVotingTypedStorage.InitializeAsync("Signal", "ProposalVoting");
            await CampaignBalanceUsedTypedStorage.InitializeAsync("Signal", "CampaignBalanceUsed");
        }
        
        /// <summary>
        /// Implements any storage change for Signal.ProposalOf
        /// </summary>
        [StorageChange("Signal", "ProposalOf")]
        public void OnUpdateProposalOf(string key, string data)
        {
            ProposalOfTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ProposalOf
        ///  Proposal by its hash (id).
        /// 
        ///  Proposals: map Hash => Proposal
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Proposal GetProposalOf(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ProposalOfTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Proposal result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Signal.ProposalStates
        /// </summary>
        [StorageChange("Signal", "ProposalStates")]
        public void OnUpdateProposalStates(string key, string data)
        {
            ProposalStatesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ProposalStates
        ///  Proposal's state: Created | Activated | Accepted | Rejected | Expired | Aborted | Finalized
        /// 
        ///  ProposalStates: map Hash => ProposalState
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumProposalState GetProposalStates(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ProposalStatesTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.EnumProposalState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Signal.ProposalsByBlock
        /// </summary>
        [StorageChange("Signal", "ProposalsByBlock")]
        public void OnUpdateProposalsByBlock(string key, string data)
        {
            ProposalsByBlockTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ProposalsByBlock
        ///  Proposals ending in a block.
        /// 
        ///  ProposalsByBlock: map BlockNumber => BoundedVec<Hash, MaxProposalsPerBlock>
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38 GetProposalsByBlock(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ProposalsByBlockTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Signal.ProposalCount
        /// </summary>
        [StorageChange("Signal", "ProposalCount")]
        public void OnUpdateProposalCount(string data)
        {
            ProposalCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ProposalCount
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetProposalCount()
        {
            return ProposalCountTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Signal.ProposalVoting
        /// </summary>
        [StorageChange("Signal", "ProposalVoting")]
        public void OnUpdateProposalVoting(string key, string data)
        {
            ProposalVotingTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ProposalVoting
        /// </summary>
        public Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Voting GetProposalVoting(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ProposalVotingTypedStorage.Dictionary.TryGetValue(key, out Substrate.GameDAO.NET.NetApiExt.Generated.Model.gamedao_signal.types.Voting result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Signal.CampaignBalanceUsed
        /// </summary>
        [StorageChange("Signal", "CampaignBalanceUsed")]
        public void OnUpdateCampaignBalanceUsed(string key, string data)
        {
            CampaignBalanceUsedTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> CampaignBalanceUsed
        ///  The amount of currency that a project has used.
        /// 
        ///  CampaignBalanceUsed: map Hash => Balance
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetCampaignBalanceUsed(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (CampaignBalanceUsedTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
