//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_xyk.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> create_pool
        /// Create new pool for given asset pair.
        /// 
        /// Registers new pool for given asset pair (`asset a` and `asset b`) in asset registry.
        /// Asset registry creates new id or returns previously created one if such pool existed before.
        /// 
        /// Pool is created with initial liquidity provided by `origin`.
        /// Shares are issued with specified initial price and represents proportion of asset in the pool.
        /// 
        /// Emits `PoolCreated` event when successful.
        /// </summary>
        create_pool = 0,
        
        /// <summary>
        /// >> add_liquidity
        /// Add liquidity to previously created asset pair pool.
        /// 
        /// Shares are issued with current price.
        /// 
        /// Emits `LiquidityAdded` event when successful.
        /// </summary>
        add_liquidity = 1,
        
        /// <summary>
        /// >> add_liquidity_with_limits
        /// </summary>
        add_liquidity_with_limits = 5,
        
        /// <summary>
        /// >> remove_liquidity
        /// Remove liquidity from specific liquidity pool in the form of burning shares.
        /// 
        /// If liquidity in the pool reaches 0, it is destroyed.
        /// 
        /// Emits 'LiquidityRemoved' when successful.
        /// Emits 'PoolDestroyed' when pool is destroyed.
        /// </summary>
        remove_liquidity = 2,
        
        /// <summary>
        /// >> remove_liquidity_with_limits
        /// </summary>
        remove_liquidity_with_limits = 6,
        
        /// <summary>
        /// >> sell
        /// Trade asset in for asset out.
        /// 
        /// Executes a swap of `asset_in` for `asset_out`. Price is determined by the liquidity pool.
        /// 
        /// `max_limit` - minimum amount of `asset_out` / amount of asset_out to be obtained from the pool in exchange for `asset_in`.
        /// 
        /// Emits `SellExecuted` when successful. Deprecated.
        /// Emits `pallet_broadcast::Swapped` when successful.
        /// </summary>
        sell = 3,
        
        /// <summary>
        /// >> buy
        /// Trade asset in for asset out.
        /// 
        /// Executes a swap of `asset_in` for `asset_out`. Price is determined by the liquidity pool.
        /// 
        /// `max_limit` - maximum amount of `asset_in` to be sold in exchange for `asset_out`.
        /// Emits `BuyExecuted` when successful. Deprecated.
        /// Emits `pallet_broadcast::Swapped` when successful.
        /// </summary>
        buy = 4,
    }
    
    /// <summary>
    /// >> 253 - Variant[pallet_xyk.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.create_pool);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.add_liquidity);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.add_liquidity_with_limits);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.remove_liquidity);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.remove_liquidity_with_limits);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.Bool>>(Call.sell);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.Bool>>(Call.buy);
        }
    }
}
