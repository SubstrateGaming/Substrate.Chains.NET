//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_tips.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> report_awesome
        /// Report something `reason` that deserves a tip and claim any eventual the finder's fee.
        /// 
        /// The dispatch origin for this call must be _Signed_.
        /// 
        /// Payment: `TipReportDepositBase` will be reserved from the origin account, as well as
        /// `DataDepositPerByte` for each byte in `reason`.
        /// 
        /// - `reason`: The reason for, or the thing that deserves, the tip; generally this will be
        ///   a UTF-8-encoded URL.
        /// - `who`: The account which should be credited for the tip.
        /// 
        /// Emits `NewTip` if successful.
        /// 
        /// ## Complexity
        /// - `O(R)` where `R` length of `reason`.
        ///   - encoding and hashing of 'reason'
        /// </summary>
        report_awesome = 0,
        
        /// <summary>
        /// >> retract_tip
        /// Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.
        /// 
        /// If successful, the original deposit will be unreserved.
        /// 
        /// The dispatch origin for this call must be _Signed_ and the tip identified by `hash`
        /// must have been reported by the signing account through `report_awesome` (and not
        /// through `tip_new`).
        /// 
        /// - `hash`: The identity of the open tip for which a tip value is declared. This is formed
        ///   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.
        /// 
        /// Emits `TipRetracted` if successful.
        /// 
        /// ## Complexity
        /// - `O(1)`
        ///   - Depends on the length of `T::Hash` which is fixed.
        /// </summary>
        retract_tip = 1,
        
        /// <summary>
        /// >> tip_new
        /// Give a tip for something new; no finder's fee will be taken.
        /// 
        /// The dispatch origin for this call must be _Signed_ and the signing account must be a
        /// member of the `Tippers` set.
        /// 
        /// - `reason`: The reason for, or the thing that deserves, the tip; generally this will be
        ///   a UTF-8-encoded URL.
        /// - `who`: The account which should be credited for the tip.
        /// - `tip_value`: The amount of tip that the sender would like to give. The median tip
        ///   value of active tippers will be given to the `who`.
        /// 
        /// Emits `NewTip` if successful.
        /// 
        /// ## Complexity
        /// - `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.
        ///   - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by
        ///     `ContainsLengthBound`. The actual cost depends on the implementation of
        ///     `T::Tippers`.
        ///   - `O(R)`: hashing and encoding of reason of length `R`
        /// </summary>
        tip_new = 2,
        
        /// <summary>
        /// >> tip
        /// Declare a tip value for an already-open tip.
        /// 
        /// The dispatch origin for this call must be _Signed_ and the signing account must be a
        /// member of the `Tippers` set.
        /// 
        /// - `hash`: The identity of the open tip for which a tip value is declared. This is formed
        ///   as the hash of the tuple of the hash of the original tip `reason` and the beneficiary
        ///   account ID.
        /// - `tip_value`: The amount of tip that the sender would like to give. The median tip
        ///   value of active tippers will be given to the `who`.
        /// 
        /// Emits `TipClosing` if the threshold of tippers has been reached and the countdown period
        /// has started.
        /// 
        /// ## Complexity
        /// - `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length `T`, insert
        ///   tip and check closing, `T` is charged as upper bound given by `ContainsLengthBound`.
        ///   The actual cost depends on the implementation of `T::Tippers`.
        /// 
        ///   Actually weight could be lower as it depends on how many tips are in `OpenTip` but it
        ///   is weighted as if almost full i.e of length `T-1`.
        /// </summary>
        tip = 3,
        
        /// <summary>
        /// >> close_tip
        /// Close and payout a tip.
        /// 
        /// The dispatch origin for this call must be _Signed_.
        /// 
        /// The tip identified by `hash` must have finished its countdown period.
        /// 
        /// - `hash`: The identity of the open tip for which a tip value is declared. This is formed
        ///   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.
        /// 
        /// ## Complexity
        /// - : `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length `T`. `T`
        ///   is charged as upper bound given by `ContainsLengthBound`. The actual cost depends on
        ///   the implementation of `T::Tippers`.
        /// </summary>
        close_tip = 4,
        
        /// <summary>
        /// >> slash_tip
        /// Remove and slash an already-open tip.
        /// 
        /// May only be called from `T::RejectOrigin`.
        /// 
        /// As a result, the finder is slashed and the deposits are lost.
        /// 
        /// Emits `TipSlashed` if successful.
        /// 
        /// ## Complexity
        /// - O(1).
        /// </summary>
        slash_tip = 5,
    }
    
    /// <summary>
    /// >> 172 - Variant[pallet_tips.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>, Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>(Call.report_awesome);
				AddTypeDecoder<Substrate.Hydration.NET.NetApiExt.Generated.Model.primitive_types.H256>(Call.retract_tip);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>, Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>>(Call.tip_new);
				AddTypeDecoder<BaseTuple<Substrate.Hydration.NET.NetApiExt.Generated.Model.primitive_types.H256, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128>>>(Call.tip);
				AddTypeDecoder<Substrate.Hydration.NET.NetApiExt.Generated.Model.primitive_types.H256>(Call.close_tip);
				AddTypeDecoder<Substrate.Hydration.NET.NetApiExt.Generated.Model.primitive_types.H256>(Call.slash_tip);
        }
    }
}
