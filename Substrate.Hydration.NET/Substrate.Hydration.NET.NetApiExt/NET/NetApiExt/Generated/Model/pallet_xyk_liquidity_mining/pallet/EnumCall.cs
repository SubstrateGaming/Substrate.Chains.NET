//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_xyk_liquidity_mining.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> create_global_farm
        /// Create new liquidity mining program with provided parameters.
        /// 
        /// `owner` account has to have at least `total_rewards` balance. This fund will be
        /// transferred from `owner` to farm account.
        /// In case of `reward_currency` is insufficient asset, farm's `owner` has to pay existential
        /// deposit for global farm account and for liquidity mining `pot` account.
        /// 
        /// The dispatch origin for this call must be `T::CreateOrigin`.
        /// !!!WARN: `T::CreateOrigin` has power over funds of `owner`'s account and it should be
        /// configured to trusted origin e.g Sudo or Governance.
        /// 
        /// Parameters:
        /// - `origin`: global farm's owner.
        /// - `total_rewards`: total rewards planned to distribute. This rewards will be
        /// distributed between all yield farms in the global farm.
        /// - `planned_yielding_periods`: planned number of periods to distribute `total_rewards`.
        /// WARN: THIS IS NOT HARD DEADLINE. Not all rewards have to be distributed in
        /// `planned_yielding_periods`. Rewards are distributed based on the situation in the yield
        /// farms and can be distributed in a longer time frame but never in the shorter time frame.
        /// - `blocks_per_period`:  number of blocks in a single period. Min. number of blocks per
        /// period is 1.
        /// - `incentivized_asset`: asset to be incentivized in XYK pools. All yield farms added into
        /// liq. mining program have to have `incentivized_asset` in their pair.
        /// - `reward_currency`: payoff currency of rewards.
        /// - `owner`: liq. mining program owner.
        /// - `yield_per_period`: percentage return on `reward_currency` of all farms p.a.
        /// - `min_deposit`: minimum amount which can be deposited to the farm
        /// - `price_adjustment`:
        /// Emits `GlobalFarmCreated` event when successful.
        /// </summary>
        create_global_farm = 0,
        
        /// <summary>
        /// >> update_global_farm
        /// Update global farm's prices adjustment.
        /// 
        /// Only farm's owner can perform this action.
        /// 
        /// Parameters:
        /// - `origin`: global farm's owner.
        /// - `global_farm_id`: id of the global farm to update
        /// - `price_adjustment`: new value for price adjustment
        /// 
        /// Emits `GlobalFarmUpdated` event when successful.
        /// </summary>
        update_global_farm = 1,
        
        /// <summary>
        /// >> terminate_global_farm
        /// Terminate existing liq. mining program.
        /// 
        /// Only farm owner can perform this action.
        /// 
        /// WARN: To successfully terminate a farm, farm have to be empty(all yield farms in he global farm must be terminated).
        /// 
        /// Parameters:
        /// - `origin`: global farm's owner.
        /// - `global_farm_id`: id of global farm to be terminated.
        /// 
        /// Emits `GlobalFarmTerminated` event when successful.
        /// </summary>
        terminate_global_farm = 2,
        
        /// <summary>
        /// >> create_yield_farm
        /// Add yield farm for given `asset_pair` XYK pool.
        ///  
        /// Only farm owner can perform this action.
        /// 
        /// Only XYKs with `asset_pair` with `incentivized_asset` can be added into the farm. XYK
        /// pool for `asset_pair` has to exist to successfully create yield farm.
        /// Yield farm for same `asset_pair` can exist only once in the global farm.
        /// 
        /// Parameters:
        /// - `origin`: global farm's owner.
        /// - `farm_id`: global farm id to which a yield farm will be added.
        /// - `asset_pair`: asset pair identifying yield farm. Liq. mining will be allowed for this
        /// `asset_pair` and one of the assets in the pair must be `incentivized_asset`.
        /// - `multiplier`: yield farm multiplier.
        /// - `loyalty_curve`: curve to calculate loyalty multiplier to distribute rewards to users
        /// with time incentive. `None` means no loyalty multiplier.
        /// 
        /// Emits `YieldFarmCreated` event when successful.
        /// </summary>
        create_yield_farm = 3,
        
        /// <summary>
        /// >> update_yield_farm
        /// Update yield farm multiplier.
        ///  
        /// Only farm owner can perform this action.
        /// 
        /// Parameters:
        /// - `origin`: global farm's owner.
        /// - `global_farm_id`: global farm id in which yield farm will be updated.
        /// - `asset_pair`: asset pair identifying yield farm in global farm.
        /// - `multiplier`: new yield farm multiplier.
        /// 
        /// Emits `YieldFarmUpdated` event when successful.
        /// </summary>
        update_yield_farm = 4,
        
        /// <summary>
        /// >> stop_yield_farm
        /// Stop liq. miming for specific yield farm.
        /// 
        /// This function claims rewards from `GlobalFarm` last time and stops yield farm
        /// incentivization from a `GlobalFarm`. Users will be able to only withdraw
        /// shares(with claiming) after calling this function.
        /// `deposit_shares()` and `claim_rewards()` are not allowed on canceled yield farm.
        ///  
        /// Only farm owner can perform this action.
        /// 
        /// Parameters:
        /// - `origin`: global farm's owner.
        /// - `global_farm_id`: farm id in which yield farm will be canceled.
        /// - `asset_pair`: asset pair identifying yield farm in the farm.
        /// 
        /// Emits `YieldFarmStopped` event when successful.
        /// </summary>
        stop_yield_farm = 5,
        
        /// <summary>
        /// >> resume_yield_farm
        /// Resume yield farm for stopped yield farm.
        /// 
        /// This function resume incentivization from `GlobalFarm` and restore full functionality
        /// for yield farm. Users will be able to deposit, claim and withdraw again.
        /// 
        /// WARN: Yield farm is NOT rewarded for time it was stopped.
        /// 
        /// Only farm owner can perform this action.
        /// 
        /// Parameters:
        /// - `origin`: global farm's owner.
        /// - `global_farm_id`: global farm id in which yield farm will be resumed.
        /// - `yield_farm_id`: id of yield farm to be resumed.
        /// - `asset_pair`: asset pair identifying yield farm in global farm.
        /// - `multiplier`: yield farm multiplier in the farm.
        /// 
        /// Emits `YieldFarmResumed` event when successful.
        /// </summary>
        resume_yield_farm = 6,
        
        /// <summary>
        /// >> terminate_yield_farm
        /// Remove yield farm
        /// 
        /// This function marks a yield farm as ready to be removed from storage when it's empty. Users will
        /// be able to only withdraw shares(without claiming rewards from yield farm). Unpaid rewards
        /// will be transferred back to global farm and will be used to distribute to other yield farms.
        /// 
        /// Yield farm must be stopped before calling this function.
        /// 
        /// Only global farm's owner can perform this action. Yield farm stays in the storage until it's
        /// empty(all farm entries are withdrawn). Last withdrawn from yield farm trigger removing from
        /// the storage.
        /// 
        /// Parameters:
        /// - `origin`: global farm's owner.
        /// - `global_farm_id`: farm id from which yield farm should be terminated.
        /// - `yield_farm_id`: id of yield farm to be terminated.
        /// - `asset_pair`: asset pair identifying yield farm in the global farm.
        /// 
        /// Emits `YieldFarmTerminated` event when successful.
        /// </summary>
        terminate_yield_farm = 7,
        
        /// <summary>
        /// >> deposit_shares
        /// Deposit LP shares to a liq. mining.
        /// 
        /// This function transfers LP shares from `origin` to pallet's account and mint nft for
        /// `origin` account. Minted nft represents deposit in the liq. mining.
        /// 
        /// Parameters:
        /// - `origin`: account depositing LP shares. This account has to have at least
        /// `shares_amount` of LP shares.
        /// - `global_farm_id`: id of global farm to which user wants to deposit LP shares.
        /// - `yield_farm_id`: id of yield farm to deposit to.
        /// - `asset_pair`: asset pair identifying LP shares user wants to deposit.
        /// - `shares_amount`: amount of LP shares user wants to deposit.
        /// 
        /// Emits `SharesDeposited` event when successful.
        /// </summary>
        deposit_shares = 8,
        
        /// <summary>
        /// >> join_farms
        /// Join multiple farms with a given share amount
        /// 
        /// The share is deposited to the first farm of the specified fams,
        /// and then redeposit the shares to the remaining farms
        /// 
        /// Parameters:
        /// - `origin`: account depositing LP shares. This account has to have at least
        /// - `farm_entries`: list of global farm id and yield farm id pairs to join
        /// - `asset_pair`: asset pair identifying LP shares user wants to deposit.
        /// - `shares_amount`: amount of LP shares user wants to deposit.
        /// 
        /// Emits `SharesDeposited` event for the first farm entry
        /// Emits `SharesRedeposited` event for each farm entry after the first one
        /// </summary>
        join_farms = 12,
        
        /// <summary>
        /// >> add_liquidity_and_join_farms
        /// Add liquidity to XYK pool and join multiple farms with a given share amount
        /// 
        /// The share is deposited to the first farm of the specified entries,
        /// and then redeposit the shares to the remaining farms
        /// 
        /// Parameters:
        /// - `origin`: account depositing LP shares. This account has to have at least
        /// - `asset_a`: asset id of the first asset in the pair
        /// - `asset_b`: asset id of the second asset in the pair
        /// - `amount_a`: amount of the first asset to deposit
        /// - `amount_b_max_limit`: maximum amount of the second asset to deposit
        /// - `farm_entries`: list of global farm id and yield farm id pairs to join
        /// 
        /// Emits `SharesDeposited` event for the first farm entry
        /// Emits `SharesRedeposited` event for each farm entry after the first one
        /// </summary>
        add_liquidity_and_join_farms = 13,
        
        /// <summary>
        /// >> redeposit_shares
        /// Redeposit already locked LP shares to another yield farm.
        /// 
        /// This function create yield farm entry for existing deposit. LP shares are not transferred
        /// and amount of LP shares is based on existing deposit.
        /// 
        /// This function DOESN'T create new deposit.
        /// 
        /// Parameters:
        /// - `origin`: account depositing LP shares. This account have to have at least
        /// - `global_farm_id`: global farm identifier.
        /// - `yield_farm_id`: yield farm identifier redepositing to.
        /// - `asset_pair`: asset pair identifying LP shares user want to deposit.
        /// - `deposit_id`: identifier of the deposit.
        /// 
        /// Emits `SharesRedeposited` event when successful.
        /// </summary>
        redeposit_shares = 9,
        
        /// <summary>
        /// >> claim_rewards
        /// Claim rewards from liq. mining for deposit represented by `nft_id`.
        /// 
        /// This function calculate user rewards from liq. mining and transfer rewards to `origin`
        /// account. Claiming in the same period is allowed only once.
        /// 
        /// Parameters:
        /// - `origin`: account owner of deposit(nft).
        /// - `deposit_id`: nft id representing deposit in the yield farm.
        /// - `yield_farm_id`: yield farm identifier to claim rewards from.
        /// 
        /// Emits `RewardClaimed` event when successful.
        /// </summary>
        claim_rewards = 10,
        
        /// <summary>
        /// >> withdraw_shares
        /// Withdraw LP shares from liq. mining with reward claiming if possible.
        /// 
        /// List of possible cases of transfers of LP shares and claimed rewards:
        /// 
        /// * yield farm is active(yield farm is not stopped) - claim and transfer rewards(if it
        /// wasn't claimed in this period) and transfer LP shares.
        /// * liq. mining is stopped - claim and transfer rewards(if it
        /// wasn't claimed in this period) and transfer LP shares.
        /// * yield farm was terminated - only LP shares will be transferred.
        /// * farm was terminated - only LP shares will be transferred.
        /// 
        /// User's unclaimable rewards will be transferred back to global farm's account.
        /// 
        /// Parameters:
        /// - `origin`: account owner of deposit(nft).
        /// - `deposit_id`: nft id representing deposit in the yield farm.
        /// - `yield_farm_id`: yield farm identifier to dithdraw shares from.
        /// - `asset_pair`: asset pair identifying yield farm in global farm.
        /// 
        /// Emits:
        /// * `RewardClaimed` if claim happen
        /// * `SharesWithdrawn` event when successful
        /// </summary>
        withdraw_shares = 11,
        
        /// <summary>
        /// >> exit_farms
        /// Exit from all specified yield farms
        /// 
        /// This function will attempt to withdraw shares and claim rewards (if available) from all
        /// specified yield farms for a given deposit.
        /// 
        /// Parameters:
        /// - `origin`: account owner of deposit(nft).
        /// - `deposit_id`: nft id representing deposit in the yield farm.
        /// - `asset_pair`: asset pair identifying yield farm(s) in global farm(s).
        /// - `farm_entries`: id(s) of yield farm(s) to exit from.
        /// 
        /// Emits:
        /// * `RewardClaimed` for each successful claim
        /// * `SharesWithdrawn` for each successful withdrawal
        /// * `DepositDestroyed` if the deposit is fully withdrawn
        /// 
        /// </summary>
        exit_farms = 14,
    }
    
    /// <summary>
    /// >> 280 - Variant[pallet_xyk_liquidity_mining.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_arithmetic.per_things.Perquintill, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128>>(Call.create_global_farm);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128>>(Call.update_global_farm);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Primitive.U32>(Call.terminate_global_farm);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_xyk.types.AssetPair, Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_liquidity_mining.types.LoyaltyCurve>>>(Call.create_yield_farm);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_xyk.types.AssetPair, Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128>>(Call.update_yield_farm);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_xyk.types.AssetPair>>(Call.stop_yield_farm);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_xyk.types.AssetPair, Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128>>(Call.resume_yield_farm);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_xyk.types.AssetPair>>(Call.terminate_yield_farm);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_xyk.types.AssetPair, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.deposit_shares);
				AddTypeDecoder<BaseTuple<Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15, Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_xyk.types.AssetPair, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.join_farms);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15>>(Call.add_liquidity_and_join_farms);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_xyk.types.AssetPair, Substrate.NetApi.Model.Types.Primitive.U128>>(Call.redeposit_shares);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.claim_rewards);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_xyk.types.AssetPair>>(Call.withdraw_shares);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U128, Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_xyk.types.AssetPair, Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT16>>(Call.exit_farms);
        }
    }
}
