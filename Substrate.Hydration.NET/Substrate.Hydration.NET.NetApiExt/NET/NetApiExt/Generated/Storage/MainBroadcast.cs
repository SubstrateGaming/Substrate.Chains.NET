//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Hydration.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> BroadcastStorage
    /// </summary>
    public sealed class BroadcastStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> BroadcastStorage Constructor
        /// </summary>
        public BroadcastStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broadcast", "IncrementalId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broadcast", "ExecutionContext"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Broadcast", "Swapper"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32)));
        }
        
        /// <summary>
        /// >> IncrementalIdParams
        ///  Next available incremental ID
        /// </summary>
        public static string IncrementalIdParams()
        {
            return RequestGenerator.GetStorage("Broadcast", "IncrementalId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> IncrementalIdDefault
        /// Default value as hex string
        /// </summary>
        public static string IncrementalIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> IncrementalId
        ///  Next available incremental ID
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> IncrementalId(string blockhash, CancellationToken token)
        {
            string parameters = BroadcastStorage.IncrementalIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ExecutionContextParams
        ///  Execution context to figure out where the trade is originated from
        /// </summary>
        public static string ExecutionContextParams()
        {
            return RequestGenerator.GetStorage("Broadcast", "ExecutionContext", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ExecutionContextDefault
        /// Default value as hex string
        /// </summary>
        public static string ExecutionContextDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ExecutionContext
        ///  Execution context to figure out where the trade is originated from
        /// </summary>
        public async Task<Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61> ExecutionContext(string blockhash, CancellationToken token)
        {
            string parameters = BroadcastStorage.ExecutionContextParams();
            var result = await _client.GetStorageAsync<Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SwapperParams
        /// If filled, we overwrite the original swapper. Mainly used in router to not to use temporary trade account
        /// </summary>
        public static string SwapperParams()
        {
            return RequestGenerator.GetStorage("Broadcast", "Swapper", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SwapperDefault
        /// Default value as hex string
        /// </summary>
        public static string SwapperDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Swapper
        /// If filled, we overwrite the original swapper. Mainly used in router to not to use temporary trade account
        /// </summary>
        public async Task<Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> Swapper(string blockhash, CancellationToken token)
        {
            string parameters = BroadcastStorage.SwapperParams();
            var result = await _client.GetStorageAsync<Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> BroadcastCalls
    /// </summary>
    public sealed class BroadcastCalls
    {
    }
    
    /// <summary>
    /// >> BroadcastConstants
    /// </summary>
    public sealed class BroadcastConstants
    {
    }
    
    /// <summary>
    /// >> BroadcastErrors
    /// </summary>
    public enum BroadcastErrors
    {
        
        /// <summary>
        /// >> ExecutionCallStackOverflow
        /// The execution context call stack has reached its maximum size
        /// </summary>
        ExecutionCallStackOverflow,
        
        /// <summary>
        /// >> ExecutionCallStackUnderflow
        /// The execution context call stack is empty, unable to decrease level
        /// </summary>
        ExecutionCallStackUnderflow,
    }
}
