//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Hydration.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> RouterStorage
    /// </summary>
    public sealed class RouterStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> RouterStorage Constructor
        /// </summary>
        public RouterStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Router", "Routes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Hydration.NET.NetApiExt.Generated.Model.hydradx_traits.router.AssetPair), typeof(Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11)));
        }
        
        /// <summary>
        /// >> RoutesParams
        ///  Storing routes for asset pairs
        /// </summary>
        public static string RoutesParams(Substrate.Hydration.NET.NetApiExt.Generated.Model.hydradx_traits.router.AssetPair key)
        {
            return RequestGenerator.GetStorage("Router", "Routes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RoutesDefault
        /// Default value as hex string
        /// </summary>
        public static string RoutesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Routes
        ///  Storing routes for asset pairs
        /// </summary>
        public async Task<Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11> Routes(Substrate.Hydration.NET.NetApiExt.Generated.Model.hydradx_traits.router.AssetPair key, string blockhash, CancellationToken token)
        {
            string parameters = RouterStorage.RoutesParams(key);
            var result = await _client.GetStorageAsync<Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> RouterCalls
    /// </summary>
    public sealed class RouterCalls
    {
        
        /// <summary>
        /// >> sell
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Sell(Substrate.NetApi.Model.Types.Primitive.U32 asset_in, Substrate.NetApi.Model.Types.Primitive.U32 asset_out, Substrate.NetApi.Model.Types.Primitive.U128 amount_in, Substrate.NetApi.Model.Types.Primitive.U128 min_amount_out, Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 route)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_in.Encode());
            byteArray.AddRange(asset_out.Encode());
            byteArray.AddRange(amount_in.Encode());
            byteArray.AddRange(min_amount_out.Encode());
            byteArray.AddRange(route.Encode());
            return new Method(67, "Router", 0, "sell", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> buy
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Buy(Substrate.NetApi.Model.Types.Primitive.U32 asset_in, Substrate.NetApi.Model.Types.Primitive.U32 asset_out, Substrate.NetApi.Model.Types.Primitive.U128 amount_out, Substrate.NetApi.Model.Types.Primitive.U128 max_amount_in, Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 route)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_in.Encode());
            byteArray.AddRange(asset_out.Encode());
            byteArray.AddRange(amount_out.Encode());
            byteArray.AddRange(max_amount_in.Encode());
            byteArray.AddRange(route.Encode());
            return new Method(67, "Router", 1, "buy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_route
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetRoute(Substrate.Hydration.NET.NetApiExt.Generated.Model.hydradx_traits.router.AssetPair asset_pair, Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 new_route)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_pair.Encode());
            byteArray.AddRange(new_route.Encode());
            return new Method(67, "Router", 2, "set_route", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_insert_route
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceInsertRoute(Substrate.Hydration.NET.NetApiExt.Generated.Model.hydradx_traits.router.AssetPair asset_pair, Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 new_route)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_pair.Encode());
            byteArray.AddRange(new_route.Encode());
            return new Method(67, "Router", 3, "force_insert_route", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> sell_all
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SellAll(Substrate.NetApi.Model.Types.Primitive.U32 asset_in, Substrate.NetApi.Model.Types.Primitive.U32 asset_out, Substrate.NetApi.Model.Types.Primitive.U128 min_amount_out, Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 route)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_in.Encode());
            byteArray.AddRange(asset_out.Encode());
            byteArray.AddRange(min_amount_out.Encode());
            byteArray.AddRange(route.Encode());
            return new Method(67, "Router", 4, "sell_all", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> RouterConstants
    /// </summary>
    public sealed class RouterConstants
    {
        
        /// <summary>
        /// >> NativeAssetId
        ///  Native Asset Id
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 NativeAssetId()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00000000");
            return result;
        }
        
        /// <summary>
        /// >> OraclePeriod
        ///  Oracle's price aggregation period.
        /// </summary>
        public Substrate.Hydration.NET.NetApiExt.Generated.Model.hydradx_traits.oracle.EnumOraclePeriod OraclePeriod()
        {
            var result = new Substrate.Hydration.NET.NetApiExt.Generated.Model.hydradx_traits.oracle.EnumOraclePeriod();
            result.Create("0x02");
            return result;
        }
    }
    
    /// <summary>
    /// >> RouterErrors
    /// </summary>
    public enum RouterErrors
    {
        
        /// <summary>
        /// >> TradingLimitReached
        /// The trading limit has been reached
        /// </summary>
        TradingLimitReached,
        
        /// <summary>
        /// >> MaxTradesExceeded
        /// The the max number of trades limit is reached
        /// </summary>
        MaxTradesExceeded,
        
        /// <summary>
        /// >> PoolNotSupported
        /// The AMM pool is not supported for executing trades
        /// </summary>
        PoolNotSupported,
        
        /// <summary>
        /// >> InsufficientBalance
        /// The user has not enough balance to execute the trade
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> RouteCalculationFailed
        /// The calculation of route trade amounts failed in the underlying AMM
        /// </summary>
        RouteCalculationFailed,
        
        /// <summary>
        /// >> InvalidRoute
        /// The route is invalid
        /// </summary>
        InvalidRoute,
        
        /// <summary>
        /// >> RouteUpdateIsNotSuccessful
        /// The route update was not successful
        /// </summary>
        RouteUpdateIsNotSuccessful,
        
        /// <summary>
        /// >> RouteHasNoOracle
        /// Route contains assets that has no oracle data
        /// </summary>
        RouteHasNoOracle,
        
        /// <summary>
        /// >> InvalidRouteExecution
        /// The route execution failed in the underlying AMM
        /// </summary>
        InvalidRouteExecution,
        
        /// <summary>
        /// >> NotAllowed
        /// Trading same assets is not allowed.
        /// </summary>
        NotAllowed,
    }
}
