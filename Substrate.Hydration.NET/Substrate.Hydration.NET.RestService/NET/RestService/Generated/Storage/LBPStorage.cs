//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Hydration.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// ILBPStorage interface definition.
    /// </summary>
    public interface ILBPStorage : IStorage
    {
        
        /// <summary>
        /// >> PoolData
        ///  Details of a pool.
        /// </summary>
        Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_lbp.Pool GetPoolData(string key);
        
        /// <summary>
        /// >> FeeCollectorWithAsset
        ///  Storage used for tracking existing fee collectors
        ///  Not more than one fee collector per asset possible
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.Bool GetFeeCollectorWithAsset(string key);
    }
    
    /// <summary>
    /// LBPStorage class definition.
    /// </summary>
    public sealed class LBPStorage : ILBPStorage
    {
        
        /// <summary>
        /// _poolDataTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_lbp.Pool> _poolDataTypedStorage;
        
        /// <summary>
        /// _feeCollectorWithAssetTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> _feeCollectorWithAssetTypedStorage;
        
        /// <summary>
        /// LBPStorage constructor.
        /// </summary>
        public LBPStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.PoolDataTypedStorage = new TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_lbp.Pool>("LBP.PoolData", storageDataProvider, storageChangeDelegates);
            this.FeeCollectorWithAssetTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool>("LBP.FeeCollectorWithAsset", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _poolDataTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_lbp.Pool> PoolDataTypedStorage
        {
            get
            {
                return _poolDataTypedStorage;
            }
            set
            {
                _poolDataTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _feeCollectorWithAssetTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.Bool> FeeCollectorWithAssetTypedStorage
        {
            get
            {
                return _feeCollectorWithAssetTypedStorage;
            }
            set
            {
                _feeCollectorWithAssetTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await PoolDataTypedStorage.InitializeAsync("LBP", "PoolData");
            await FeeCollectorWithAssetTypedStorage.InitializeAsync("LBP", "FeeCollectorWithAsset");
        }
        
        /// <summary>
        /// Implements any storage change for LBP.PoolData
        /// </summary>
        [StorageChange("LBP", "PoolData")]
        public void OnUpdatePoolData(string key, string data)
        {
            PoolDataTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> PoolData
        ///  Details of a pool.
        /// </summary>
        public Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_lbp.Pool GetPoolData(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PoolDataTypedStorage.Dictionary.TryGetValue(key, out Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_lbp.Pool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for LBP.FeeCollectorWithAsset
        /// </summary>
        [StorageChange("LBP", "FeeCollectorWithAsset")]
        public void OnUpdateFeeCollectorWithAsset(string key, string data)
        {
            FeeCollectorWithAssetTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> FeeCollectorWithAsset
        ///  Storage used for tracking existing fee collectors
        ///  Not more than one fee collector per asset possible
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool GetFeeCollectorWithAsset(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (FeeCollectorWithAssetTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.Bool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
