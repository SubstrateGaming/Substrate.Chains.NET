//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Hydration.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IRouterStorage interface definition.
    /// </summary>
    public interface IRouterStorage : IStorage
    {
        
        /// <summary>
        /// >> Routes
        ///  Storing routes for asset pairs
        /// </summary>
        Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 GetRoutes(string key);
    }
    
    /// <summary>
    /// RouterStorage class definition.
    /// </summary>
    public sealed class RouterStorage : IRouterStorage
    {
        
        /// <summary>
        /// _routesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11> _routesTypedStorage;
        
        /// <summary>
        /// RouterStorage constructor.
        /// </summary>
        public RouterStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.RoutesTypedStorage = new TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11>("Router.Routes", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _routesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11> RoutesTypedStorage
        {
            get
            {
                return _routesTypedStorage;
            }
            set
            {
                _routesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await RoutesTypedStorage.InitializeAsync("Router", "Routes");
        }
        
        /// <summary>
        /// Implements any storage change for Router.Routes
        /// </summary>
        [StorageChange("Router", "Routes")]
        public void OnUpdateRoutes(string key, string data)
        {
            RoutesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Routes
        ///  Storing routes for asset pairs
        /// </summary>
        public Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 GetRoutes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RoutesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT11 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
