//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Hydration.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IReferralsStorage interface definition.
    /// </summary>
    public interface IReferralsStorage : IStorage
    {
        
        /// <summary>
        /// >> ReferralCodes
        ///  Referral codes
        ///  Maps a referral code to an account.
        /// </summary>
        Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetReferralCodes(string key);
        
        /// <summary>
        /// >> ReferralAccounts
        ///  Referral accounts
        ///  Maps an account to a referral code.
        /// </summary>
        Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14 GetReferralAccounts(string key);
        
        /// <summary>
        /// >> LinkedAccounts
        ///  Linked accounts.
        ///  Maps an account to a referral account.
        /// </summary>
        Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetLinkedAccounts(string key);
        
        /// <summary>
        /// >> ReferrerShares
        ///  Shares of a referral account
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetReferrerShares(string key);
        
        /// <summary>
        /// >> TraderShares
        ///  Shares of a trader account
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetTraderShares(string key);
        
        /// <summary>
        /// >> TotalShares
        ///  Total share issuance.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetTotalShares();
        
        /// <summary>
        /// >> Referrer
        ///  Referer level and total accumulated rewards over time.
        ///  Maps referrer account to (Level, Balance). Level indicates current rewards and Balance is used to unlock next level.
        ///  Dev note: we use OptionQuery here because this helps to easily determine that an account if referrer account.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_referrals.EnumLevel, Substrate.NetApi.Model.Types.Primitive.U128> GetReferrer(string key);
        
        /// <summary>
        /// >> AssetRewards
        ///  Asset fee distribution rewards information.
        ///  Maps (asset_id, level) to asset reward percentages.
        /// </summary>
        Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_referrals.FeeDistribution GetAssetRewards(string key);
        
        /// <summary>
        /// >> PendingConversions
        ///  Information about assets that are currently in the rewards pot.
        ///  Used to easily determine list of assets that need to be converted.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple GetPendingConversions(string key);
        
        /// <summary>
        /// >> CounterForPendingConversions
        /// Counter for the related counted storage map
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForPendingConversions();
    }
    
    /// <summary>
    /// ReferralsStorage class definition.
    /// </summary>
    public sealed class ReferralsStorage : IReferralsStorage
    {
        
        /// <summary>
        /// _referralCodesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _referralCodesTypedStorage;
        
        /// <summary>
        /// _referralAccountsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14> _referralAccountsTypedStorage;
        
        /// <summary>
        /// _linkedAccountsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _linkedAccountsTypedStorage;
        
        /// <summary>
        /// _referrerSharesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _referrerSharesTypedStorage;
        
        /// <summary>
        /// _traderSharesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _traderSharesTypedStorage;
        
        /// <summary>
        /// _totalSharesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _totalSharesTypedStorage;
        
        /// <summary>
        /// _referrerTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_referrals.EnumLevel, Substrate.NetApi.Model.Types.Primitive.U128>> _referrerTypedStorage;
        
        /// <summary>
        /// _assetRewardsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_referrals.FeeDistribution> _assetRewardsTypedStorage;
        
        /// <summary>
        /// _pendingConversionsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> _pendingConversionsTypedStorage;
        
        /// <summary>
        /// _counterForPendingConversionsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _counterForPendingConversionsTypedStorage;
        
        /// <summary>
        /// ReferralsStorage constructor.
        /// </summary>
        public ReferralsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ReferralCodesTypedStorage = new TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("Referrals.ReferralCodes", storageDataProvider, storageChangeDelegates);
            this.ReferralAccountsTypedStorage = new TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14>("Referrals.ReferralAccounts", storageDataProvider, storageChangeDelegates);
            this.LinkedAccountsTypedStorage = new TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("Referrals.LinkedAccounts", storageDataProvider, storageChangeDelegates);
            this.ReferrerSharesTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Referrals.ReferrerShares", storageDataProvider, storageChangeDelegates);
            this.TraderSharesTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Referrals.TraderShares", storageDataProvider, storageChangeDelegates);
            this.TotalSharesTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Referrals.TotalShares", storageDataProvider, storageChangeDelegates);
            this.ReferrerTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_referrals.EnumLevel, Substrate.NetApi.Model.Types.Primitive.U128>>("Referrals.Referrer", storageDataProvider, storageChangeDelegates);
            this.AssetRewardsTypedStorage = new TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_referrals.FeeDistribution>("Referrals.AssetRewards", storageDataProvider, storageChangeDelegates);
            this.PendingConversionsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple>("Referrals.PendingConversions", storageDataProvider, storageChangeDelegates);
            this.CounterForPendingConversionsTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Referrals.CounterForPendingConversions", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _referralCodesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> ReferralCodesTypedStorage
        {
            get
            {
                return _referralCodesTypedStorage;
            }
            set
            {
                _referralCodesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _referralAccountsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14> ReferralAccountsTypedStorage
        {
            get
            {
                return _referralAccountsTypedStorage;
            }
            set
            {
                _referralAccountsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _linkedAccountsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> LinkedAccountsTypedStorage
        {
            get
            {
                return _linkedAccountsTypedStorage;
            }
            set
            {
                _linkedAccountsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _referrerSharesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> ReferrerSharesTypedStorage
        {
            get
            {
                return _referrerSharesTypedStorage;
            }
            set
            {
                _referrerSharesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _traderSharesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> TraderSharesTypedStorage
        {
            get
            {
                return _traderSharesTypedStorage;
            }
            set
            {
                _traderSharesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _totalSharesTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> TotalSharesTypedStorage
        {
            get
            {
                return _totalSharesTypedStorage;
            }
            set
            {
                _totalSharesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _referrerTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_referrals.EnumLevel, Substrate.NetApi.Model.Types.Primitive.U128>> ReferrerTypedStorage
        {
            get
            {
                return _referrerTypedStorage;
            }
            set
            {
                _referrerTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _assetRewardsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_referrals.FeeDistribution> AssetRewardsTypedStorage
        {
            get
            {
                return _assetRewardsTypedStorage;
            }
            set
            {
                _assetRewardsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _pendingConversionsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> PendingConversionsTypedStorage
        {
            get
            {
                return _pendingConversionsTypedStorage;
            }
            set
            {
                _pendingConversionsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForPendingConversionsTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> CounterForPendingConversionsTypedStorage
        {
            get
            {
                return _counterForPendingConversionsTypedStorage;
            }
            set
            {
                _counterForPendingConversionsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ReferralCodesTypedStorage.InitializeAsync("Referrals", "ReferralCodes");
            await ReferralAccountsTypedStorage.InitializeAsync("Referrals", "ReferralAccounts");
            await LinkedAccountsTypedStorage.InitializeAsync("Referrals", "LinkedAccounts");
            await ReferrerSharesTypedStorage.InitializeAsync("Referrals", "ReferrerShares");
            await TraderSharesTypedStorage.InitializeAsync("Referrals", "TraderShares");
            await TotalSharesTypedStorage.InitializeAsync("Referrals", "TotalShares");
            await ReferrerTypedStorage.InitializeAsync("Referrals", "Referrer");
            await AssetRewardsTypedStorage.InitializeAsync("Referrals", "AssetRewards");
            await PendingConversionsTypedStorage.InitializeAsync("Referrals", "PendingConversions");
            await CounterForPendingConversionsTypedStorage.InitializeAsync("Referrals", "CounterForPendingConversions");
        }
        
        /// <summary>
        /// Implements any storage change for Referrals.ReferralCodes
        /// </summary>
        [StorageChange("Referrals", "ReferralCodes")]
        public void OnUpdateReferralCodes(string key, string data)
        {
            ReferralCodesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ReferralCodes
        ///  Referral codes
        ///  Maps a referral code to an account.
        /// </summary>
        public Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetReferralCodes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ReferralCodesTypedStorage.Dictionary.TryGetValue(key, out Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Referrals.ReferralAccounts
        /// </summary>
        [StorageChange("Referrals", "ReferralAccounts")]
        public void OnUpdateReferralAccounts(string key, string data)
        {
            ReferralAccountsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ReferralAccounts
        ///  Referral accounts
        ///  Maps an account to a referral code.
        /// </summary>
        public Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14 GetReferralAccounts(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ReferralAccountsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Referrals.LinkedAccounts
        /// </summary>
        [StorageChange("Referrals", "LinkedAccounts")]
        public void OnUpdateLinkedAccounts(string key, string data)
        {
            LinkedAccountsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> LinkedAccounts
        ///  Linked accounts.
        ///  Maps an account to a referral account.
        /// </summary>
        public Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetLinkedAccounts(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LinkedAccountsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Referrals.ReferrerShares
        /// </summary>
        [StorageChange("Referrals", "ReferrerShares")]
        public void OnUpdateReferrerShares(string key, string data)
        {
            ReferrerSharesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ReferrerShares
        ///  Shares of a referral account
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetReferrerShares(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ReferrerSharesTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Referrals.TraderShares
        /// </summary>
        [StorageChange("Referrals", "TraderShares")]
        public void OnUpdateTraderShares(string key, string data)
        {
            TraderSharesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> TraderShares
        ///  Shares of a trader account
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetTraderShares(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TraderSharesTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Referrals.TotalShares
        /// </summary>
        [StorageChange("Referrals", "TotalShares")]
        public void OnUpdateTotalShares(string data)
        {
            TotalSharesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> TotalShares
        ///  Total share issuance.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetTotalShares()
        {
            return TotalSharesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Referrals.Referrer
        /// </summary>
        [StorageChange("Referrals", "Referrer")]
        public void OnUpdateReferrer(string key, string data)
        {
            ReferrerTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Referrer
        ///  Referer level and total accumulated rewards over time.
        ///  Maps referrer account to (Level, Balance). Level indicates current rewards and Balance is used to unlock next level.
        ///  Dev note: we use OptionQuery here because this helps to easily determine that an account if referrer account.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_referrals.EnumLevel, Substrate.NetApi.Model.Types.Primitive.U128> GetReferrer(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ReferrerTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_referrals.EnumLevel, Substrate.NetApi.Model.Types.Primitive.U128> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Referrals.AssetRewards
        /// </summary>
        [StorageChange("Referrals", "AssetRewards")]
        public void OnUpdateAssetRewards(string key, string data)
        {
            AssetRewardsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AssetRewards
        ///  Asset fee distribution rewards information.
        ///  Maps (asset_id, level) to asset reward percentages.
        /// </summary>
        public Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_referrals.FeeDistribution GetAssetRewards(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetRewardsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_referrals.FeeDistribution result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Referrals.PendingConversions
        /// </summary>
        [StorageChange("Referrals", "PendingConversions")]
        public void OnUpdatePendingConversions(string key, string data)
        {
            PendingConversionsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> PendingConversions
        ///  Information about assets that are currently in the rewards pot.
        ///  Used to easily determine list of assets that need to be converted.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple GetPendingConversions(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PendingConversionsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Referrals.CounterForPendingConversions
        /// </summary>
        [StorageChange("Referrals", "CounterForPendingConversions")]
        public void OnUpdateCounterForPendingConversions(string data)
        {
            CounterForPendingConversionsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForPendingConversions
        /// Counter for the related counted storage map
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetCounterForPendingConversions()
        {
            return CounterForPendingConversionsTypedStorage.Get();
        }
    }
}
