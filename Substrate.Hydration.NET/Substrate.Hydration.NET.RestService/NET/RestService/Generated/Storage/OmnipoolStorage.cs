//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Hydration.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IOmnipoolStorage interface definition.
    /// </summary>
    public interface IOmnipoolStorage : IStorage
    {
        
        /// <summary>
        /// >> Assets
        ///  State of an asset in the omnipool
        /// </summary>
        Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.AssetState GetAssets(string key);
        
        /// <summary>
        /// >> HubAssetTradability
        ///  Tradable state of hub asset.
        /// </summary>
        Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.Tradability GetHubAssetTradability();
        
        /// <summary>
        /// >> Positions
        ///  LP positions. Maps NFT instance id to corresponding position
        /// </summary>
        Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.Position GetPositions(string key);
        
        /// <summary>
        /// >> NextPositionId
        ///  Position ids sequencer
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetNextPositionId();
    }
    
    /// <summary>
    /// OmnipoolStorage class definition.
    /// </summary>
    public sealed class OmnipoolStorage : IOmnipoolStorage
    {
        
        /// <summary>
        /// _assetsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.AssetState> _assetsTypedStorage;
        
        /// <summary>
        /// _hubAssetTradabilityTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.Tradability> _hubAssetTradabilityTypedStorage;
        
        /// <summary>
        /// _positionsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.Position> _positionsTypedStorage;
        
        /// <summary>
        /// _nextPositionIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _nextPositionIdTypedStorage;
        
        /// <summary>
        /// OmnipoolStorage constructor.
        /// </summary>
        public OmnipoolStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AssetsTypedStorage = new TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.AssetState>("Omnipool.Assets", storageDataProvider, storageChangeDelegates);
            this.HubAssetTradabilityTypedStorage = new TypedStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.Tradability>("Omnipool.HubAssetTradability", storageDataProvider, storageChangeDelegates);
            this.PositionsTypedStorage = new TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.Position>("Omnipool.Positions", storageDataProvider, storageChangeDelegates);
            this.NextPositionIdTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Omnipool.NextPositionId", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _assetsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.AssetState> AssetsTypedStorage
        {
            get
            {
                return _assetsTypedStorage;
            }
            set
            {
                _assetsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _hubAssetTradabilityTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.Tradability> HubAssetTradabilityTypedStorage
        {
            get
            {
                return _hubAssetTradabilityTypedStorage;
            }
            set
            {
                _hubAssetTradabilityTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _positionsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.Position> PositionsTypedStorage
        {
            get
            {
                return _positionsTypedStorage;
            }
            set
            {
                _positionsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextPositionIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> NextPositionIdTypedStorage
        {
            get
            {
                return _nextPositionIdTypedStorage;
            }
            set
            {
                _nextPositionIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AssetsTypedStorage.InitializeAsync("Omnipool", "Assets");
            await HubAssetTradabilityTypedStorage.InitializeAsync("Omnipool", "HubAssetTradability");
            await PositionsTypedStorage.InitializeAsync("Omnipool", "Positions");
            await NextPositionIdTypedStorage.InitializeAsync("Omnipool", "NextPositionId");
        }
        
        /// <summary>
        /// Implements any storage change for Omnipool.Assets
        /// </summary>
        [StorageChange("Omnipool", "Assets")]
        public void OnUpdateAssets(string key, string data)
        {
            AssetsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Assets
        ///  State of an asset in the omnipool
        /// </summary>
        public Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.AssetState GetAssets(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.AssetState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Omnipool.HubAssetTradability
        /// </summary>
        [StorageChange("Omnipool", "HubAssetTradability")]
        public void OnUpdateHubAssetTradability(string data)
        {
            HubAssetTradabilityTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> HubAssetTradability
        ///  Tradable state of hub asset.
        /// </summary>
        public Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.Tradability GetHubAssetTradability()
        {
            return HubAssetTradabilityTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Omnipool.Positions
        /// </summary>
        [StorageChange("Omnipool", "Positions")]
        public void OnUpdatePositions(string key, string data)
        {
            PositionsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Positions
        ///  LP positions. Maps NFT instance id to corresponding position
        /// </summary>
        public Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.Position GetPositions(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PositionsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_omnipool.types.Position result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Omnipool.NextPositionId
        /// </summary>
        [StorageChange("Omnipool", "NextPositionId")]
        public void OnUpdateNextPositionId(string data)
        {
            NextPositionIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextPositionId
        ///  Position ids sequencer
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetNextPositionId()
        {
            return NextPositionIdTypedStorage.Get();
        }
    }
}
