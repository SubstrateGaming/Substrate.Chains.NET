//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Hydration.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IXYKStorage interface definition.
    /// </summary>
    public interface IXYKStorage : IStorage
    {
        
        /// <summary>
        /// >> ShareToken
        ///  Asset id storage for shared pool tokens
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetShareToken(string key);
        
        /// <summary>
        /// >> TotalLiquidity
        ///  Total liquidity in a pool.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetTotalLiquidity(string key);
        
        /// <summary>
        /// >> PoolAssets
        ///  Asset pair in a pool.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetPoolAssets(string key);
    }
    
    /// <summary>
    /// XYKStorage class definition.
    /// </summary>
    public sealed class XYKStorage : IXYKStorage
    {
        
        /// <summary>
        /// _shareTokenTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _shareTokenTypedStorage;
        
        /// <summary>
        /// _totalLiquidityTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _totalLiquidityTypedStorage;
        
        /// <summary>
        /// _poolAssetsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> _poolAssetsTypedStorage;
        
        /// <summary>
        /// XYKStorage constructor.
        /// </summary>
        public XYKStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ShareTokenTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("XYK.ShareToken", storageDataProvider, storageChangeDelegates);
            this.TotalLiquidityTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("XYK.TotalLiquidity", storageDataProvider, storageChangeDelegates);
            this.PoolAssetsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>("XYK.PoolAssets", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _shareTokenTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> ShareTokenTypedStorage
        {
            get
            {
                return _shareTokenTypedStorage;
            }
            set
            {
                _shareTokenTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _totalLiquidityTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> TotalLiquidityTypedStorage
        {
            get
            {
                return _totalLiquidityTypedStorage;
            }
            set
            {
                _totalLiquidityTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _poolAssetsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>> PoolAssetsTypedStorage
        {
            get
            {
                return _poolAssetsTypedStorage;
            }
            set
            {
                _poolAssetsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ShareTokenTypedStorage.InitializeAsync("XYK", "ShareToken");
            await TotalLiquidityTypedStorage.InitializeAsync("XYK", "TotalLiquidity");
            await PoolAssetsTypedStorage.InitializeAsync("XYK", "PoolAssets");
        }
        
        /// <summary>
        /// Implements any storage change for XYK.ShareToken
        /// </summary>
        [StorageChange("XYK", "ShareToken")]
        public void OnUpdateShareToken(string key, string data)
        {
            ShareTokenTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ShareToken
        ///  Asset id storage for shared pool tokens
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetShareToken(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ShareTokenTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for XYK.TotalLiquidity
        /// </summary>
        [StorageChange("XYK", "TotalLiquidity")]
        public void OnUpdateTotalLiquidity(string key, string data)
        {
            TotalLiquidityTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> TotalLiquidity
        ///  Total liquidity in a pool.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetTotalLiquidity(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TotalLiquidityTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for XYK.PoolAssets
        /// </summary>
        [StorageChange("XYK", "PoolAssets")]
        public void OnUpdatePoolAssets(string key, string data)
        {
            PoolAssetsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> PoolAssets
        ///  Asset pair in a pool.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetPoolAssets(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PoolAssetsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
