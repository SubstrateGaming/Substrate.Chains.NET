//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Hydration.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IAssetRegistryStorage interface definition.
    /// </summary>
    public interface IAssetRegistryStorage : IStorage
    {
        
        /// <summary>
        /// >> Assets
        ///  Details of an asset.
        /// </summary>
        Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_asset_registry.types.AssetDetails GetAssets(string key);
        
        /// <summary>
        /// >> NextAssetId
        ///  Next available asset id. This is sequential id assigned for each new registered asset.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetNextAssetId();
        
        /// <summary>
        /// >> AssetIds
        ///  Mapping between asset name and asset id.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetAssetIds(string key);
        
        /// <summary>
        /// >> AssetLocations
        ///  Native location of an asset.
        /// </summary>
        Substrate.Hydration.NET.NetApiExt.Generated.Model.hydradx_runtime.xcm.AssetLocation GetAssetLocations(string key);
        
        /// <summary>
        /// >> BannedAssets
        ///  Non-native assets which transfer is banned.
        /// </summary>
        Substrate.NetApi.Model.Types.Base.BaseTuple GetBannedAssets(string key);
        
        /// <summary>
        /// >> LocationAssets
        ///  Local asset for native location.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetLocationAssets(string key);
        
        /// <summary>
        /// >> ExistentialDepositCounter
        ///  Number of accounts that paid existential deposits for insufficient assets.
        ///  This storage is used by `SufficiencyCheck`.
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetExistentialDepositCounter();
    }
    
    /// <summary>
    /// AssetRegistryStorage class definition.
    /// </summary>
    public sealed class AssetRegistryStorage : IAssetRegistryStorage
    {
        
        /// <summary>
        /// _assetsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_asset_registry.types.AssetDetails> _assetsTypedStorage;
        
        /// <summary>
        /// _nextAssetIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _nextAssetIdTypedStorage;
        
        /// <summary>
        /// _assetIdsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _assetIdsTypedStorage;
        
        /// <summary>
        /// _assetLocationsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.hydradx_runtime.xcm.AssetLocation> _assetLocationsTypedStorage;
        
        /// <summary>
        /// _bannedAssetsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> _bannedAssetsTypedStorage;
        
        /// <summary>
        /// _locationAssetsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _locationAssetsTypedStorage;
        
        /// <summary>
        /// _existentialDepositCounterTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> _existentialDepositCounterTypedStorage;
        
        /// <summary>
        /// AssetRegistryStorage constructor.
        /// </summary>
        public AssetRegistryStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.AssetsTypedStorage = new TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_asset_registry.types.AssetDetails>("AssetRegistry.Assets", storageDataProvider, storageChangeDelegates);
            this.NextAssetIdTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("AssetRegistry.NextAssetId", storageDataProvider, storageChangeDelegates);
            this.AssetIdsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("AssetRegistry.AssetIds", storageDataProvider, storageChangeDelegates);
            this.AssetLocationsTypedStorage = new TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.hydradx_runtime.xcm.AssetLocation>("AssetRegistry.AssetLocations", storageDataProvider, storageChangeDelegates);
            this.BannedAssetsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple>("AssetRegistry.BannedAssets", storageDataProvider, storageChangeDelegates);
            this.LocationAssetsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("AssetRegistry.LocationAssets", storageDataProvider, storageChangeDelegates);
            this.ExistentialDepositCounterTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128>("AssetRegistry.ExistentialDepositCounter", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _assetsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_asset_registry.types.AssetDetails> AssetsTypedStorage
        {
            get
            {
                return _assetsTypedStorage;
            }
            set
            {
                _assetsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextAssetIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> NextAssetIdTypedStorage
        {
            get
            {
                return _nextAssetIdTypedStorage;
            }
            set
            {
                _nextAssetIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _assetIdsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> AssetIdsTypedStorage
        {
            get
            {
                return _assetIdsTypedStorage;
            }
            set
            {
                _assetIdsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _assetLocationsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.hydradx_runtime.xcm.AssetLocation> AssetLocationsTypedStorage
        {
            get
            {
                return _assetLocationsTypedStorage;
            }
            set
            {
                _assetLocationsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _bannedAssetsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Base.BaseTuple> BannedAssetsTypedStorage
        {
            get
            {
                return _bannedAssetsTypedStorage;
            }
            set
            {
                _bannedAssetsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _locationAssetsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> LocationAssetsTypedStorage
        {
            get
            {
                return _locationAssetsTypedStorage;
            }
            set
            {
                _locationAssetsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _existentialDepositCounterTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U128> ExistentialDepositCounterTypedStorage
        {
            get
            {
                return _existentialDepositCounterTypedStorage;
            }
            set
            {
                _existentialDepositCounterTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await AssetsTypedStorage.InitializeAsync("AssetRegistry", "Assets");
            await NextAssetIdTypedStorage.InitializeAsync("AssetRegistry", "NextAssetId");
            await AssetIdsTypedStorage.InitializeAsync("AssetRegistry", "AssetIds");
            await AssetLocationsTypedStorage.InitializeAsync("AssetRegistry", "AssetLocations");
            await BannedAssetsTypedStorage.InitializeAsync("AssetRegistry", "BannedAssets");
            await LocationAssetsTypedStorage.InitializeAsync("AssetRegistry", "LocationAssets");
            await ExistentialDepositCounterTypedStorage.InitializeAsync("AssetRegistry", "ExistentialDepositCounter");
        }
        
        /// <summary>
        /// Implements any storage change for AssetRegistry.Assets
        /// </summary>
        [StorageChange("AssetRegistry", "Assets")]
        public void OnUpdateAssets(string key, string data)
        {
            AssetsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Assets
        ///  Details of an asset.
        /// </summary>
        public Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_asset_registry.types.AssetDetails GetAssets(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Hydration.NET.NetApiExt.Generated.Model.pallet_asset_registry.types.AssetDetails result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AssetRegistry.NextAssetId
        /// </summary>
        [StorageChange("AssetRegistry", "NextAssetId")]
        public void OnUpdateNextAssetId(string data)
        {
            NextAssetIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextAssetId
        ///  Next available asset id. This is sequential id assigned for each new registered asset.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetNextAssetId()
        {
            return NextAssetIdTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for AssetRegistry.AssetIds
        /// </summary>
        [StorageChange("AssetRegistry", "AssetIds")]
        public void OnUpdateAssetIds(string key, string data)
        {
            AssetIdsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AssetIds
        ///  Mapping between asset name and asset id.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetAssetIds(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetIdsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AssetRegistry.AssetLocations
        /// </summary>
        [StorageChange("AssetRegistry", "AssetLocations")]
        public void OnUpdateAssetLocations(string key, string data)
        {
            AssetLocationsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> AssetLocations
        ///  Native location of an asset.
        /// </summary>
        public Substrate.Hydration.NET.NetApiExt.Generated.Model.hydradx_runtime.xcm.AssetLocation GetAssetLocations(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetLocationsTypedStorage.Dictionary.TryGetValue(key, out Substrate.Hydration.NET.NetApiExt.Generated.Model.hydradx_runtime.xcm.AssetLocation result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AssetRegistry.BannedAssets
        /// </summary>
        [StorageChange("AssetRegistry", "BannedAssets")]
        public void OnUpdateBannedAssets(string key, string data)
        {
            BannedAssetsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> BannedAssets
        ///  Non-native assets which transfer is banned.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple GetBannedAssets(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BannedAssetsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Base.BaseTuple result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AssetRegistry.LocationAssets
        /// </summary>
        [StorageChange("AssetRegistry", "LocationAssets")]
        public void OnUpdateLocationAssets(string key, string data)
        {
            LocationAssetsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> LocationAssets
        ///  Local asset for native location.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetLocationAssets(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LocationAssetsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for AssetRegistry.ExistentialDepositCounter
        /// </summary>
        [StorageChange("AssetRegistry", "ExistentialDepositCounter")]
        public void OnUpdateExistentialDepositCounter(string data)
        {
            ExistentialDepositCounterTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ExistentialDepositCounter
        ///  Number of accounts that paid existential deposits for insufficient assets.
        ///  This storage is used by `SufficiencyCheck`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetExistentialDepositCounter()
        {
            return ExistentialDepositCounterTypedStorage.Get();
        }
    }
}
