//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Hydration.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IBroadcastStorage interface definition.
    /// </summary>
    public interface IBroadcastStorage : IStorage
    {
        
        /// <summary>
        /// >> IncrementalId
        ///  Next available incremental ID
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetIncrementalId();
        
        /// <summary>
        /// >> ExecutionContext
        ///  Execution context to figure out where the trade is originated from
        /// </summary>
        Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61 GetExecutionContext();
        
        /// <summary>
        /// >> Swapper
        /// If filled, we overwrite the original swapper. Mainly used in router to not to use temporary trade account
        /// </summary>
        Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetSwapper();
    }
    
    /// <summary>
    /// BroadcastStorage class definition.
    /// </summary>
    public sealed class BroadcastStorage : IBroadcastStorage
    {
        
        /// <summary>
        /// _incrementalIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> _incrementalIdTypedStorage;
        
        /// <summary>
        /// _executionContextTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61> _executionContextTypedStorage;
        
        /// <summary>
        /// _swapperTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _swapperTypedStorage;
        
        /// <summary>
        /// BroadcastStorage constructor.
        /// </summary>
        public BroadcastStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.IncrementalIdTypedStorage = new TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32>("Broadcast.IncrementalId", storageDataProvider, storageChangeDelegates);
            this.ExecutionContextTypedStorage = new TypedStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61>("Broadcast.ExecutionContext", storageDataProvider, storageChangeDelegates);
            this.SwapperTypedStorage = new TypedStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("Broadcast.Swapper", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _incrementalIdTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.NetApi.Model.Types.Primitive.U32> IncrementalIdTypedStorage
        {
            get
            {
                return _incrementalIdTypedStorage;
            }
            set
            {
                _incrementalIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _executionContextTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61> ExecutionContextTypedStorage
        {
            get
            {
                return _executionContextTypedStorage;
            }
            set
            {
                _executionContextTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _swapperTypedStorage property
        /// </summary>
        public TypedStorage<Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> SwapperTypedStorage
        {
            get
            {
                return _swapperTypedStorage;
            }
            set
            {
                _swapperTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await IncrementalIdTypedStorage.InitializeAsync("Broadcast", "IncrementalId");
            await ExecutionContextTypedStorage.InitializeAsync("Broadcast", "ExecutionContext");
            await SwapperTypedStorage.InitializeAsync("Broadcast", "Swapper");
        }
        
        /// <summary>
        /// Implements any storage change for Broadcast.IncrementalId
        /// </summary>
        [StorageChange("Broadcast", "IncrementalId")]
        public void OnUpdateIncrementalId(string data)
        {
            IncrementalIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> IncrementalId
        ///  Next available incremental ID
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetIncrementalId()
        {
            return IncrementalIdTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Broadcast.ExecutionContext
        /// </summary>
        [StorageChange("Broadcast", "ExecutionContext")]
        public void OnUpdateExecutionContext(string data)
        {
            ExecutionContextTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ExecutionContext
        ///  Execution context to figure out where the trade is originated from
        /// </summary>
        public Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61 GetExecutionContext()
        {
            return ExecutionContextTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Broadcast.Swapper
        /// </summary>
        [StorageChange("Broadcast", "Swapper")]
        public void OnUpdateSwapper(string data)
        {
            SwapperTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Swapper
        /// If filled, we overwrite the original swapper. Mainly used in router to not to use temporary trade account
        /// </summary>
        public Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetSwapper()
        {
            return SwapperTypedStorage.Get();
        }
    }
}
