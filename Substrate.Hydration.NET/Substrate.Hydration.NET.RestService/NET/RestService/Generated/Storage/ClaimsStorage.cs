//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Hydration.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IClaimsStorage interface definition.
    /// </summary>
    public interface IClaimsStorage : IStorage
    {
        
        /// <summary>
        /// >> Claims
        ///  Asset id storage for each shared token
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U128 GetClaims(string key);
    }
    
    /// <summary>
    /// ClaimsStorage class definition.
    /// </summary>
    public sealed class ClaimsStorage : IClaimsStorage
    {
        
        /// <summary>
        /// _claimsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> _claimsTypedStorage;
        
        /// <summary>
        /// ClaimsStorage constructor.
        /// </summary>
        public ClaimsStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.ClaimsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128>("Claims.Claims", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _claimsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U128> ClaimsTypedStorage
        {
            get
            {
                return _claimsTypedStorage;
            }
            set
            {
                _claimsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ClaimsTypedStorage.InitializeAsync("Claims", "Claims");
        }
        
        /// <summary>
        /// Implements any storage change for Claims.Claims
        /// </summary>
        [StorageChange("Claims", "Claims")]
        public void OnUpdateClaims(string key, string data)
        {
            ClaimsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Claims
        ///  Asset id storage for each shared token
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 GetClaims(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ClaimsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
