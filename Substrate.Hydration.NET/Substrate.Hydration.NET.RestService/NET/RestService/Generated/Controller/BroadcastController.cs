//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.Hydration.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Hydration.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// BroadcastController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class BroadcastController : ControllerBase
    {
        
        private IBroadcastStorage _broadcastStorage;
        
        /// <summary>
        /// BroadcastController constructor.
        /// </summary>
        public BroadcastController(IBroadcastStorage broadcastStorage)
        {
            _broadcastStorage = broadcastStorage;
        }
        
        /// <summary>
        /// >> IncrementalId
        ///  Next available incremental ID
        /// </summary>
        [HttpGet("IncrementalId")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Hydration.NET.NetApiExt.Generated.Storage.BroadcastStorage), "IncrementalIdParams")]
        public IActionResult GetIncrementalId()
        {
            return this.Ok(_broadcastStorage.GetIncrementalId());
        }
        
        /// <summary>
        /// >> ExecutionContext
        ///  Execution context to figure out where the trade is originated from
        /// </summary>
        [HttpGet("ExecutionContext")]
        [ProducesResponseType(typeof(Substrate.Hydration.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT61), 200)]
        [StorageKeyBuilder(typeof(Substrate.Hydration.NET.NetApiExt.Generated.Storage.BroadcastStorage), "ExecutionContextParams")]
        public IActionResult GetExecutionContext()
        {
            return this.Ok(_broadcastStorage.GetExecutionContext());
        }
        
        /// <summary>
        /// >> Swapper
        /// If filled, we overwrite the original swapper. Mainly used in router to not to use temporary trade account
        /// </summary>
        [HttpGet("Swapper")]
        [ProducesResponseType(typeof(Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Hydration.NET.NetApiExt.Generated.Storage.BroadcastStorage), "SwapperParams")]
        public IActionResult GetSwapper()
        {
            return this.Ok(_broadcastStorage.GetSwapper());
        }
    }
}
