//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.Hydration.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.Hydration.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// MultiTransactionPaymentController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class MultiTransactionPaymentController : ControllerBase
    {
        
        private IMultiTransactionPaymentStorage _multiTransactionPaymentStorage;
        
        /// <summary>
        /// MultiTransactionPaymentController constructor.
        /// </summary>
        public MultiTransactionPaymentController(IMultiTransactionPaymentStorage multiTransactionPaymentStorage)
        {
            _multiTransactionPaymentStorage = multiTransactionPaymentStorage;
        }
        
        /// <summary>
        /// >> AccountCurrencyMap
        ///  Account currency map
        /// </summary>
        [HttpGet("AccountCurrencyMap")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Hydration.NET.NetApiExt.Generated.Storage.MultiTransactionPaymentStorage), "AccountCurrencyMapParams", typeof(Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetAccountCurrencyMap(string key)
        {
            return this.Ok(_multiTransactionPaymentStorage.GetAccountCurrencyMap(key));
        }
        
        /// <summary>
        /// >> AcceptedCurrencies
        ///  Curated list of currencies which fees can be paid mapped to corresponding fallback price
        /// </summary>
        [HttpGet("AcceptedCurrencies")]
        [ProducesResponseType(typeof(Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Hydration.NET.NetApiExt.Generated.Storage.MultiTransactionPaymentStorage), "AcceptedCurrenciesParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetAcceptedCurrencies(string key)
        {
            return this.Ok(_multiTransactionPaymentStorage.GetAcceptedCurrencies(key));
        }
        
        /// <summary>
        /// >> AcceptedCurrencyPrice
        ///  Asset prices from the spot price provider or the fallback price if the price is not available. Updated at the beginning of every block.
        /// </summary>
        [HttpGet("AcceptedCurrencyPrice")]
        [ProducesResponseType(typeof(Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128), 200)]
        [StorageKeyBuilder(typeof(Substrate.Hydration.NET.NetApiExt.Generated.Storage.MultiTransactionPaymentStorage), "AcceptedCurrencyPriceParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetAcceptedCurrencyPrice(string key)
        {
            return this.Ok(_multiTransactionPaymentStorage.GetAcceptedCurrencyPrice(key));
        }
        
        /// <summary>
        /// >> TransactionCurrencyOverride
        /// </summary>
        [HttpGet("TransactionCurrencyOverride")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(Substrate.Hydration.NET.NetApiExt.Generated.Storage.MultiTransactionPaymentStorage), "TransactionCurrencyOverrideParams", typeof(Substrate.Hydration.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32))]
        public IActionResult GetTransactionCurrencyOverride(string key)
        {
            return this.Ok(_multiTransactionPaymentStorage.GetTransactionCurrencyOverride(key));
        }
    }
}
