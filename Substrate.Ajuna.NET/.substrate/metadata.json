{
  "Origin": "",
  "Magic": "0x6D657461",
  "Version": 14,
  "NodeMetadata": {
    "Types": {
      "0": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "AccountId32"
        ],
        "TypeDef": "Composite"
      },
      "1": {
        "Length": 32,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "2": {
        "Primitive": "U8",
        "TypeDef": "Primitive"
      },
      "3": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "Nonce",
            "TypeId": 4
          },
          {
            "Name": "consumers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "providers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "AccountData",
            "TypeId": 5
          }
        ],
        "Path": [
          "frame_system",
          "AccountInfo"
        ],
        "TypeParams": [
          {
            "Name": "Nonce",
            "TypeId": 4
          },
          {
            "Name": "AccountData",
            "TypeId": 5
          }
        ],
        "TypeDef": "Composite"
      },
      "4": {
        "Primitive": "U32",
        "TypeDef": "Primitive"
      },
      "5": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "frozen",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "flags",
            "TypeName": "ExtraFlags",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "6": {
        "Primitive": "U128",
        "TypeDef": "Primitive"
      },
      "7": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ExtraFlags"
        ],
        "TypeDef": "Composite"
      },
      "8": {
        "Primitive": "Bool",
        "TypeDef": "Primitive"
      },
      "9": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 10
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 10
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 10
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 10
          }
        ],
        "TypeDef": "Composite"
      },
      "10": {
        "TypeFields": [
          {
            "Name": "ref_time",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_weights",
          "weight_v2",
          "Weight"
        ],
        "TypeDef": "Composite"
      },
      "11": {
        "TypeId": 12,
        "TypeDef": "Compact"
      },
      "12": {
        "Primitive": "U64",
        "TypeDef": "Primitive"
      },
      "13": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "primitive_types",
          "H256"
        ],
        "TypeDef": "Composite"
      },
      "14": {
        "TypeId": 2,
        "TypeDef": "Sequence"
      },
      "15": {
        "TypeFields": [
          {
            "Name": "logs",
            "TypeName": "Vec<DigestItem>",
            "TypeId": 16
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "Digest"
        ],
        "TypeDef": "Composite"
      },
      "16": {
        "TypeId": 17,
        "TypeDef": "Sequence"
      },
      "17": {
        "Variants": [
          {
            "Name": "PreRuntime",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 18
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 6
          },
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 18
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 4
          },
          {
            "Name": "Seal",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 18
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 5
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 0
          },
          {
            "Name": "RuntimeEnvironmentUpdated",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "DigestItem"
        ],
        "TypeDef": "Variant"
      },
      "18": {
        "Length": 4,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "19": {
        "TypeId": 20,
        "TypeDef": "Sequence"
      },
      "20": {
        "TypeFields": [
          {
            "Name": "phase",
            "TypeName": "Phase",
            "TypeId": 149
          },
          {
            "Name": "event",
            "TypeName": "E",
            "TypeId": 21
          },
          {
            "Name": "topics",
            "TypeName": "Vec<T>",
            "TypeId": 150
          }
        ],
        "Path": [
          "frame_system",
          "EventRecord"
        ],
        "TypeParams": [
          {
            "Name": "E",
            "TypeId": 21
          },
          {
            "Name": "T",
            "TypeId": 13
          }
        ],
        "TypeDef": "Composite"
      },
      "21": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "frame_system::Event<Runtime>",
                "TypeId": 22
              }
            ],
            "Index": 0
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                "TypeId": 31
              }
            ],
            "Index": 1
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "pallet_multisig::Event<Runtime>",
                "TypeId": 33
              }
            ],
            "Index": 4
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "pallet_utility::Event",
                "TypeId": 37
              }
            ],
            "Index": 5
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "pallet_identity::Event<Runtime>",
                "TypeId": 38
              }
            ],
            "Index": 6
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "pallet_proxy::Event<Runtime>",
                "TypeId": 40
              }
            ],
            "Index": 7
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "pallet_scheduler::Event<Runtime>",
                "TypeId": 43
              }
            ],
            "Index": 8
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::Event<Runtime>",
                "TypeId": 45
              }
            ],
            "Index": 9
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "pallet_balances::Event<Runtime>",
                "TypeId": 46
              }
            ],
            "Index": 15
          },
          {
            "Name": "TransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_payment::Event<Runtime>",
                "TypeId": 48
              }
            ],
            "Index": 16
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "orml_vesting::Event<Runtime>",
                "TypeId": 49
              }
            ],
            "Index": 17
          },
          {
            "Name": "CollatorSelection",
            "TypeFields": [
              {
                "TypeName": "pallet_collator_selection::Event<Runtime>",
                "TypeId": 52
              }
            ],
            "Index": 21
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "pallet_session::Event",
                "TypeId": 54
              }
            ],
            "Index": 22
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                "TypeId": 55
              }
            ],
            "Index": 30
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Event<Runtime>",
                "TypeId": 56
              }
            ],
            "Index": 31
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Event<Runtime>",
                "TypeId": 130
              }
            ],
            "Index": 32
          },
          {
            "Name": "MessageQueue",
            "TypeFields": [
              {
                "TypeName": "pallet_message_queue::Event<Runtime>",
                "TypeId": 131
              }
            ],
            "Index": 34
          },
          {
            "Name": "XTokens",
            "TypeFields": [
              {
                "TypeName": "orml_xtokens::Event<Runtime>",
                "TypeId": 135
              }
            ],
            "Index": 35
          },
          {
            "Name": "OrmlXcm",
            "TypeFields": [
              {
                "TypeName": "orml_xcm::Event<Runtime>",
                "TypeId": 136
              }
            ],
            "Index": 36
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "pallet_treasury::Event<Runtime>",
                "TypeId": 137
              }
            ],
            "Index": 41
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                "TypeId": 138
              }
            ],
            "Index": 42
          },
          {
            "Name": "CouncilMembership",
            "TypeFields": [
              {
                "TypeName": "pallet_membership::Event<Runtime, pallet_membership::Instance2>",
                "TypeId": 139
              }
            ],
            "Index": 43
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                "TypeId": 140
              }
            ],
            "Index": 44
          },
          {
            "Name": "TechnicalCommitteeMembership",
            "TypeFields": [
              {
                "TypeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>",
                "TypeId": 141
              }
            ],
            "Index": 45
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "pallet_democracy::Event<Runtime>",
                "TypeId": 142
              }
            ],
            "Index": 46
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "pallet_assets::Event<Runtime, pallet_assets::Instance1>",
                "TypeId": 147
              }
            ],
            "Index": 90
          },
          {
            "Name": "AssetRegistry",
            "TypeFields": [
              {
                "TypeName": "pallet_asset_registry::Event<Runtime>",
                "TypeId": 148
              }
            ],
            "Index": 91
          }
        ],
        "Path": [
          "ajuna_runtime",
          "RuntimeEvent"
        ],
        "TypeDef": "Variant"
      },
      "22": {
        "Variants": [
          {
            "Name": "ExtrinsicSuccess",
            "TypeFields": [
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 23
              }
            ],
            "Index": 0,
            "Docs": [
              "An extrinsic completed successfully."
            ]
          },
          {
            "Name": "ExtrinsicFailed",
            "TypeFields": [
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 26
              },
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 23
              }
            ],
            "Index": 1,
            "Docs": [
              "An extrinsic failed."
            ]
          },
          {
            "Name": "CodeUpdated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "`:code` was updated."
            ]
          },
          {
            "Name": "NewAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account was created."
            ]
          },
          {
            "Name": "KilledAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was reaped."
            ]
          },
          {
            "Name": "Remarked",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 5,
            "Docs": [
              "On on-chain remark happened."
            ]
          },
          {
            "Name": "UpgradeAuthorized",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "check_version",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 6,
            "Docs": [
              "An upgrade was authorized."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Event for the System pallet."
        ]
      },
      "23": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "class",
            "TypeName": "DispatchClass",
            "TypeId": 24
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 25
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "24": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Operational",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mandatory",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchClass"
        ],
        "TypeDef": "Variant"
      },
      "25": {
        "Variants": [
          {
            "Name": "Yes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "No",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "Pays"
        ],
        "TypeDef": "Variant"
      },
      "26": {
        "Variants": [
          {
            "Name": "Other",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Module",
            "TypeFields": [
              {
                "TypeName": "ModuleError",
                "TypeId": 27
              }
            ],
            "Index": 3
          },
          {
            "Name": "ConsumerRemaining",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NoProviders",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TooManyConsumers",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenError",
                "TypeId": 28
              }
            ],
            "Index": 7
          },
          {
            "Name": "Arithmetic",
            "TypeFields": [
              {
                "TypeName": "ArithmeticError",
                "TypeId": 29
              }
            ],
            "Index": 8
          },
          {
            "Name": "Transactional",
            "TypeFields": [
              {
                "TypeName": "TransactionalError",
                "TypeId": 30
              }
            ],
            "Index": 9
          },
          {
            "Name": "Exhausted",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Unavailable",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "RootNotAllowed",
            "TypeFields": null,
            "Index": 13
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchError"
        ],
        "TypeDef": "Variant"
      },
      "27": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "error",
            "TypeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
            "TypeId": 18
          }
        ],
        "Path": [
          "sp_runtime",
          "ModuleError"
        ],
        "TypeDef": "Composite"
      },
      "28": {
        "Variants": [
          {
            "Name": "FundsUnavailable",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "OnlyProvider",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BelowMinimum",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotCreate",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "CannotCreateHold",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "NotExpendable",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Blocked",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "sp_runtime",
          "TokenError"
        ],
        "TypeDef": "Variant"
      },
      "29": {
        "Variants": [
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "ArithmeticError"
        ],
        "TypeDef": "Variant"
      },
      "30": {
        "Variants": [
          {
            "Name": "LimitReached",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLayer",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "TransactionalError"
        ],
        "TypeDef": "Variant"
      },
      "31": {
        "Variants": [
          {
            "Name": "ValidationFunctionStored",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The validation function has been scheduled to apply."
            ]
          },
          {
            "Name": "ValidationFunctionApplied",
            "TypeFields": [
              {
                "Name": "relay_chain_block_num",
                "TypeName": "RelayChainBlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "The validation function was applied as of the contained relay chain block number."
            ]
          },
          {
            "Name": "ValidationFunctionDiscarded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The relay-chain aborted the upgrade process."
            ]
          },
          {
            "Name": "DownwardMessagesReceived",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Some downward messages have been received and will be processed."
            ]
          },
          {
            "Name": "DownwardMessagesProcessed",
            "TypeFields": [
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "dmq_head",
                "TypeName": "relay_chain::Hash",
                "TypeId": 13
              }
            ],
            "Index": 4,
            "Docs": [
              "Downward messages were processed using the given weight."
            ]
          },
          {
            "Name": "UpwardMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "Option<XcmHash>",
                "TypeId": 32
              }
            ],
            "Index": 5,
            "Docs": [
              "An upward message was sent to the relay chain."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "32": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          }
        ],
        "TypeDef": "Variant"
      },
      "33": {
        "Variants": [
          {
            "Name": "NewMultisig",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "A new multisig operation has begun."
            ]
          },
          {
            "Name": "MultisigApproval",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 34
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "A multisig operation has been approved by someone."
            ]
          },
          {
            "Name": "MultisigExecuted",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 34
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 2,
            "Docs": [
              "A multisig operation has been executed."
            ]
          },
          {
            "Name": "MultisigCancelled",
            "TypeFields": [
              {
                "Name": "cancelling",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 34
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "A multisig operation has been cancelled."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "34": {
        "TypeFields": [
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_multisig",
          "Timepoint"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "35": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 36
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 26
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 36
          },
          {
            "Name": "E",
            "TypeId": 26
          }
        ],
        "TypeDef": "Variant"
      },
      "36": {
        "TypeIds": [],
        "TypeDef": "Tuple"
      },
      "37": {
        "Variants": [
          {
            "Name": "BatchInterrupted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 26
              }
            ],
            "Index": 0,
            "Docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ]
          },
          {
            "Name": "BatchCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Batch of dispatches completed fully with no error."
            ]
          },
          {
            "Name": "BatchCompletedWithErrors",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Batch of dispatches completed but has errors."
            ]
          },
          {
            "Name": "ItemCompleted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ]
          },
          {
            "Name": "ItemFailed",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 26
              }
            ],
            "Index": 4,
            "Docs": [
              "A single item within a Batch of dispatches has completed with error."
            ]
          },
          {
            "Name": "DispatchedAs",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 5,
            "Docs": [
              "A call was dispatched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "38": {
        "Variants": [
          {
            "Name": "IdentitySet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A name was set or reset (which will remove all judgements)."
            ]
          },
          {
            "Name": "IdentityCleared",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A name was cleared, and the given balance returned."
            ]
          },
          {
            "Name": "IdentityKilled",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A name was removed and the given balance slashed."
            ]
          },
          {
            "Name": "JudgementRequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A judgement was asked from a registrar."
            ]
          },
          {
            "Name": "JudgementUnrequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A judgement request was retracted."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A judgement was given by a registrar."
            ]
          },
          {
            "Name": "RegistrarAdded",
            "TypeFields": [
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A registrar was added."
            ]
          },
          {
            "Name": "SubIdentityAdded",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "A sub-identity was added to an identity and the deposit paid."
            ]
          },
          {
            "Name": "SubIdentityRemoved",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "A sub-identity was removed from an identity and the deposit freed."
            ]
          },
          {
            "Name": "SubIdentityRevoked",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "A sub-identity was cleared, and the given deposit repatriated from the",
              "main identity account to the sub-identity account."
            ]
          },
          {
            "Name": "AuthorityAdded",
            "TypeFields": [
              {
                "Name": "authority",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 10,
            "Docs": [
              "A username authority was added."
            ]
          },
          {
            "Name": "AuthorityRemoved",
            "TypeFields": [
              {
                "Name": "authority",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 11,
            "Docs": [
              "A username authority was removed."
            ]
          },
          {
            "Name": "UsernameSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 39
              }
            ],
            "Index": 12,
            "Docs": [
              "A username was set for `who`."
            ]
          },
          {
            "Name": "UsernameQueued",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 39
              },
              {
                "Name": "expiration",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "A username was queued, but `who` must accept it prior to `expiration`."
            ]
          },
          {
            "Name": "PreapprovalExpired",
            "TypeFields": [
              {
                "Name": "whose",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "A queued username passed its expiration without being claimed and was removed."
            ]
          },
          {
            "Name": "PrimaryUsernameSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 39
              }
            ],
            "Index": 15,
            "Docs": [
              "A username was set as a primary and can be looked up from `who`."
            ]
          },
          {
            "Name": "DanglingUsernameRemoved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 39
              }
            ],
            "Index": 16,
            "Docs": [
              "A dangling username (as in, a username corresponding to an account that has removed its",
              "identity) has been removed."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "39": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "40": {
        "Variants": [
          {
            "Name": "ProxyExecuted",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 0,
            "Docs": [
              "A proxy was executed correctly, with the given."
            ]
          },
          {
            "Name": "PureCreated",
            "TypeFields": [
              {
                "Name": "pure",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 41
              },
              {
                "Name": "disambiguation_index",
                "TypeName": "u16",
                "TypeId": 42
              }
            ],
            "Index": 1,
            "Docs": [
              "A pure account has been created by new proxy with given",
              "disambiguation index and proxy type."
            ]
          },
          {
            "Name": "Announced",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "An announcement was placed to make a call in the future."
            ]
          },
          {
            "Name": "ProxyAdded",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 41
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A proxy was added."
            ]
          },
          {
            "Name": "ProxyRemoved",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 41
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proxy was removed."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "41": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonTransfer",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Governance",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Staking",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "IdentityJudgement",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "CancelProxy",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "ajuna_runtime",
          "proxy_type",
          "ProxyType"
        ],
        "TypeDef": "Variant"
      },
      "42": {
        "Primitive": "U16",
        "TypeDef": "Primitive"
      },
      "43": {
        "Variants": [
          {
            "Name": "Scheduled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Scheduled some task."
            ]
          },
          {
            "Name": "Canceled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Canceled some task."
            ]
          },
          {
            "Name": "Dispatched",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 44
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 32
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 2,
            "Docs": [
              "Dispatched some task."
            ]
          },
          {
            "Name": "RetrySet",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 44
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 32
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "retries",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 3,
            "Docs": [
              "Set a retry configuration for some task."
            ]
          },
          {
            "Name": "RetryCancelled",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 44
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 32
              }
            ],
            "Index": 4,
            "Docs": [
              "Cancel a retry configuration for some task."
            ]
          },
          {
            "Name": "CallUnavailable",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 44
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 32
              }
            ],
            "Index": 5,
            "Docs": [
              "The call for the provided hash was not found so the task has been aborted."
            ]
          },
          {
            "Name": "PeriodicFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 44
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 32
              }
            ],
            "Index": 6,
            "Docs": [
              "The given task was unable to be renewed since the agenda is full at that block."
            ]
          },
          {
            "Name": "RetryFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 44
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 32
              }
            ],
            "Index": 7,
            "Docs": [
              "The given task was unable to be retried since the agenda is full at that block or there",
              "was not enough weight to reschedule it."
            ]
          },
          {
            "Name": "PermanentlyOverweight",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 44
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 32
              }
            ],
            "Index": 8,
            "Docs": [
              "The given task can never be executed since it is overweight."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events type."
        ]
      },
      "44": {
        "TypeIds": [
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "45": {
        "Variants": [
          {
            "Name": "Noted",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "A preimage has been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 1,
            "Docs": [
              "A preimage has been requested."
            ]
          },
          {
            "Name": "Cleared",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "A preimage has ben cleared."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "46": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "destination_status",
                "TypeName": "Status",
                "TypeId": 47
              }
            ],
            "Index": 6,
            "Docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ]
          },
          {
            "Name": "Minted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Some amount was minted into an account."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Some amount was burned from an account."
            ]
          },
          {
            "Name": "Suspended",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 12,
            "Docs": [
              "Some amount was suspended from an account (it can be restored later)."
            ]
          },
          {
            "Name": "Restored",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Some amount was restored into an account."
            ]
          },
          {
            "Name": "Upgraded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "An account was upgraded."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 15,
            "Docs": [
              "Total issuance was increased by `amount`, creating a credit to be balanced."
            ]
          },
          {
            "Name": "Rescinded",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "Total issuance was decreased by `amount`, creating a debt to be balanced."
            ]
          },
          {
            "Name": "Locked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "Some balance was locked."
            ]
          },
          {
            "Name": "Unlocked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "Some balance was unlocked."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "Some balance was frozen."
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 20,
            "Docs": [
              "Some balance was thawed."
            ]
          },
          {
            "Name": "TotalIssuanceForced",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "new",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 21,
            "Docs": [
              "The `TotalIssuance` was forcefully changed."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "47": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Reserved",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "BalanceStatus"
        ],
        "TypeDef": "Variant"
      },
      "48": {
        "Variants": [
          {
            "Name": "TransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "49": {
        "Variants": [
          {
            "Name": "VestingScheduleAdded",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "vesting_schedule",
                "TypeName": "VestingScheduleOf<T>",
                "TypeId": 50
              }
            ],
            "Index": 0,
            "Docs": [
              "Added new vesting schedule."
            ]
          },
          {
            "Name": "Claimed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Claimed vesting."
            ]
          },
          {
            "Name": "VestingSchedulesUpdated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Updated vesting schedules."
            ]
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "50": {
        "TypeFields": [
          {
            "Name": "start",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "period_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "per_period",
            "TypeName": "Balance",
            "TypeId": 51
          }
        ],
        "Path": [
          "orml_vesting",
          "VestingSchedule"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "51": {
        "TypeId": 6,
        "TypeDef": "Compact"
      },
      "52": {
        "Variants": [
          {
            "Name": "NewInvulnerables",
            "TypeFields": [
              {
                "Name": "invulnerables",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 53
              }
            ],
            "Index": 0,
            "Docs": [
              "New Invulnerables were set."
            ]
          },
          {
            "Name": "InvulnerableAdded",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "A new Invulnerable was added."
            ]
          },
          {
            "Name": "InvulnerableRemoved",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "An Invulnerable was removed."
            ]
          },
          {
            "Name": "NewDesiredCandidates",
            "TypeFields": [
              {
                "Name": "desired_candidates",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "The number of desired candidates was set."
            ]
          },
          {
            "Name": "NewCandidacyBond",
            "TypeFields": [
              {
                "Name": "bond_amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "The candidacy bond was set."
            ]
          },
          {
            "Name": "CandidateAdded",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "A new candidate joined."
            ]
          },
          {
            "Name": "CandidateBondUpdated",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Bond of a candidate updated."
            ]
          },
          {
            "Name": "CandidateRemoved",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "A candidate was removed."
            ]
          },
          {
            "Name": "CandidateReplaced",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "new",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "An account was replaced in the candidate list by another one."
            ]
          },
          {
            "Name": "InvalidInvulnerableSkipped",
            "TypeFields": [
              {
                "Name": "account_id",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 9,
            "Docs": [
              "An account was unable to be added to the Invulnerables because they did not have keys",
              "registered. Other Invulnerables may have been set."
            ]
          }
        ],
        "Path": [
          "pallet_collator_selection",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "53": {
        "TypeId": 0,
        "TypeDef": "Sequence"
      },
      "54": {
        "Variants": [
          {
            "Name": "NewSession",
            "TypeFields": [
              {
                "Name": "session_index",
                "TypeName": "SessionIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New session has happened. Note that the argument is the session index, not the",
              "block number as the type might suggest."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "55": {
        "Variants": [
          {
            "Name": "XcmpMessageSent",
            "TypeFields": [
              {
                "Name": "message_hash",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "An HRMP message was sent to a sibling parachain."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "56": {
        "Variants": [
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "Name": "outcome",
                "TypeName": "xcm::latest::Outcome",
                "TypeId": 57
              }
            ],
            "Index": 0,
            "Docs": [
              "Execution of an XCM message was attempted."
            ]
          },
          {
            "Name": "Sent",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "message",
                "TypeName": "Xcm<()>",
                "TypeId": 76
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "A XCM message was sent."
            ]
          },
          {
            "Name": "UnexpectedResponse",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "Query response received which does not match a registered query. This may be because a",
              "matching query was never registered, it may be because it is a duplicate response, or",
              "because the query timed out."
            ]
          },
          {
            "Name": "ResponseReady",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 87
              }
            ],
            "Index": 3,
            "Docs": [
              "Query response has been received and is ready for taking with `take_response`. There is",
              "no registered notification call."
            ]
          },
          {
            "Name": "Notified",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4,
            "Docs": [
              "Query response has been received and query is removed. The registered notification has",
              "been dispatched and executed successfully."
            ]
          },
          {
            "Name": "NotifyOverweight",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "actual_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "max_budgeted_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 5,
            "Docs": [
              "Query response has been received and query is removed. The registered notification",
              "could not be dispatched because the dispatch weight is greater than the maximum weight",
              "originally budgeted by this runtime for the query result."
            ]
          },
          {
            "Name": "NotifyDispatchError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 6,
            "Docs": [
              "Query response has been received and query is removed. There was a general error with",
              "dispatching the notification call."
            ]
          },
          {
            "Name": "NotifyDecodeFailed",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "pallet_index",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "call_index",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 7,
            "Docs": [
              "Query response has been received and query is removed. The dispatch was unable to be",
              "decoded into a `Call`; this might be due to dispatch function having a signature which",
              "is not `(origin, QueryId, Response)`."
            ]
          },
          {
            "Name": "InvalidResponder",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "expected_location",
                "TypeName": "Option<Location>",
                "TypeId": 96
              }
            ],
            "Index": 8,
            "Docs": [
              "Expected query response has been received but the origin location of the response does",
              "not match that expected. The query remains registered for a later, valid, response to",
              "be received and acted upon."
            ]
          },
          {
            "Name": "InvalidResponderVersion",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 9,
            "Docs": [
              "Expected query response has been received but the expected origin location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed."
            ]
          },
          {
            "Name": "ResponseTaken",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 10,
            "Docs": [
              "Received query response has been read and removed."
            ]
          },
          {
            "Name": "AssetsTrapped",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H256",
                "TypeId": 13
              },
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "assets",
                "TypeName": "VersionedAssets",
                "TypeId": 104
              }
            ],
            "Index": 11,
            "Docs": [
              "Some assets have been placed in an asset trap."
            ]
          },
          {
            "Name": "VersionChangeNotified",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "result",
                "TypeName": "XcmVersion",
                "TypeId": 4
              },
              {
                "Name": "cost",
                "TypeName": "Assets",
                "TypeId": 79
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 12,
            "Docs": [
              "An XCM version change notification message has been attempted to be sent.",
              "",
              "The cost of sending it (borne by the chain) is included."
            ]
          },
          {
            "Name": "SupportedVersionChanged",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "The supported version of a location has been changed. This might be through an",
              "automatic notification or a manual intervention."
            ]
          },
          {
            "Name": "NotifyTargetSendFail",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "error",
                "TypeName": "XcmError",
                "TypeId": 58
              }
            ],
            "Index": 14,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "sending the notification to it."
            ]
          },
          {
            "Name": "NotifyTargetMigrationFail",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "VersionedLocation",
                "TypeId": 129
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 15,
            "Docs": [
              "A given location which had a version change subscription was dropped owing to an error",
              "migrating the location to our new XCM format."
            ]
          },
          {
            "Name": "InvalidQuerierVersion",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              }
            ],
            "Index": 16,
            "Docs": [
              "Expected query response has been received but the expected querier location placed in",
              "storage by this runtime previously cannot be decoded. The query remains registered.",
              "",
              "This is unexpected (since a location placed in storage in a previously executing",
              "runtime should be readable prior to query timeout) and dangerous since the possibly",
              "valid response will be dropped. Manual governance intervention is probably going to be",
              "needed."
            ]
          },
          {
            "Name": "InvalidQuerier",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 12
              },
              {
                "Name": "expected_querier",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "maybe_actual_querier",
                "TypeName": "Option<Location>",
                "TypeId": 96
              }
            ],
            "Index": 17,
            "Docs": [
              "Expected query response has been received but the querier location of the response does",
              "not match the expected. The query remains registered for a later, valid, response to",
              "be received and acted upon."
            ]
          },
          {
            "Name": "VersionNotifyStarted",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "cost",
                "TypeName": "Assets",
                "TypeId": 79
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 18,
            "Docs": [
              "A remote has requested XCM version change notification from us and we have honored it.",
              "A version information message is sent to them and its cost is included."
            ]
          },
          {
            "Name": "VersionNotifyRequested",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "cost",
                "TypeName": "Assets",
                "TypeId": 79
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 19,
            "Docs": [
              "We have requested that a remote chain send us XCM version change notifications."
            ]
          },
          {
            "Name": "VersionNotifyUnrequested",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "cost",
                "TypeName": "Assets",
                "TypeId": 79
              },
              {
                "Name": "message_id",
                "TypeName": "XcmHash",
                "TypeId": 1
              }
            ],
            "Index": 20,
            "Docs": [
              "We have requested that a remote chain stops sending us XCM version change",
              "notifications."
            ]
          },
          {
            "Name": "FeesPaid",
            "TypeFields": [
              {
                "Name": "paying",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "fees",
                "TypeName": "Assets",
                "TypeId": 79
              }
            ],
            "Index": 21,
            "Docs": [
              "Fees were paid from a location for an operation (often for using `SendXcm`)."
            ]
          },
          {
            "Name": "AssetsClaimed",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H256",
                "TypeId": 13
              },
              {
                "Name": "origin",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "assets",
                "TypeName": "VersionedAssets",
                "TypeId": 104
              }
            ],
            "Index": 22,
            "Docs": [
              "Some assets have been claimed from an asset trap"
            ]
          },
          {
            "Name": "VersionMigrationFinished",
            "TypeFields": [
              {
                "Name": "version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 23,
            "Docs": [
              "A XCM version migration finished."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "57": {
        "Variants": [
          {
            "Name": "Complete",
            "TypeFields": [
              {
                "Name": "used",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 0
          },
          {
            "Name": "Incomplete",
            "TypeFields": [
              {
                "Name": "used",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "error",
                "TypeName": "Error",
                "TypeId": 58
              }
            ],
            "Index": 1
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "Error",
                "TypeId": 58
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "traits",
          "Outcome"
        ],
        "TypeDef": "Variant"
      },
      "58": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "LocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 12
              }
            ],
            "Index": 21
          },
          {
            "Name": "ExpectationFalse",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "PalletNotFound",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "NameMismatch",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "VersionIncompatible",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "HoldingWouldOverflow",
            "TypeFields": null,
            "Index": 26
          },
          {
            "Name": "ExportError",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "ReanchorFailed",
            "TypeFields": null,
            "Index": 28
          },
          {
            "Name": "NoDeal",
            "TypeFields": null,
            "Index": 29
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 30
          },
          {
            "Name": "LockError",
            "TypeFields": null,
            "Index": 31
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 32
          },
          {
            "Name": "Unanchored",
            "TypeFields": null,
            "Index": 33
          },
          {
            "Name": "NotDepositable",
            "TypeFields": null,
            "Index": 34
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 35
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 36
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 37
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 38
          },
          {
            "Name": "ExceedsStackLimit",
            "TypeFields": null,
            "Index": 39
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "59": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 60
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "location",
          "Location"
        ],
        "TypeDef": "Composite"
      },
      "60": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 1]>",
                "TypeId": 61
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 2]>",
                "TypeId": 69
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 3]>",
                "TypeId": 70
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 4]>",
                "TypeId": 71
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 5]>",
                "TypeId": 72
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 6]>",
                "TypeId": 73
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 7]>",
                "TypeId": 74
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Arc<[Junction; 8]>",
                "TypeId": 75
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "junctions",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "61": {
        "Length": 1,
        "TypeId": 62,
        "TypeDef": "Array"
      },
      "62": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 64
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 64
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 64
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 66
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 51
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "data",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 67
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 68
              }
            ],
            "Index": 8
          },
          {
            "Name": "GlobalConsensus",
            "TypeFields": [
              {
                "TypeName": "NetworkId",
                "TypeId": 65
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "63": {
        "TypeId": 4,
        "TypeDef": "Compact"
      },
      "64": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 65
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 65
          }
        ],
        "TypeDef": "Variant"
      },
      "65": {
        "Variants": [
          {
            "Name": "ByGenesis",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0
          },
          {
            "Name": "ByFork",
            "TypeFields": [
              {
                "Name": "block_number",
                "TypeName": "u64",
                "TypeId": 12
              },
              {
                "Name": "block_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Westend",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Rococo",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Wococo",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 7
          },
          {
            "Name": "BitcoinCore",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "BitcoinCash",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "PolkadotBulletin",
            "TypeFields": null,
            "Index": 10
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "junction",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "66": {
        "Length": 20,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "67": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Moniker",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 18
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "68": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "69": {
        "Length": 2,
        "TypeId": 62,
        "TypeDef": "Array"
      },
      "70": {
        "Length": 3,
        "TypeId": 62,
        "TypeDef": "Array"
      },
      "71": {
        "Length": 4,
        "TypeId": 62,
        "TypeDef": "Array"
      },
      "72": {
        "Length": 5,
        "TypeId": 62,
        "TypeDef": "Array"
      },
      "73": {
        "Length": 6,
        "TypeId": 62,
        "TypeDef": "Array"
      },
      "74": {
        "Length": 7,
        "TypeId": 62,
        "TypeDef": "Array"
      },
      "75": {
        "Length": 8,
        "TypeId": 62,
        "TypeDef": "Array"
      },
      "76": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 77
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "77": {
        "TypeId": 78,
        "TypeDef": "Sequence"
      },
      "78": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 79
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 79
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 79
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 87
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "querier",
                "TypeName": "Option<Location>",
                "TypeId": 96
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 79
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 79
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 76
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 97
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 98
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorLocation",
                "TypeId": 60
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 99
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 100
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 100
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 76
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "AssetFilter",
                "TypeId": 100
              },
              {
                "Name": "want",
                "TypeName": "Assets",
                "TypeId": 79
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 100
              },
              {
                "Name": "reserve",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 76
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 100
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 76
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 99
              },
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 100
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "Asset",
                "TypeId": 81
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 76
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 76
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 79
              },
              {
                "Name": "ticket",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 79
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 79
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<Location>",
                "TypeId": 96
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 88
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 94
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 99
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 99
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 62
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 65
              },
              {
                "Name": "destination",
                "TypeName": "InteriorLocation",
                "TypeId": 60
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 76
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 81
              },
              {
                "Name": "unlocker",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 81
              },
              {
                "Name": "target",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 81
              },
              {
                "Name": "owner",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 81
              },
              {
                "Name": "locker",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<Location>",
                "TypeId": 96
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "79": {
        "TypeFields": [
          {
            "TypeName": "Vec<Asset>",
            "TypeId": 80
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "Assets"
        ],
        "TypeDef": "Composite"
      },
      "80": {
        "TypeId": 81,
        "TypeDef": "Sequence"
      },
      "81": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 82
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 83
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "Asset"
        ],
        "TypeDef": "Composite"
      },
      "82": {
        "TypeFields": [
          {
            "TypeName": "Location",
            "TypeId": 59
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "AssetId"
        ],
        "TypeDef": "Composite"
      },
      "83": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 51
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 84
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "84": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 51
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 18
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 85
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 86
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "85": {
        "Length": 8,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "86": {
        "Length": 16,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "87": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 79
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 88
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletsInfo",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                "TypeId": 90
              }
            ],
            "Index": 4
          },
          {
            "Name": "DispatchResult",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 94
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "88": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 89
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 89
          }
        ],
        "TypeDef": "Variant"
      },
      "89": {
        "TypeIds": [
          4,
          58
        ],
        "TypeDef": "Tuple"
      },
      "90": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 93
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 91
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "91": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 92
          },
          {
            "Name": "module_name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 92
          },
          {
            "Name": "major",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "minor",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "patch",
            "TypeName": "u32",
            "TypeId": 63
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "PalletInfo"
        ],
        "TypeDef": "Composite"
      },
      "92": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "93": {
        "TypeId": 91,
        "TypeDef": "Sequence"
      },
      "94": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 95
              }
            ],
            "Index": 1
          },
          {
            "Name": "TruncatedError",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                "TypeId": 95
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "MaybeErrorCode"
        ],
        "TypeDef": "Variant"
      },
      "95": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "96": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 59
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 59
          }
        ],
        "TypeDef": "Variant"
      },
      "97": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SovereignAccount",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Superuser",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Xcm",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "OriginKind"
        ],
        "TypeDef": "Variant"
      },
      "98": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "99": {
        "TypeFields": [
          {
            "Name": "destination",
            "TypeName": "Location",
            "TypeId": 59
          },
          {
            "Name": "query_id",
            "TypeName": "QueryId",
            "TypeId": 11
          },
          {
            "Name": "max_weight",
            "TypeName": "Weight",
            "TypeId": 10
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "QueryResponseInfo"
        ],
        "TypeDef": "Composite"
      },
      "100": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 79
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildAsset",
                "TypeId": 101
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "AssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "101": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 82
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 102
              }
            ],
            "Index": 1
          },
          {
            "Name": "AllCounted",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2
          },
          {
            "Name": "AllOfCounted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 82
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 102
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "WildAsset"
        ],
        "TypeDef": "Variant"
      },
      "102": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "asset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "103": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "104": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiAssets",
                "TypeId": 105
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAssets",
                "TypeId": 118
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Assets",
                "TypeId": 79
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "VersionedAssets"
        ],
        "TypeDef": "Variant"
      },
      "105": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 106
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "106": {
        "TypeId": 107,
        "TypeDef": "Sequence"
      },
      "107": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 108
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 116
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "108": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "109": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 110
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "110": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              },
              {
                "TypeName": "Junction",
                "TypeId": 111
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multilocation",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "111": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 112
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 112
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 112
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 66
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 51
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 113
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 114
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 115
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "112": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 113
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "113": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "114": {
        "Variants": [
          {
            "Name": "Unit",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Named",
            "TypeFields": [
              {
                "TypeName": "WeakBoundedVec<u8, ConstU32<32>>",
                "TypeId": 113
              }
            ],
            "Index": 1
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2
          },
          {
            "Name": "Executive",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Technical",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Legislative",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Judicial",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Defense",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Administration",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Treasury",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "BodyId"
        ],
        "TypeDef": "Variant"
      },
      "115": {
        "Variants": [
          {
            "Name": "Voice",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Members",
            "TypeFields": [
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 1
          },
          {
            "Name": "Fraction",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2
          },
          {
            "Name": "AtLeastProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 3
          },
          {
            "Name": "MoreThanProportion",
            "TypeFields": [
              {
                "Name": "nom",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "denom",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "BodyPart"
        ],
        "TypeDef": "Variant"
      },
      "116": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 51
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 117
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "117": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 51
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 18
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 85
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 86
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          },
          {
            "Name": "Blob",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 6
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "118": {
        "TypeFields": [
          {
            "TypeName": "Vec<MultiAsset>",
            "TypeId": 119
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssets"
        ],
        "TypeDef": "Composite"
      },
      "119": {
        "TypeId": 120,
        "TypeDef": "Sequence"
      },
      "120": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 121
          },
          {
            "Name": "fun",
            "TypeName": "Fungibility",
            "TypeId": 127
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAsset"
        ],
        "TypeDef": "Composite"
      },
      "121": {
        "Variants": [
          {
            "Name": "Concrete",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 0
          },
          {
            "Name": "Abstract",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetId"
        ],
        "TypeDef": "Variant"
      },
      "122": {
        "TypeFields": [
          {
            "Name": "parents",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "interior",
            "TypeName": "Junctions",
            "TypeId": 123
          }
        ],
        "Path": [
          "staging_xcm",
          "v3",
          "multilocation",
          "MultiLocation"
        ],
        "TypeDef": "Composite"
      },
      "123": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "X1",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 124
              }
            ],
            "Index": 1
          },
          {
            "Name": "X2",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              }
            ],
            "Index": 2
          },
          {
            "Name": "X3",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              }
            ],
            "Index": 3
          },
          {
            "Name": "X4",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              }
            ],
            "Index": 4
          },
          {
            "Name": "X5",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              }
            ],
            "Index": 5
          },
          {
            "Name": "X6",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              }
            ],
            "Index": 6
          },
          {
            "Name": "X7",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              }
            ],
            "Index": 7
          },
          {
            "Name": "X8",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              },
              {
                "TypeName": "Junction",
                "TypeId": 124
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junctions",
          "Junctions"
        ],
        "TypeDef": "Variant"
      },
      "124": {
        "Variants": [
          {
            "Name": "Parachain",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountId32",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 125
              },
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountIndex64",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 125
              },
              {
                "Name": "index",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 2
          },
          {
            "Name": "AccountKey20",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "Option<NetworkId>",
                "TypeId": 125
              },
              {
                "Name": "key",
                "TypeName": "[u8; 20]",
                "TypeId": 66
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletInstance",
            "TypeFields": [
              {
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "GeneralIndex",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 51
              }
            ],
            "Index": 5
          },
          {
            "Name": "GeneralKey",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "data",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 6
          },
          {
            "Name": "OnlyChild",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Plurality",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "BodyId",
                "TypeId": 67
              },
              {
                "Name": "part",
                "TypeName": "BodyPart",
                "TypeId": 68
              }
            ],
            "Index": 8
          },
          {
            "Name": "GlobalConsensus",
            "TypeFields": [
              {
                "TypeName": "NetworkId",
                "TypeId": 126
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "Junction"
        ],
        "TypeDef": "Variant"
      },
      "125": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 126
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 126
          }
        ],
        "TypeDef": "Variant"
      },
      "126": {
        "Variants": [
          {
            "Name": "ByGenesis",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0
          },
          {
            "Name": "ByFork",
            "TypeFields": [
              {
                "Name": "block_number",
                "TypeName": "u64",
                "TypeId": 12
              },
              {
                "Name": "block_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1
          },
          {
            "Name": "Polkadot",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Kusama",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Westend",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Rococo",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Wococo",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Ethereum",
            "TypeFields": [
              {
                "Name": "chain_id",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 7
          },
          {
            "Name": "BitcoinCore",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "BitcoinCash",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "PolkadotBulletin",
            "TypeFields": null,
            "Index": 10
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "junction",
          "NetworkId"
        ],
        "TypeDef": "Variant"
      },
      "127": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 51
              }
            ],
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": [
              {
                "TypeName": "AssetInstance",
                "TypeId": 128
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "Fungibility"
        ],
        "TypeDef": "Variant"
      },
      "128": {
        "Variants": [
          {
            "Name": "Undefined",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "u128",
                "TypeId": 51
              }
            ],
            "Index": 1
          },
          {
            "Name": "Array4",
            "TypeFields": [
              {
                "TypeName": "[u8; 4]",
                "TypeId": 18
              }
            ],
            "Index": 2
          },
          {
            "Name": "Array8",
            "TypeFields": [
              {
                "TypeName": "[u8; 8]",
                "TypeId": 85
              }
            ],
            "Index": 3
          },
          {
            "Name": "Array16",
            "TypeFields": [
              {
                "TypeName": "[u8; 16]",
                "TypeId": 86
              }
            ],
            "Index": 4
          },
          {
            "Name": "Array32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "AssetInstance"
        ],
        "TypeDef": "Variant"
      },
      "129": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Location",
                "TypeId": 59
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "VersionedLocation"
        ],
        "TypeDef": "Variant"
      },
      "130": {
        "Variants": [
          {
            "Name": "InvalidFormat",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "Downward message is invalid XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "UnsupportedVersion",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "Downward message is unsupported version of XCM.",
              "\\[ id \\]"
            ]
          },
          {
            "Name": "ExecutedDownward",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "TypeName": "Outcome",
                "TypeId": 57
              }
            ],
            "Index": 2,
            "Docs": [
              "Downward message executed with the given outcome.",
              "\\[ id, outcome \\]"
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "131": {
        "Variants": [
          {
            "Name": "ProcessingFailed",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "H256",
                "TypeId": 13,
                "Docs": [
                  "The `blake2_256` hash of the message."
                ]
              },
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 132,
                "Docs": [
                  "The queue of the message."
                ]
              },
              {
                "Name": "error",
                "TypeName": "ProcessMessageError",
                "TypeId": 134,
                "Docs": [
                  "The error that occurred.",
                  "",
                  "This error is pretty opaque. More fine-grained errors need to be emitted as events",
                  "by the `MessageProcessor`."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
            ]
          },
          {
            "Name": "Processed",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "H256",
                "TypeId": 13,
                "Docs": [
                  "The `blake2_256` hash of the message."
                ]
              },
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 132,
                "Docs": [
                  "The queue of the message."
                ]
              },
              {
                "Name": "weight_used",
                "TypeName": "Weight",
                "TypeId": 10,
                "Docs": [
                  "How much weight was used to process the message."
                ]
              },
              {
                "Name": "success",
                "TypeName": "bool",
                "TypeId": 8,
                "Docs": [
                  "Whether the message was processed.",
                  "",
                  "Note that this does not mean that the underlying `MessageProcessor` was internally",
                  "successful. It *solely* means that the MQ pallet will treat this as a success",
                  "condition and discard the message. Any internal error needs to be emitted as events",
                  "by the `MessageProcessor`."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "Message is processed."
            ]
          },
          {
            "Name": "OverweightEnqueued",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "[u8; 32]",
                "TypeId": 1,
                "Docs": [
                  "The `blake2_256` hash of the message."
                ]
              },
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 132,
                "Docs": [
                  "The queue of the message."
                ]
              },
              {
                "Name": "page_index",
                "TypeName": "PageIndex",
                "TypeId": 4,
                "Docs": [
                  "The page of the message."
                ]
              },
              {
                "Name": "message_index",
                "TypeName": "T::Size",
                "TypeId": 4,
                "Docs": [
                  "The index of the message within the page."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Message placed in overweight queue."
            ]
          },
          {
            "Name": "PageReaped",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 132,
                "Docs": [
                  "The queue of the page."
                ]
              },
              {
                "Name": "index",
                "TypeName": "PageIndex",
                "TypeId": 4,
                "Docs": [
                  "The index of the page."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "This page was reaped."
            ]
          }
        ],
        "Path": [
          "pallet_message_queue",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "132": {
        "Variants": [
          {
            "Name": "Here",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Parent",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Sibling",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 133
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "cumulus_primitives_core",
          "AggregateMessageOrigin"
        ],
        "TypeDef": "Variant"
      },
      "133": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_parachain_primitives",
          "primitives",
          "Id"
        ],
        "TypeDef": "Composite"
      },
      "134": {
        "Variants": [
          {
            "Name": "BadFormat",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Corrupt",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Overweight",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 3
          },
          {
            "Name": "Yield",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "StackLimitReached",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "messages",
          "ProcessMessageError"
        ],
        "TypeDef": "Variant"
      },
      "135": {
        "Variants": [
          {
            "Name": "TransferredAssets",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 79
              },
              {
                "Name": "fee",
                "TypeName": "Asset",
                "TypeId": 81
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 0,
            "Docs": [
              "Transferred `Asset` with fee."
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "136": {
        "Variants": [
          {
            "Name": "Sent",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "message",
                "TypeName": "Xcm<()>",
                "TypeId": 76
              }
            ],
            "Index": 0,
            "Docs": [
              "XCM message sent. \\[to, message\\]"
            ]
          }
        ],
        "Path": [
          "orml_xcm",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "137": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New proposal."
            ]
          },
          {
            "Name": "Spending",
            "TypeFields": [
              {
                "Name": "budget_remaining",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "We have ended a spend period and will now allocate funds."
            ]
          },
          {
            "Name": "Awarded",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "award",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Some funds have been allocated."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "slashed",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A proposal was rejected; funds were slashed."
            ]
          },
          {
            "Name": "Burnt",
            "TypeFields": [
              {
                "Name": "burnt_funds",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some of our funds have been burnt."
            ]
          },
          {
            "Name": "Rollover",
            "TypeFields": [
              {
                "Name": "rollover_balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Spending has finished; this is the amount that rolls over until next spend."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Some funds have been deposited."
            ]
          },
          {
            "Name": "SpendApproved",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "A new spend proposal has been approved."
            ]
          },
          {
            "Name": "UpdatedInactive",
            "TypeFields": [
              {
                "Name": "reactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "deactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "The inactive funds of the pallet have been updated."
            ]
          },
          {
            "Name": "AssetSpendApproved",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "asset_kind",
                "TypeName": "T::AssetKind",
                "TypeId": 36
              },
              {
                "Name": "amount",
                "TypeName": "AssetBalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::Beneficiary",
                "TypeId": 0
              },
              {
                "Name": "valid_from",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "expire_at",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "A new asset spend proposal has been approved."
            ]
          },
          {
            "Name": "AssetSpendVoided",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "An approved spend was voided."
            ]
          },
          {
            "Name": "Paid",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "payment_id",
                "TypeName": "<T::Paymaster as Pay>::Id",
                "TypeId": 36
              }
            ],
            "Index": 11,
            "Docs": [
              "A payment happened."
            ]
          },
          {
            "Name": "PaymentFailed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "payment_id",
                "TypeName": "<T::Paymaster as Pay>::Id",
                "TypeId": 36
              }
            ],
            "Index": 12,
            "Docs": [
              "A payment failed and can be retried."
            ]
          },
          {
            "Name": "SpendProcessed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "A spend was processed and removed from the storage. It might have been successfully",
              "paid or it may have expired."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "138": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "139": {
        "Variants": [
          {
            "Name": "MemberAdded",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The given member was added; see the transaction for who."
            ]
          },
          {
            "Name": "MemberRemoved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given member was removed; see the transaction for who."
            ]
          },
          {
            "Name": "MembersSwapped",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Two members were swapped; see the transaction for who."
            ]
          },
          {
            "Name": "MembersReset",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The membership was reset; see the transaction for who the new set is."
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "One of the members' keys changed."
            ]
          },
          {
            "Name": "Dummy",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Phantom member, never used."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "140": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 35
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "141": {
        "Variants": [
          {
            "Name": "MemberAdded",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The given member was added; see the transaction for who."
            ]
          },
          {
            "Name": "MemberRemoved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given member was removed; see the transaction for who."
            ]
          },
          {
            "Name": "MembersSwapped",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Two members were swapped; see the transaction for who."
            ]
          },
          {
            "Name": "MembersReset",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The membership was reset; see the transaction for who the new set is."
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "One of the members' keys changed."
            ]
          },
          {
            "Name": "Dummy",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Phantom member, never used."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "142": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion has been proposed by a public account."
            ]
          },
          {
            "Name": "Tabled",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A public proposal has been tabled for referendum vote."
            ]
          },
          {
            "Name": "ExternalTabled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "An external proposal has been tabled."
            ]
          },
          {
            "Name": "Started",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "threshold",
                "TypeName": "VoteThreshold",
                "TypeId": 143
              }
            ],
            "Index": 3,
            "Docs": [
              "A referendum has begun."
            ]
          },
          {
            "Name": "Passed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proposal has been approved by referendum."
            ]
          },
          {
            "Name": "NotPassed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A proposal has been rejected by referendum."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A referendum has been cancelled."
            ]
          },
          {
            "Name": "Delegated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "An account has delegated their vote to another account."
            ]
          },
          {
            "Name": "Undelegated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "An account has cancelled a previous delegation operation."
            ]
          },
          {
            "Name": "Vetoed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "until",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "An external proposal has been vetoed."
            ]
          },
          {
            "Name": "Blacklisted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 10,
            "Docs": [
              "A proposal_hash has been blacklisted permanently."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "voter",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 144
              }
            ],
            "Index": 11,
            "Docs": [
              "An account has voted in a referendum"
            ]
          },
          {
            "Name": "Seconded",
            "TypeFields": [
              {
                "Name": "seconder",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "An account has seconded a proposal"
            ]
          },
          {
            "Name": "ProposalCanceled",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "A proposal got canceled."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 146,
                "Docs": [
                  "Metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Metadata for a proposal or a referendum has been set."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 146,
                "Docs": [
                  "Metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Metadata for a proposal or a referendum has been cleared."
            ]
          },
          {
            "Name": "MetadataTransferred",
            "TypeFields": [
              {
                "Name": "prev_owner",
                "TypeName": "MetadataOwner",
                "TypeId": 146,
                "Docs": [
                  "Previous metadata owner."
                ]
              },
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 146,
                "Docs": [
                  "New metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 16,
            "Docs": [
              "Metadata has been transferred to new owner."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "143": {
        "Variants": [
          {
            "Name": "SuperMajorityApprove",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SuperMajorityAgainst",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "SimpleMajority",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote_threshold",
          "VoteThreshold"
        ],
        "TypeDef": "Variant"
      },
      "144": {
        "Variants": [
          {
            "Name": "Standard",
            "TypeFields": [
              {
                "Name": "vote",
                "TypeName": "Vote",
                "TypeId": 145
              },
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Split",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "AccountVote"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "145": {
        "TypeFields": [
          {
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Vote"
        ],
        "TypeDef": "Composite"
      },
      "146": {
        "Variants": [
          {
            "Name": "External",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Proposal",
            "TypeFields": [
              {
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Referendum",
            "TypeFields": [
              {
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "MetadataOwner"
        ],
        "TypeDef": "Variant"
      },
      "147": {
        "Variants": [
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "creator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "Some asset class was created."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Some assets were issued."
            ]
          },
          {
            "Name": "Transferred",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Some assets were transferred."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Some assets were destroyed."
            ]
          },
          {
            "Name": "TeamChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "issuer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "admin",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "freezer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "The management team changed."
            ]
          },
          {
            "Name": "OwnerChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "The owner changed."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "Some account `who` was frozen."
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "Some account `who` was thawed."
            ]
          },
          {
            "Name": "AssetFrozen",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Some asset `asset_id` was frozen."
            ]
          },
          {
            "Name": "AssetThawed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "Some asset `asset_id` was thawed."
            ]
          },
          {
            "Name": "AccountsDestroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "accounts_destroyed",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "accounts_remaining",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Accounts were destroyed for given asset."
            ]
          },
          {
            "Name": "ApprovalsDestroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "approvals_destroyed",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "approvals_remaining",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 11,
            "Docs": [
              "Approvals were destroyed for given asset."
            ]
          },
          {
            "Name": "DestructionStarted",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "An asset class is in the process of being destroyed."
            ]
          },
          {
            "Name": "Destroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "An asset class was destroyed."
            ]
          },
          {
            "Name": "ForceCreated",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "Some asset class was force-created."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15,
            "Docs": [
              "New metadata has been set for an asset."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 16,
            "Docs": [
              "Metadata has been cleared for an asset."
            ]
          },
          {
            "Name": "ApprovedTransfer",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "source",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "(Additional) funds have been approved for transfer to a destination account."
            ]
          },
          {
            "Name": "ApprovalCancelled",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 18,
            "Docs": [
              "An approval for account `delegate` was cancelled by `owner`."
            ]
          },
          {
            "Name": "TransferredApproved",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "destination",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "An `amount` was transferred in its entirety from `owner` to `destination` by",
              "the approved `delegate`."
            ]
          },
          {
            "Name": "AssetStatusChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 20,
            "Docs": [
              "An asset has had its attributes changed by the `Force` origin."
            ]
          },
          {
            "Name": "AssetMinBalanceChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "new_min_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 21,
            "Docs": [
              "The min_balance of an asset has been updated by the asset owner."
            ]
          },
          {
            "Name": "Touched",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "depositor",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 22,
            "Docs": [
              "Some account `who` was created with a deposit from `depositor`."
            ]
          },
          {
            "Name": "Blocked",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 23,
            "Docs": [
              "Some account `who` was blocked."
            ]
          },
          {
            "Name": "Deposited",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 24,
            "Docs": [
              "Some assets were deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 25,
            "Docs": [
              "Some assets were withdrawn from the account (e.g. for transaction fees)."
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "148": {
        "Variants": [
          {
            "Name": "ReserveAssetRegistered",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 4
              },
              {
                "Name": "asset_location",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetUnregistered",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 4
              },
              {
                "Name": "asset_location",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_asset_registry",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "149": {
        "Variants": [
          {
            "Name": "ApplyExtrinsic",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finalization",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Initialization",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_system",
          "Phase"
        ],
        "TypeDef": "Variant"
      },
      "150": {
        "TypeId": 13,
        "TypeDef": "Sequence"
      },
      "151": {
        "TypeId": 44,
        "TypeDef": "Sequence"
      },
      "152": {
        "TypeFields": [
          {
            "Name": "spec_version",
            "TypeName": "codec::Compact<u32>",
            "TypeId": 63
          },
          {
            "Name": "spec_name",
            "TypeName": "sp_runtime::RuntimeString",
            "TypeId": 153
          }
        ],
        "Path": [
          "frame_system",
          "LastRuntimeUpgradeInfo"
        ],
        "TypeDef": "Composite"
      },
      "153": {
        "Primitive": "Str",
        "TypeDef": "Primitive"
      },
      "154": {
        "TypeFields": [
          {
            "Name": "code_hash",
            "TypeName": "T::Hash",
            "TypeId": 13
          },
          {
            "Name": "check_version",
            "TypeName": "bool",
            "TypeId": 8
          }
        ],
        "Path": [
          "frame_system",
          "CodeUpgradeAuthorization"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "155": {
        "Variants": [
          {
            "Name": "remark",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 0,
            "Docs": [
              "Make some on-chain remark.",
              "",
              "Can be executed by every `origin`."
            ]
          },
          {
            "Name": "set_heap_pages",
            "TypeFields": [
              {
                "Name": "pages",
                "TypeName": "u64",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the number of pages in the WebAssembly environment's heap."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the new runtime code."
            ]
          },
          {
            "Name": "set_code_without_checks",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the new runtime code without doing any checks of the given `code`.",
              "",
              "Note that runtime upgrades will not run if this is called with a not-increasing spec",
              "version!"
            ]
          },
          {
            "Name": "set_storage",
            "TypeFields": [
              {
                "Name": "items",
                "TypeName": "Vec<KeyValue>",
                "TypeId": 156
              }
            ],
            "Index": 4,
            "Docs": [
              "Set some items of storage."
            ]
          },
          {
            "Name": "kill_storage",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Key>",
                "TypeId": 158
              }
            ],
            "Index": 5,
            "Docs": [
              "Kill some items from storage."
            ]
          },
          {
            "Name": "kill_prefix",
            "TypeFields": [
              {
                "Name": "prefix",
                "TypeName": "Key",
                "TypeId": 14
              },
              {
                "Name": "subkeys",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Kill all storage items with a key that starts with the given prefix.",
              "",
              "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
              "the prefix we are removing to accurately calculate the weight of this function."
            ]
          },
          {
            "Name": "remark_with_event",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 7,
            "Docs": [
              "Make some on-chain remark and emit event."
            ]
          },
          {
            "Name": "authorize_upgrade",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 9,
            "Docs": [
              "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
              "later.",
              "",
              "This call requires Root origin."
            ]
          },
          {
            "Name": "authorize_upgrade_without_checks",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 10,
            "Docs": [
              "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
              "later.",
              "",
              "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
              "example that the spec name remains the same and that the version number increases. Not",
              "recommended for normal use. Use `authorize_upgrade` instead.",
              "",
              "This call requires Root origin."
            ]
          },
          {
            "Name": "apply_authorized_upgrade",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 11,
            "Docs": [
              "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
              "",
              "If the authorization required a version check, this call will ensure the spec name",
              "remains unchanged and that the spec version has increased.",
              "",
              "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
              "the new `code` in the same block or attempt to schedule the upgrade.",
              "",
              "All origins are allowed."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "156": {
        "TypeId": 157,
        "TypeDef": "Sequence"
      },
      "157": {
        "TypeIds": [
          14,
          14
        ],
        "TypeDef": "Tuple"
      },
      "158": {
        "TypeId": 14,
        "TypeDef": "Sequence"
      },
      "159": {
        "TypeFields": [
          {
            "Name": "base_block",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "max_block",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "per_class",
            "TypeName": "PerDispatchClass<WeightsPerClass>",
            "TypeId": 160
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockWeights"
        ],
        "TypeDef": "Composite"
      },
      "160": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 161
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 161
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 161
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 161
          }
        ],
        "TypeDef": "Composite"
      },
      "161": {
        "TypeFields": [
          {
            "Name": "base_extrinsic",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "max_extrinsic",
            "TypeName": "Option<Weight>",
            "TypeId": 162
          },
          {
            "Name": "max_total",
            "TypeName": "Option<Weight>",
            "TypeId": 162
          },
          {
            "Name": "reserved",
            "TypeName": "Option<Weight>",
            "TypeId": 162
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "WeightsPerClass"
        ],
        "TypeDef": "Composite"
      },
      "162": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 10
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 10
          }
        ],
        "TypeDef": "Variant"
      },
      "163": {
        "TypeFields": [
          {
            "Name": "max",
            "TypeName": "PerDispatchClass<u32>",
            "TypeId": 164
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockLength"
        ],
        "TypeDef": "Composite"
      },
      "164": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 4
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "165": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "write",
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_weights",
          "RuntimeDbWeight"
        ],
        "TypeDef": "Composite"
      },
      "166": {
        "TypeFields": [
          {
            "Name": "spec_name",
            "TypeName": "RuntimeString",
            "TypeId": 153
          },
          {
            "Name": "impl_name",
            "TypeName": "RuntimeString",
            "TypeId": 153
          },
          {
            "Name": "authoring_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "spec_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "impl_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "apis",
            "TypeName": "ApisVec",
            "TypeId": 167
          },
          {
            "Name": "transaction_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "state_version",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_version",
          "RuntimeVersion"
        ],
        "TypeDef": "Composite"
      },
      "167": {
        "TypeFields": [
          {
            "TypeId": 168
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 168
          }
        ],
        "TypeDef": "Composite"
      },
      "168": {
        "TypeId": 169,
        "TypeDef": "Sequence"
      },
      "169": {
        "TypeIds": [
          85,
          4
        ],
        "TypeDef": "Tuple"
      },
      "170": {
        "Variants": [
          {
            "Name": "InvalidSpecName",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "SpecVersionNeedsToIncrease",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "FailedToExtractRuntimeVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "Name": "NonDefaultComposite",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "Name": "NonZeroRefCount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "Name": "CallFiltered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The origin filter prevent the call to be dispatched."
            ]
          },
          {
            "Name": "MultiBlockMigrationsOngoing",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "A multi-block migration is ongoing and prevents the current code from being replaced."
            ]
          },
          {
            "Name": "NothingAuthorized",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No upgrade authorized."
            ]
          },
          {
            "Name": "Unauthorized",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The submitted code is not authorized."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the System pallet"
        ]
      },
      "171": {
        "TypeId": 172,
        "TypeDef": "Sequence"
      },
      "172": {
        "TypeFields": [
          {
            "Name": "used_bandwidth",
            "TypeName": "UsedBandwidth",
            "TypeId": 173
          },
          {
            "Name": "para_head_hash",
            "TypeName": "Option<H>",
            "TypeId": 178
          },
          {
            "Name": "consumed_go_ahead_signal",
            "TypeName": "Option<relay_chain::UpgradeGoAhead>",
            "TypeId": 179
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "Ancestor"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 13
          }
        ],
        "TypeDef": "Composite"
      },
      "173": {
        "TypeFields": [
          {
            "Name": "ump_msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "ump_total_bytes",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_outgoing",
            "TypeName": "BTreeMap<ParaId, HrmpChannelUpdate>",
            "TypeId": 174
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "UsedBandwidth"
        ],
        "TypeDef": "Composite"
      },
      "174": {
        "TypeFields": [
          {
            "TypeId": 176
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 133
          },
          {
            "Name": "V",
            "TypeId": 175
          }
        ],
        "TypeDef": "Composite"
      },
      "175": {
        "TypeFields": [
          {
            "Name": "msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_bytes",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "HrmpChannelUpdate"
        ],
        "TypeDef": "Composite"
      },
      "176": {
        "TypeId": 177,
        "TypeDef": "Sequence"
      },
      "177": {
        "TypeIds": [
          133,
          175
        ],
        "TypeDef": "Tuple"
      },
      "178": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 13
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 13
          }
        ],
        "TypeDef": "Variant"
      },
      "179": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 180
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 180
          }
        ],
        "TypeDef": "Variant"
      },
      "180": {
        "Variants": [
          {
            "Name": "Abort",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "GoAhead",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v7",
          "UpgradeGoAhead"
        ],
        "TypeDef": "Variant"
      },
      "181": {
        "TypeFields": [
          {
            "Name": "used_bandwidth",
            "TypeName": "UsedBandwidth",
            "TypeId": 173
          },
          {
            "Name": "hrmp_watermark",
            "TypeName": "Option<relay_chain::BlockNumber>",
            "TypeId": 182
          },
          {
            "Name": "consumed_go_ahead_signal",
            "TypeName": "Option<relay_chain::UpgradeGoAhead>",
            "TypeId": 179
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "unincluded_segment",
          "SegmentTracker"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 13
          }
        ],
        "TypeDef": "Composite"
      },
      "182": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "183": {
        "TypeFields": [
          {
            "Name": "parent_head",
            "TypeName": "HeadData",
            "TypeId": 184
          },
          {
            "Name": "relay_parent_number",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "relay_parent_storage_root",
            "TypeName": "H",
            "TypeId": 13
          },
          {
            "Name": "max_pov_size",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v7",
          "PersistedValidationData"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 13
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "184": {
        "TypeFields": [
          {
            "TypeName": "Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "polkadot_parachain_primitives",
          "primitives",
          "HeadData"
        ],
        "TypeDef": "Composite"
      },
      "185": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 186
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 186
          }
        ],
        "TypeDef": "Variant"
      },
      "186": {
        "Variants": [
          {
            "Name": "Present",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v7",
          "UpgradeRestriction"
        ],
        "TypeDef": "Variant"
      },
      "187": {
        "TypeFields": [
          {
            "Name": "trie_nodes",
            "TypeName": "BTreeSet<Vec<u8>>",
            "TypeId": 188
          }
        ],
        "Path": [
          "sp_trie",
          "storage_proof",
          "StorageProof"
        ],
        "TypeDef": "Composite"
      },
      "188": {
        "TypeFields": [
          {
            "TypeId": 158
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 14
          }
        ],
        "TypeDef": "Composite"
      },
      "189": {
        "TypeFields": [
          {
            "Name": "dmq_mqc_head",
            "TypeName": "relay_chain::Hash",
            "TypeId": 13
          },
          {
            "Name": "relay_dispatch_queue_remaining_capacity",
            "TypeName": "RelayDispatchQueueRemainingCapacity",
            "TypeId": 190
          },
          {
            "Name": "ingress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 191
          },
          {
            "Name": "egress_channels",
            "TypeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
            "TypeId": 191
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "relay_state_snapshot",
          "MessagingStateSnapshot"
        ],
        "TypeDef": "Composite"
      },
      "190": {
        "TypeFields": [
          {
            "Name": "remaining_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "remaining_size",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "relay_state_snapshot",
          "RelayDispatchQueueRemainingCapacity"
        ],
        "TypeDef": "Composite"
      },
      "191": {
        "TypeId": 192,
        "TypeDef": "Sequence"
      },
      "192": {
        "TypeIds": [
          133,
          193
        ],
        "TypeDef": "Tuple"
      },
      "193": {
        "TypeFields": [
          {
            "Name": "max_capacity",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "msg_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "total_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "mqc_head",
            "TypeName": "Option<Hash>",
            "TypeId": 178
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v7",
          "AbridgedHrmpChannel"
        ],
        "TypeDef": "Composite"
      },
      "194": {
        "TypeFields": [
          {
            "Name": "max_code_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_head_data_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_queue_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "max_upward_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "hrmp_max_message_num_per_candidate",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_cooldown",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "validation_upgrade_delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "async_backing_params",
            "TypeName": "AsyncBackingParams",
            "TypeId": 195
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v7",
          "AbridgedHostConfiguration"
        ],
        "TypeDef": "Composite"
      },
      "195": {
        "TypeFields": [
          {
            "Name": "max_candidate_depth",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "allowed_ancestry_len",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "polkadot_primitives",
          "v7",
          "async_backing",
          "AsyncBackingParams"
        ],
        "TypeDef": "Composite"
      },
      "196": {
        "TypeFields": [
          {
            "TypeName": "RelayHash",
            "TypeId": 13
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "MessageQueueChain"
        ],
        "TypeDef": "Composite"
      },
      "197": {
        "TypeFields": [
          {
            "TypeId": 198
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 133
          },
          {
            "Name": "V",
            "TypeId": 196
          }
        ],
        "TypeDef": "Composite"
      },
      "198": {
        "TypeId": 199,
        "TypeDef": "Sequence"
      },
      "199": {
        "TypeIds": [
          133,
          196
        ],
        "TypeDef": "Tuple"
      },
      "200": {
        "TypeId": 201,
        "TypeDef": "Sequence"
      },
      "201": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "Id",
            "TypeId": 133
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "OutboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 133
          }
        ],
        "TypeDef": "Composite"
      },
      "202": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedU128"
        ],
        "TypeDef": "Composite"
      },
      "203": {
        "Variants": [
          {
            "Name": "set_validation_data",
            "TypeFields": [
              {
                "Name": "data",
                "TypeName": "ParachainInherentData",
                "TypeId": 204
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current validation data.",
              "",
              "This should be invoked exactly once per block. It will panic at the finalization",
              "phase if the call was not invoked.",
              "",
              "The dispatch origin for this call must be `Inherent`",
              "",
              "As a side effect, this function upgrades the current validation function",
              "if the appropriate time has come."
            ]
          },
          {
            "Name": "sudo_send_upward_message",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "UpwardMessage",
                "TypeId": 14
              }
            ],
            "Index": 1
          },
          {
            "Name": "authorize_upgrade",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "check_version",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 2,
            "Docs": [
              "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
              "later.",
              "",
              "The `check_version` parameter sets a boolean flag for whether or not the runtime's spec",
              "version and name should be verified on upgrade. Since the authorization only has a hash,",
              "it cannot actually perform the verification.",
              "",
              "This call requires Root origin."
            ]
          },
          {
            "Name": "enact_authorized_upgrade",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 3,
            "Docs": [
              "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
              "",
              "If the authorization required a version check, this call will ensure the spec name",
              "remains unchanged and that the spec version has increased.",
              "",
              "Note that this function will not apply the new `code`, but only attempt to schedule the",
              "upgrade with the Relay Chain.",
              "",
              "All origins are allowed."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "204": {
        "TypeFields": [
          {
            "Name": "validation_data",
            "TypeName": "PersistedValidationData",
            "TypeId": 183
          },
          {
            "Name": "relay_chain_state",
            "TypeName": "sp_trie::StorageProof",
            "TypeId": 187
          },
          {
            "Name": "downward_messages",
            "TypeName": "Vec<InboundDownwardMessage>",
            "TypeId": 205
          },
          {
            "Name": "horizontal_messages",
            "TypeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
            "TypeId": 207
          }
        ],
        "Path": [
          "cumulus_primitives_parachain_inherent",
          "ParachainInherentData"
        ],
        "TypeDef": "Composite"
      },
      "205": {
        "TypeId": 206,
        "TypeDef": "Sequence"
      },
      "206": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "msg",
            "TypeName": "DownwardMessage",
            "TypeId": 14
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundDownwardMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "207": {
        "TypeFields": [
          {
            "TypeId": 210
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 133
          },
          {
            "Name": "V",
            "TypeId": 208
          }
        ],
        "TypeDef": "Composite"
      },
      "208": {
        "TypeId": 209,
        "TypeDef": "Sequence"
      },
      "209": {
        "TypeFields": [
          {
            "Name": "sent_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "sp_std::vec::Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "polkadot_core_primitives",
          "InboundHrmpMessage"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "210": {
        "TypeId": 211,
        "TypeDef": "Sequence"
      },
      "211": {
        "TypeIds": [
          133,
          208
        ],
        "TypeDef": "Tuple"
      },
      "212": {
        "Variants": [
          {
            "Name": "OverlappingUpgrades",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Attempt to upgrade validation function while existing upgrade pending."
            ]
          },
          {
            "Name": "ProhibitedByPolkadot",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Polkadot currently prohibits this parachain from upgrading its validation function."
            ]
          },
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The supplied validation function has compiled into a blob larger than Polkadot is",
              "willing to run."
            ]
          },
          {
            "Name": "ValidationDataNotAvailable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The inherent which supplies the validation data did not run this block."
            ]
          },
          {
            "Name": "HostConfigurationNotAvailable",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The inherent which supplies the host configuration did not run this block."
            ]
          },
          {
            "Name": "NotScheduled",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No validation function upgrade is currently scheduled."
            ]
          },
          {
            "Name": "NothingAuthorized",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "No code upgrade has been authorized."
            ]
          },
          {
            "Name": "Unauthorized",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The given code upgrade has not been authorized."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_parachain_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "213": {
        "Variants": [
          {
            "Name": "set",
            "TypeFields": [
              {
                "Name": "now",
                "TypeName": "T::Moment",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current time.",
              "",
              "This call should be invoked exactly once per block. It will panic at the finalization",
              "phase, if this call hasn't been invoked by that time.",
              "",
              "The timestamp should be greater than the previous one by the amount specified by",
              "[`Config::MinimumPeriod`].",
              "",
              "The dispatch origin for this call must be _None_.",
              "",
              "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
              "that changing the complexity of this call could result exhausting the resources in a",
              "block to execute any other calls.",
              "",
              "## Complexity",
              "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
              "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
              "  `on_finalize`)",
              "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
            ]
          }
        ],
        "Path": [
          "pallet_timestamp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "214": {
        "Variants": null,
        "Path": [
          "staging_parachain_info",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "215": {
        "TypeIds": [
          0,
          1
        ],
        "TypeDef": "Tuple"
      },
      "216": {
        "TypeFields": [
          {
            "Name": "when",
            "TypeName": "Timepoint<BlockNumber>",
            "TypeId": 34
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "depositor",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approvals",
            "TypeName": "BoundedVec<AccountId, MaxApprovals>",
            "TypeId": 217
          }
        ],
        "Path": [
          "pallet_multisig",
          "Multisig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "MaxApprovals"
          }
        ],
        "TypeDef": "Composite"
      },
      "217": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 53
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "218": {
        "Variants": [
          {
            "Name": "as_multi_threshold_1",
            "TypeFields": [
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 53
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 219
              }
            ],
            "Index": 0,
            "Docs": [
              "Immediately dispatch a multi-signature call using a single approval from the caller.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `other_signatories`: The accounts (other than the sender) who are part of the",
              "multi-signature, but do not participate in the approval process.",
              "- `call`: The call to be executed.",
              "",
              "Result is equivalent to the dispatched result.",
              "",
              "## Complexity",
              "O(Z + C) where Z is the length of the call and C its execution weight."
            ]
          },
          {
            "Name": "as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 42
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 53
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<BlockNumberFor<T>>>",
                "TypeId": 348
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 219
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 1,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "If there are enough, then dispatch the call.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call`: The call to be executed.",
              "",
              "NOTE: Unless this is the final approval, you will generally want to use",
              "`approve_as_multi` instead, since it only requires a hash of the call.",
              "",
              "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
              "on success, result is `Ok` and the result from the interior call, if it was executed,",
              "may be found in the deposited `MultisigExecuted` event.",
              "",
              "## Complexity",
              "- `O(S + Z + Call)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- The weight of the `call`.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "approve_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 42
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 53
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<BlockNumberFor<T>>>",
                "TypeId": 348
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 2,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "cancel_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 42
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 53
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 34
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
              "for this operation will be unreserved on success.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
              "transaction for this dispatch.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- One event.",
              "- I/O: 1 read `O(S)`, one remove.",
              "- Storage: removes one item."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "219": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                "TypeId": 155
              }
            ],
            "Index": 0
          },
          {
            "Name": "ParachainSystem",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                "TypeId": 203
              }
            ],
            "Index": 1
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                "TypeId": 213
              }
            ],
            "Index": 2
          },
          {
            "Name": "ParachainInfo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainInfo, Runtime>",
                "TypeId": 214
              }
            ],
            "Index": 3
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                "TypeId": 218
              }
            ],
            "Index": 4
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                "TypeId": 220
              }
            ],
            "Index": 5
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                "TypeId": 229
              }
            ],
            "Index": 6
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                "TypeId": 273
              }
            ],
            "Index": 7
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                "TypeId": 275
              }
            ],
            "Index": 8
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                "TypeId": 277
              }
            ],
            "Index": 9
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                "TypeId": 278
              }
            ],
            "Index": 15
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                "TypeId": 280
              }
            ],
            "Index": 17
          },
          {
            "Name": "CollatorSelection",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CollatorSelection, Runtime>",
                "TypeId": 282
              }
            ],
            "Index": 21
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                "TypeId": 283
              }
            ],
            "Index": 22
          },
          {
            "Name": "XcmpQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>",
                "TypeId": 286
              }
            ],
            "Index": 30
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                "TypeId": 287
              }
            ],
            "Index": 31
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CumulusXcm, Runtime>",
                "TypeId": 327
              }
            ],
            "Index": 32
          },
          {
            "Name": "MessageQueue",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>",
                "TypeId": 328
              }
            ],
            "Index": 34
          },
          {
            "Name": "XTokens",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XTokens, Runtime>",
                "TypeId": 329
              }
            ],
            "Index": 35
          },
          {
            "Name": "OrmlXcm",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OrmlXcm, Runtime>",
                "TypeId": 334
              }
            ],
            "Index": 36
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                "TypeId": 335
              }
            ],
            "Index": 41
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                "TypeId": 336
              }
            ],
            "Index": 42
          },
          {
            "Name": "CouncilMembership",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CouncilMembership, Runtime>",
                "TypeId": 338
              }
            ],
            "Index": 43
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                "TypeId": 339
              }
            ],
            "Index": 44
          },
          {
            "Name": "TechnicalCommitteeMembership",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommitteeMembership, Runtime>",
                "TypeId": 340
              }
            ],
            "Index": 45
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                "TypeId": 341
              }
            ],
            "Index": 46
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>",
                "TypeId": 346
              }
            ],
            "Index": 90
          },
          {
            "Name": "AssetRegistry",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetRegistry, Runtime>",
                "TypeId": 347
              }
            ],
            "Index": 91
          }
        ],
        "Path": [
          "ajuna_runtime",
          "RuntimeCall"
        ],
        "TypeDef": "Variant"
      },
      "220": {
        "Variants": [
          {
            "Name": "batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 221
              }
            ],
            "Index": 0,
            "Docs": [
              "Send a batch of dispatch calls.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched.",
              "",
              "This will return `Ok` in all circumstances. To determine the success of the batch, an",
              "event is deposited. If a call failed and the batch was interrupted, then the",
              "`BatchInterrupted` event is deposited, along with the number of successful calls made",
              "and the error of the failed call. If all were successful, then the `BatchCompleted`",
              "event is deposited."
            ]
          },
          {
            "Name": "as_derivative",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 42
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 219
              }
            ],
            "Index": 1,
            "Docs": [
              "Send a call through an indexed pseudonym of the sender.",
              "",
              "Filter from origin are passed along. The call will be dispatched with an origin which",
              "use the same filter as the origin of this call.",
              "",
              "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
              "because you expect `proxy` to have been used prior in the call stack and you do not want",
              "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
              "in the Multisig pallet instead.",
              "",
              "NOTE: Prior to version *12, this was called `as_limited_sub`.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ]
          },
          {
            "Name": "batch_all",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 221
              }
            ],
            "Index": 2,
            "Docs": [
              "Send a batch of dispatch calls and atomically execute them.",
              "The whole transaction will rollback and fail if any of the calls failed.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "dispatch_as",
            "TypeFields": [
              {
                "Name": "as_origin",
                "TypeName": "Box<T::PalletsOrigin>",
                "TypeId": 222
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 219
              }
            ],
            "Index": 3,
            "Docs": [
              "Dispatches a function call with a provided origin.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "force_batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 221
              }
            ],
            "Index": 4,
            "Docs": [
              "Send a batch of dispatch calls.",
              "Unlike `batch`, it allows errors and won't interrupt.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatch without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "with_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 219
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 5,
            "Docs": [
              "Dispatch a function call with a specified weight.",
              "",
              "This function does not check the weight of the call, and instead allows the",
              "Root origin to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Root_."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "221": {
        "TypeId": 219,
        "TypeDef": "Sequence"
      },
      "222": {
        "Variants": [
          {
            "Name": "system",
            "TypeFields": [
              {
                "TypeName": "frame_system::Origin<Runtime>",
                "TypeId": 223
              }
            ],
            "Index": 0
          },
          {
            "Name": "PolkadotXcm",
            "TypeFields": [
              {
                "TypeName": "pallet_xcm::Origin",
                "TypeId": 224
              }
            ],
            "Index": 31
          },
          {
            "Name": "CumulusXcm",
            "TypeFields": [
              {
                "TypeName": "cumulus_pallet_xcm::Origin",
                "TypeId": 225
              }
            ],
            "Index": 32
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                "TypeId": 226
              }
            ],
            "Index": 42
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                "TypeId": 227
              }
            ],
            "Index": 44
          },
          {
            "Name": "Void",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void",
                "TypeId": 228
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "ajuna_runtime",
          "OriginCaller"
        ],
        "TypeDef": "Variant"
      },
      "223": {
        "Variants": [
          {
            "Name": "Root",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "224": {
        "Variants": [
          {
            "Name": "Xcm",
            "TypeFields": [
              {
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 0
          },
          {
            "Name": "Response",
            "TypeFields": [
              {
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "225": {
        "Variants": [
          {
            "Name": "Relay",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SiblingParachain",
            "TypeFields": [
              {
                "TypeName": "ParaId",
                "TypeId": 133
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "226": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "227": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "228": {
        "Variants": null,
        "Path": [
          "sp_core",
          "Void"
        ],
        "TypeDef": "Variant"
      },
      "229": {
        "Variants": [
          {
            "Name": "add_registrar",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a registrar to the system.",
              "",
              "The dispatch origin for this call must be `T::RegistrarOrigin`.",
              "",
              "- `account`: the account of the registrar.",
              "",
              "Emits `RegistrarAdded` if successful."
            ]
          },
          {
            "Name": "set_identity",
            "TypeFields": [
              {
                "Name": "info",
                "TypeName": "Box<T::IdentityInformation>",
                "TypeId": 232
              }
            ],
            "Index": 1,
            "Docs": [
              "Set an account's identity information and reserve the appropriate deposit.",
              "",
              "If the account already has identity information, the deposit is taken as part payment",
              "for the new deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `info`: The identity information.",
              "",
              "Emits `IdentitySet` if successful."
            ]
          },
          {
            "Name": "set_subs",
            "TypeFields": [
              {
                "Name": "subs",
                "TypeName": "Vec<(T::AccountId, Data)>",
                "TypeId": 266
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the sub-accounts of the sender.",
              "",
              "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
              "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "identity.",
              "",
              "- `subs`: The identity's (new) sub-accounts."
            ]
          },
          {
            "Name": "clear_identity",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Clear an account's identity info and all sub-accounts and return all deposits.",
              "",
              "Payment: All reserved balances on the account are returned.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "identity.",
              "",
              "Emits `IdentityCleared` if successful."
            ]
          },
          {
            "Name": "request_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 63
              },
              {
                "Name": "max_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 51
              }
            ],
            "Index": 4,
            "Docs": [
              "Request a judgement from a registrar.",
              "",
              "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
              "given.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a",
              "registered identity.",
              "",
              "- `reg_index`: The index of the registrar whose judgement is requested.",
              "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
              "",
              "```nocompile",
              "Self::registrars().get(reg_index).unwrap().fee",
              "```",
              "",
              "Emits `JudgementRequested` if successful."
            ]
          },
          {
            "Name": "cancel_request",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Cancel a previous request.",
              "",
              "Payment: A previously reserved deposit is returned on success.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a",
              "registered identity.",
              "",
              "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
              "",
              "Emits `JudgementUnrequested` if successful."
            ]
          },
          {
            "Name": "set_fee",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 63
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 51
              }
            ],
            "Index": 6,
            "Docs": [
              "Set the fee required for a judgement to be requested from a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `fee`: the new fee."
            ]
          },
          {
            "Name": "set_account_id",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 63
              },
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 7,
            "Docs": [
              "Change the account associated with a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `new`: the new account ID."
            ]
          },
          {
            "Name": "set_fields",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 63
              },
              {
                "Name": "fields",
                "TypeName": "<T::IdentityInformation as IdentityInformationProvider>::\nFieldsIdentifier",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the field information for a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `fields`: the fields that the registrar concerns themselves with."
            ]
          },
          {
            "Name": "provide_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 63
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "judgement",
                "TypeName": "Judgement<BalanceOf<T>>",
                "TypeId": 268
              },
              {
                "Name": "identity",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 9,
            "Docs": [
              "Provide a judgement for an account's identity.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `reg_index`.",
              "",
              "- `reg_index`: the index of the registrar whose judgement is being made.",
              "- `target`: the account whose identity the judgement is upon. This must be an account",
              "  with a registered identity.",
              "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
              "- `identity`: The hash of the [`IdentityInformationProvider`] for that the judgement is",
              "  provided.",
              "",
              "Note: Judgements do not apply to a username.",
              "",
              "Emits `JudgementGiven` if successful."
            ]
          },
          {
            "Name": "kill_identity",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 10,
            "Docs": [
              "Remove an account's identity and sub-account information and slash the deposits.",
              "",
              "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
              "`Slash`. Verification request deposits are not returned; they should be cancelled",
              "manually using `cancel_request`.",
              "",
              "The dispatch origin for this call must match `T::ForceOrigin`.",
              "",
              "- `target`: the account whose identity the judgement is upon. This must be an account",
              "  with a registered identity.",
              "",
              "Emits `IdentityKilled` if successful."
            ]
          },
          {
            "Name": "add_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 235
              }
            ],
            "Index": 11,
            "Docs": [
              "Add the given account to the sender's subs.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "rename_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 235
              }
            ],
            "Index": 12,
            "Docs": [
              "Alter the associated name of the given sub-account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "remove_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 13,
            "Docs": [
              "Remove the given account from the sender's subs.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "quit_sub",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Remove the sender as a sub-account.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender (*not* the original depositor).",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "super-identity.",
              "",
              "NOTE: This should not normally be used, but is provided in the case that the non-",
              "controller of an account is maliciously registered as a sub-account."
            ]
          },
          {
            "Name": "add_username_authority",
            "TypeFields": [
              {
                "Name": "authority",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "suffix",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "allocation",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "Add an `AccountId` with permission to grant usernames with a given `suffix` appended.",
              "",
              "The authority can grant up to `allocation` usernames. To top up their allocation, they",
              "should just issue (or request via governance) a new `add_username_authority` call."
            ]
          },
          {
            "Name": "remove_username_authority",
            "TypeFields": [
              {
                "Name": "authority",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 16,
            "Docs": [
              "Remove `authority` from the username authorities."
            ]
          },
          {
            "Name": "set_username_for",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "username",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "signature",
                "TypeName": "Option<T::OffchainSignature>",
                "TypeId": 269
              }
            ],
            "Index": 17,
            "Docs": [
              "Set the username for `who`. Must be called by a username authority.",
              "",
              "The authority must have an `allocation`. Users can either pre-sign their usernames or",
              "accept them later.",
              "",
              "Usernames must:",
              "  - Only contain lowercase ASCII characters or digits.",
              "  - When combined with the suffix of the issuing authority be _less than_ the",
              "    `MaxUsernameLength`."
            ]
          },
          {
            "Name": "accept_username",
            "TypeFields": [
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 39
              }
            ],
            "Index": 18,
            "Docs": [
              "Accept a given username that an `authority` granted. The call must include the full",
              "username, as in `username.suffix`."
            ]
          },
          {
            "Name": "remove_expired_approval",
            "TypeFields": [
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 39
              }
            ],
            "Index": 19,
            "Docs": [
              "Remove an expired username approval. The username was approved by an authority but never",
              "accepted by the user and must now be beyond its expiration. The call must include the",
              "full username, as in `username.suffix`."
            ]
          },
          {
            "Name": "set_primary_username",
            "TypeFields": [
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 39
              }
            ],
            "Index": 20,
            "Docs": [
              "Set a given username as the primary. The username should include the suffix."
            ]
          },
          {
            "Name": "remove_dangling_username",
            "TypeFields": [
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 39
              }
            ],
            "Index": 21,
            "Docs": [
              "Remove a username that corresponds to an account with no identity. Exists when a user",
              "gets a username but then calls `clear_identity`."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Identity pallet declaration."
        ]
      },
      "230": {
        "Variants": [
          {
            "Name": "Id",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "AccountIndex",
                "TypeId": 231
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 2
          },
          {
            "Name": "Address32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "Address20",
            "TypeFields": [
              {
                "TypeName": "[u8; 20]",
                "TypeId": 66
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "sp_runtime",
          "multiaddress",
          "MultiAddress"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "AccountIndex",
            "TypeId": 36
          }
        ],
        "TypeDef": "Variant"
      },
      "231": {
        "TypeId": 36,
        "TypeDef": "Compact"
      },
      "232": {
        "TypeFields": [
          {
            "Name": "additional",
            "TypeName": "BoundedVec<(Data, Data), FieldLimit>",
            "TypeId": 233
          },
          {
            "Name": "display",
            "TypeName": "Data",
            "TypeId": 235
          },
          {
            "Name": "legal",
            "TypeName": "Data",
            "TypeId": 235
          },
          {
            "Name": "web",
            "TypeName": "Data",
            "TypeId": 235
          },
          {
            "Name": "riot",
            "TypeName": "Data",
            "TypeId": 235
          },
          {
            "Name": "email",
            "TypeName": "Data",
            "TypeId": 235
          },
          {
            "Name": "pgp_fingerprint",
            "TypeName": "Option<[u8; 20]>",
            "TypeId": 265
          },
          {
            "Name": "image",
            "TypeName": "Data",
            "TypeId": 235
          },
          {
            "Name": "twitter",
            "TypeName": "Data",
            "TypeId": 235
          }
        ],
        "Path": [
          "pallet_identity",
          "legacy",
          "IdentityInfo"
        ],
        "TypeParams": [
          {
            "Name": "FieldLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "233": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 264
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 234
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "234": {
        "TypeIds": [
          235,
          235
        ],
        "TypeDef": "Tuple"
      },
      "235": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Raw0",
            "TypeFields": [
              {
                "TypeId": 236
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw1",
            "TypeFields": [
              {
                "TypeId": 237
              }
            ],
            "Index": 2
          },
          {
            "Name": "Raw2",
            "TypeFields": [
              {
                "TypeId": 238
              }
            ],
            "Index": 3
          },
          {
            "Name": "Raw3",
            "TypeFields": [
              {
                "TypeId": 239
              }
            ],
            "Index": 4
          },
          {
            "Name": "Raw4",
            "TypeFields": [
              {
                "TypeId": 18
              }
            ],
            "Index": 5
          },
          {
            "Name": "Raw5",
            "TypeFields": [
              {
                "TypeId": 240
              }
            ],
            "Index": 6
          },
          {
            "Name": "Raw6",
            "TypeFields": [
              {
                "TypeId": 241
              }
            ],
            "Index": 7
          },
          {
            "Name": "Raw7",
            "TypeFields": [
              {
                "TypeId": 242
              }
            ],
            "Index": 8
          },
          {
            "Name": "Raw8",
            "TypeFields": [
              {
                "TypeId": 85
              }
            ],
            "Index": 9
          },
          {
            "Name": "Raw9",
            "TypeFields": [
              {
                "TypeId": 243
              }
            ],
            "Index": 10
          },
          {
            "Name": "Raw10",
            "TypeFields": [
              {
                "TypeId": 244
              }
            ],
            "Index": 11
          },
          {
            "Name": "Raw11",
            "TypeFields": [
              {
                "TypeId": 245
              }
            ],
            "Index": 12
          },
          {
            "Name": "Raw12",
            "TypeFields": [
              {
                "TypeId": 246
              }
            ],
            "Index": 13
          },
          {
            "Name": "Raw13",
            "TypeFields": [
              {
                "TypeId": 247
              }
            ],
            "Index": 14
          },
          {
            "Name": "Raw14",
            "TypeFields": [
              {
                "TypeId": 248
              }
            ],
            "Index": 15
          },
          {
            "Name": "Raw15",
            "TypeFields": [
              {
                "TypeId": 249
              }
            ],
            "Index": 16
          },
          {
            "Name": "Raw16",
            "TypeFields": [
              {
                "TypeId": 86
              }
            ],
            "Index": 17
          },
          {
            "Name": "Raw17",
            "TypeFields": [
              {
                "TypeId": 250
              }
            ],
            "Index": 18
          },
          {
            "Name": "Raw18",
            "TypeFields": [
              {
                "TypeId": 251
              }
            ],
            "Index": 19
          },
          {
            "Name": "Raw19",
            "TypeFields": [
              {
                "TypeId": 252
              }
            ],
            "Index": 20
          },
          {
            "Name": "Raw20",
            "TypeFields": [
              {
                "TypeId": 66
              }
            ],
            "Index": 21
          },
          {
            "Name": "Raw21",
            "TypeFields": [
              {
                "TypeId": 253
              }
            ],
            "Index": 22
          },
          {
            "Name": "Raw22",
            "TypeFields": [
              {
                "TypeId": 254
              }
            ],
            "Index": 23
          },
          {
            "Name": "Raw23",
            "TypeFields": [
              {
                "TypeId": 255
              }
            ],
            "Index": 24
          },
          {
            "Name": "Raw24",
            "TypeFields": [
              {
                "TypeId": 256
              }
            ],
            "Index": 25
          },
          {
            "Name": "Raw25",
            "TypeFields": [
              {
                "TypeId": 257
              }
            ],
            "Index": 26
          },
          {
            "Name": "Raw26",
            "TypeFields": [
              {
                "TypeId": 258
              }
            ],
            "Index": 27
          },
          {
            "Name": "Raw27",
            "TypeFields": [
              {
                "TypeId": 259
              }
            ],
            "Index": 28
          },
          {
            "Name": "Raw28",
            "TypeFields": [
              {
                "TypeId": 260
              }
            ],
            "Index": 29
          },
          {
            "Name": "Raw29",
            "TypeFields": [
              {
                "TypeId": 261
              }
            ],
            "Index": 30
          },
          {
            "Name": "Raw30",
            "TypeFields": [
              {
                "TypeId": 262
              }
            ],
            "Index": 31
          },
          {
            "Name": "Raw31",
            "TypeFields": [
              {
                "TypeId": 263
              }
            ],
            "Index": 32
          },
          {
            "Name": "Raw32",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 33
          },
          {
            "Name": "BlakeTwo256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 34
          },
          {
            "Name": "Sha256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 35
          },
          {
            "Name": "Keccak256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 36
          },
          {
            "Name": "ShaThree256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 37
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Data"
        ],
        "TypeDef": "Variant"
      },
      "236": {
        "Length": 0,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "237": {
        "Length": 1,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "238": {
        "Length": 2,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "239": {
        "Length": 3,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "240": {
        "Length": 5,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "241": {
        "Length": 6,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "242": {
        "Length": 7,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "243": {
        "Length": 9,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "244": {
        "Length": 10,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "245": {
        "Length": 11,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "246": {
        "Length": 12,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "247": {
        "Length": 13,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "248": {
        "Length": 14,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "249": {
        "Length": 15,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "250": {
        "Length": 17,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "251": {
        "Length": 18,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "252": {
        "Length": 19,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "253": {
        "Length": 21,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "254": {
        "Length": 22,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "255": {
        "Length": 23,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "256": {
        "Length": 24,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "257": {
        "Length": 25,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "258": {
        "Length": 26,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "259": {
        "Length": 27,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "260": {
        "Length": 28,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "261": {
        "Length": 29,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "262": {
        "Length": 30,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "263": {
        "Length": 31,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "264": {
        "TypeId": 234,
        "TypeDef": "Sequence"
      },
      "265": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 66
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 66
          }
        ],
        "TypeDef": "Variant"
      },
      "266": {
        "TypeId": 267,
        "TypeDef": "Sequence"
      },
      "267": {
        "TypeIds": [
          0,
          235
        ],
        "TypeDef": "Tuple"
      },
      "268": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "FeePaid",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reasonable",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "KnownGood",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "OutOfDate",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LowQuality",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Erroneous",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Judgement"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "269": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 270
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 270
          }
        ],
        "TypeDef": "Variant"
      },
      "270": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Signature",
                "TypeId": 271
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Signature",
                "TypeId": 271
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Signature",
                "TypeId": 272
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "MultiSignature"
        ],
        "TypeDef": "Variant"
      },
      "271": {
        "Length": 64,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "272": {
        "Length": 65,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "273": {
        "Variants": [
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 274
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 219
              }
            ],
            "Index": 0,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorised for through",
              "`add_proxy`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          },
          {
            "Name": "add_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 41
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Register a proxy account for the sender that is able to make calls on its behalf.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to make a proxy.",
              "- `proxy_type`: The permissions allowed for this proxy account.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero."
            ]
          },
          {
            "Name": "remove_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 41
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Unregister a proxy account for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to remove as a proxy.",
              "- `proxy_type`: The permissions currently enabled for the removed proxy account."
            ]
          },
          {
            "Name": "remove_proxies",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Unregister all proxy accounts for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "WARNING: This may be called on accounts created by `pure`, however if done, then",
              "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
            ]
          },
          {
            "Name": "create_pure",
            "TypeFields": [
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 41
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 42
              }
            ],
            "Index": 4,
            "Docs": [
              "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
              "initialize it with a proxy of `proxy_type` for `origin` sender.",
              "",
              "Requires a `Signed` origin.",
              "",
              "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
              "new account. This will almost always be the most permissive `ProxyType` possible to",
              "allow for maximum flexibility.",
              "- `index`: A disambiguation index, in case this is called multiple times in the same",
              "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
              "want to use `0`.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero.",
              "",
              "Fails with `Duplicate` if this has already been called in this transaction, from the",
              "same sender, with the same parameters.",
              "",
              "Fails if there are insufficient funds to pay for deposit."
            ]
          },
          {
            "Name": "kill_pure",
            "TypeFields": [
              {
                "Name": "spawner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 41
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 42
              },
              {
                "Name": "height",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 63
              },
              {
                "Name": "ext_index",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 5,
            "Docs": [
              "Removes a previously spawned pure proxy.",
              "",
              "WARNING: **All access to this account will be lost.** Any funds held in it will be",
              "inaccessible.",
              "",
              "Requires a `Signed` origin, and the sender account must have been created by a call to",
              "`pure` with corresponding parameters.",
              "",
              "- `spawner`: The account that originally called `pure` to create this account.",
              "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
              "- `proxy_type`: The proxy type originally passed to `pure`.",
              "- `height`: The height of the chain when the call to `pure` was processed.",
              "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
              "",
              "Fails with `NoPermission` in case the caller is not a previously created pure",
              "account whose `pure` call has corresponding parameters."
            ]
          },
          {
            "Name": "announce",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 6,
            "Docs": [
              "Publish the hash of a proxy-call that will be made in the future.",
              "",
              "This must be called some number of blocks before the corresponding `proxy` is attempted",
              "if the delay associated with the proxy relationship is greater than zero.",
              "",
              "No more than `MaxPending` announcements may be made at any one time.",
              "",
              "This will take a deposit of `AnnouncementDepositFactor` as well as",
              "`AnnouncementDepositBase` if there are no other pending announcements.",
              "",
              "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "remove_announcement",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 7,
            "Docs": [
              "Remove a given announcement.",
              "",
              "May be called by a proxy account to remove a call they previously announced and return",
              "the deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "reject_announcement",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 8,
            "Docs": [
              "Remove the given announcement of a delegate.",
              "",
              "May be called by a target (proxied) account to remove a call that one of their delegates",
              "(`delegate`) has announced they want to execute. The deposit is returned.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `delegate`: The account that previously announced the call.",
              "- `call_hash`: The hash of the call to be made."
            ]
          },
          {
            "Name": "proxy_announced",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 274
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 219
              }
            ],
            "Index": 9,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorized for through",
              "`add_proxy`.",
              "",
              "Removes any corresponding announcement(s).",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "274": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 41
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 41
          }
        ],
        "TypeDef": "Variant"
      },
      "275": {
        "Variants": [
          {
            "Name": "schedule",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 276
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 219
              }
            ],
            "Index": 0,
            "Docs": [
              "Anonymously schedule a task."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Cancel an anonymously scheduled task."
            ]
          },
          {
            "Name": "schedule_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 276
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 219
              }
            ],
            "Index": 2,
            "Docs": [
              "Schedule a named task."
            ]
          },
          {
            "Name": "cancel_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a named scheduled task."
            ]
          },
          {
            "Name": "schedule_after",
            "TypeFields": [
              {
                "Name": "after",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 276
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 219
              }
            ],
            "Index": 4,
            "Docs": [
              "Anonymously schedule a task after a delay."
            ]
          },
          {
            "Name": "schedule_named_after",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "after",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 276
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 219
              }
            ],
            "Index": 5,
            "Docs": [
              "Schedule a named task after a delay."
            ]
          },
          {
            "Name": "set_retry",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 44
              },
              {
                "Name": "retries",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Set a retry configuration for a task so that, in case its scheduled run fails, it will",
              "be retried after `period` blocks, for a total amount of `retries` retries or until it",
              "succeeds.",
              "",
              "Tasks which need to be scheduled for a retry are still subject to weight metering and",
              "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
              "normally while the task is retrying.",
              "",
              "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
              "clones of the original task. Their retry configuration will be derived from the",
              "original task's configuration, but will have a lower value for `remaining` than the",
              "original `total_retries`."
            ]
          },
          {
            "Name": "set_retry_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "retries",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Set a retry configuration for a named task so that, in case its scheduled run fails, it",
              "will be retried after `period` blocks, for a total amount of `retries` retries or until",
              "it succeeds.",
              "",
              "Tasks which need to be scheduled for a retry are still subject to weight metering and",
              "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
              "normally while the task is retrying.",
              "",
              "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
              "clones of the original task. Their retry configuration will be derived from the",
              "original task's configuration, but will have a lower value for `remaining` than the",
              "original `total_retries`."
            ]
          },
          {
            "Name": "cancel_retry",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 44
              }
            ],
            "Index": 8,
            "Docs": [
              "Removes the retry configuration of a task."
            ]
          },
          {
            "Name": "cancel_retry_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              }
            ],
            "Index": 9,
            "Docs": [
              "Cancel the retry configuration of a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "276": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 44
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 44
          }
        ],
        "TypeDef": "Variant"
      },
      "277": {
        "Variants": [
          {
            "Name": "note_preimage",
            "TypeFields": [
              {
                "Name": "bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 0,
            "Docs": [
              "Register a preimage on-chain.",
              "",
              "If the preimage was previously requested, no fees or deposits are taken for providing",
              "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
            ]
          },
          {
            "Name": "unnote_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 1,
            "Docs": [
              "Clear an unrequested preimage from the runtime storage.",
              "",
              "If `len` is provided, then it will be a much cheaper operation.",
              "",
              "- `hash`: The hash of the preimage to be removed from the store.",
              "- `len`: The length of the preimage of `hash`."
            ]
          },
          {
            "Name": "request_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "Request a preimage be uploaded to the chain without paying any fees or deposits.",
              "",
              "If the preimage requests has already been provided on-chain, we unreserve any deposit",
              "a user may have paid, and take the control of the preimage out of their hands."
            ]
          },
          {
            "Name": "unrequest_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "Clear a previously made request for a preimage.",
              "",
              "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
            ]
          },
          {
            "Name": "ensure_updated",
            "TypeFields": [
              {
                "Name": "hashes",
                "TypeName": "Vec<T::Hash>",
                "TypeId": 150
              }
            ],
            "Index": 4,
            "Docs": [
              "Ensure that the a bulk of pre-images is upgraded.",
              "",
              "The caller pays no fee if at least 90% of pre-images were successfully updated."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "278": {
        "Variants": [
          {
            "Name": "transfer_allow_death",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 51
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer some liquid free balance to another account.",
              "",
              "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
              "If the sender's account is below the existential deposit as a result",
              "of the transfer, the account will be reaped.",
              "",
              "The dispatch origin for this call must be `Signed` by the transactor."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 51
              }
            ],
            "Index": 2,
            "Docs": [
              "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
              "may be specified."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 51
              }
            ],
            "Index": 3,
            "Docs": [
              "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
              "kill the origin account.",
              "",
              "99% of the time you want [`transfer_allow_death`] instead.",
              "",
              "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer the entire transferable balance from the caller account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
              "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
              "transferred by this function. To ensure that this function results in a killed account,",
              "you might need to prepare the account by removing any reference counters, storage",
              "deposits, etc...",
              "",
              "The dispatch origin of this call must be Signed.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
              "  of the funds the account has, causing the sender account to be killed (false), or",
              "  transfer everything except at least the existential deposit, which will guarantee to",
              "  keep the sender account alive (true)."
            ]
          },
          {
            "Name": "force_unreserve",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Unreserve some balance from a user by force.",
              "",
              "Can only be called by ROOT."
            ]
          },
          {
            "Name": "upgrade_accounts",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 53
              }
            ],
            "Index": 6,
            "Docs": [
              "Upgrade a specified account.",
              "",
              "- `origin`: Must be `Signed`.",
              "- `who`: The account to be upgraded.",
              "",
              "This will waive the transaction fee if at least all but 10% of the accounts needed to",
              "be upgraded. (We let some not have to be upgraded just in order to allow for the",
              "possibility of churn)."
            ]
          },
          {
            "Name": "force_set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 51
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the regular balance of a given account.",
              "",
              "The dispatch origin for this call is `root`."
            ]
          },
          {
            "Name": "force_adjust_total_issuance",
            "TypeFields": [
              {
                "Name": "direction",
                "TypeName": "AdjustmentDirection",
                "TypeId": 279
              },
              {
                "Name": "delta",
                "TypeName": "T::Balance",
                "TypeId": 51
              }
            ],
            "Index": 9,
            "Docs": [
              "Adjust the total issuance in a saturating way.",
              "",
              "Can only be called by root and always needs a positive `delta`.",
              "",
              "# Example"
            ]
          },
          {
            "Name": "burn",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 51
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 10,
            "Docs": [
              "Burn the specified liquid free balance from the origin account.",
              "",
              "If the origin's account ends up below the existential deposit as a result",
              "of the burn and `keep_alive` is false, the account will be reaped.",
              "",
              "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,",
              "this `burn` operation will reduce total issuance by the amount _burned_."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "279": {
        "Variants": [
          {
            "Name": "Increase",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Decrease",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "AdjustmentDirection"
        ],
        "TypeDef": "Variant"
      },
      "280": {
        "Variants": [
          {
            "Name": "claim",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "vested_transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 230
              },
              {
                "Name": "schedule",
                "TypeName": "VestingScheduleOf<T>",
                "TypeId": 50
              }
            ],
            "Index": 1
          },
          {
            "Name": "update_vesting_schedules",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 230
              },
              {
                "Name": "vesting_schedules",
                "TypeName": "Vec<VestingScheduleOf<T>>",
                "TypeId": 281
              }
            ],
            "Index": 2
          },
          {
            "Name": "claim_for",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 230
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "281": {
        "TypeId": 50,
        "TypeDef": "Sequence"
      },
      "282": {
        "Variants": [
          {
            "Name": "set_invulnerables",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 53
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the list of invulnerable (fixed) collators. These collators must do some",
              "preparation, namely to have registered session keys.",
              "",
              "The call will remove any accounts that have not registered keys from the set. That is,",
              "it is non-atomic; the caller accepts all `AccountId`s passed in `new` _individually_ as",
              "acceptable Invulnerables, and is not proposing a _set_ of new Invulnerables.",
              "",
              "This call does not maintain mutual exclusivity of `Invulnerables` and `Candidates`. It",
              "is recommended to use a batch of `add_invulnerable` and `remove_invulnerable` instead. A",
              "`batch_all` can also be used to enforce atomicity. If any candidates are included in",
              "`new`, they should be removed with `remove_invulnerable_candidate` after execution.",
              "",
              "Must be called by the `UpdateOrigin`."
            ]
          },
          {
            "Name": "set_desired_candidates",
            "TypeFields": [
              {
                "Name": "max",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the ideal number of non-invulnerable collators. If lowering this number, then the",
              "number of running collators could be higher than this figure. Aside from that edge case,",
              "there should be no other way to have more candidates than the desired number.",
              "",
              "The origin for this call must be the `UpdateOrigin`."
            ]
          },
          {
            "Name": "set_candidacy_bond",
            "TypeFields": [
              {
                "Name": "bond",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the candidacy bond amount.",
              "",
              "If the candidacy bond is increased by this call, all current candidates which have a",
              "deposit lower than the new bond will be kicked from the list and get their deposits",
              "back.",
              "",
              "The origin for this call must be the `UpdateOrigin`."
            ]
          },
          {
            "Name": "register_as_candidate",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Register this account as a collator candidate. The account must (a) already have",
              "registered session keys and (b) be able to reserve the `CandidacyBond`.",
              "",
              "This call is not available to `Invulnerable` collators."
            ]
          },
          {
            "Name": "leave_intent",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Deregister `origin` as a collator candidate. Note that the collator can only leave on",
              "session change. The `CandidacyBond` will be unreserved immediately.",
              "",
              "This call will fail if the total number of candidates would drop below",
              "`MinEligibleCollators`."
            ]
          },
          {
            "Name": "add_invulnerable",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "Add a new account `who` to the list of `Invulnerables` collators. `who` must have",
              "registered session keys. If `who` is a candidate, they will be removed.",
              "",
              "The origin for this call must be the `UpdateOrigin`."
            ]
          },
          {
            "Name": "remove_invulnerable",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must",
              "be sorted.",
              "",
              "The origin for this call must be the `UpdateOrigin`."
            ]
          },
          {
            "Name": "update_bond",
            "TypeFields": [
              {
                "Name": "new_deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Update the candidacy bond of collator candidate `origin` to a new amount `new_deposit`.",
              "",
              "Setting a `new_deposit` that is lower than the current deposit while `origin` is",
              "occupying a top-`DesiredCandidates` slot is not allowed.",
              "",
              "This call will fail if `origin` is not a collator candidate, the updated bond is lower",
              "than the minimum candidacy bond, and/or the amount cannot be reserved."
            ]
          },
          {
            "Name": "take_candidate_slot",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "The caller `origin` replaces a candidate `target` in the collator candidate list by",
              "reserving `deposit`. The amount `deposit` reserved by the caller must be greater than",
              "the existing bond of the target it is trying to replace.",
              "",
              "This call will fail if the caller is already a collator candidate or invulnerable, the",
              "caller does not have registered session keys, the target is not a collator candidate,",
              "and/or the `deposit` amount cannot be reserved."
            ]
          }
        ],
        "Path": [
          "pallet_collator_selection",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "283": {
        "Variants": [
          {
            "Name": "set_keys",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "T::Keys",
                "TypeId": 284
              },
              {
                "Name": "proof",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 0,
            "Docs": [
              "Sets the session key(s) of the function caller to `keys`.",
              "Allows an account to set its session key prior to becoming a validator.",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be signed.",
              "",
              "## Complexity",
              "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
              "  fixed."
            ]
          },
          {
            "Name": "purge_keys",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Removes any session key(s) of the function caller.",
              "",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be Signed and the account must be either be",
              "convertible to a validator ID using the chain's typical addressing system (this usually",
              "means being a controller account) or directly convertible into a validator ID (which",
              "usually means being a stash account).",
              "",
              "## Complexity",
              "- `O(1)` in number of key types. Actual cost depends on the number of length of",
              "  `T::Keys::key_ids()` which is fixed."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "284": {
        "TypeFields": [
          {
            "Name": "aura",
            "TypeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 285
          }
        ],
        "Path": [
          "ajuna_runtime",
          "SessionKeys"
        ],
        "TypeDef": "Composite"
      },
      "285": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_consensus_aura",
          "sr25519",
          "app_sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "286": {
        "Variants": [
          {
            "Name": "suspend_xcm_execution",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "resume_xcm_execution",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Resumes all XCM executions for the XCMP queue.",
              "",
              "Note that this function doesn't change the status of the in/out bound channels.",
              "",
              "- `origin`: Must pass `ControllerOrigin`."
            ]
          },
          {
            "Name": "update_suspend_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Overwrites the number of pages which must be in the queue for the other side to be",
              "told to suspend their sending.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.suspend_value`"
            ]
          },
          {
            "Name": "update_drop_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Overwrites the number of pages which must be in the queue after which we drop any",
              "further messages from the channel.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.drop_threshold`"
            ]
          },
          {
            "Name": "update_resume_threshold",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Overwrites the number of pages which the queue must be reduced to before it signals",
              "that message sending may recommence after it has been suspended.",
              "",
              "- `origin`: Must pass `Root`.",
              "- `new`: Desired value for `QueueConfigData.resume_threshold`"
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "287": {
        "Variants": [
          {
            "Name": "send",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 288
              }
            ],
            "Index": 0
          },
          {
            "Name": "teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 104
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "**This function is deprecated: Use `limited_teleport_assets` instead.**",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` chain.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 104
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer some assets from the local chain to the destination chain through their local,",
              "destination or remote reserve.",
              "",
              "`assets` must have same reserve location and may not be teleportable to `dest`.",
              " - `assets` have local reserve: transfer assets to sovereign account of destination",
              "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
              "   assets to `beneficiary`.",
              " - `assets` have destination reserve: burn local assets and forward a notification to",
              "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
              "   deposit them to `beneficiary`.",
              " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
              "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
              "   to mint and deposit reserve-based assets to `beneficiary`.",
              "",
              "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
              "with all fees taken as needed from the asset.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` (and possibly reserve) chains.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees."
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<<T as Config>::RuntimeCall>>",
                "TypeId": 314
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 3,
            "Docs": [
              "Execute an XCM message from a local, signed, origin.",
              "",
              "An event is deposited indicating whether `msg` could be executed completely or only",
              "partially.",
              "",
              "No more than `max_weight` will be used in its attempted execution. If this is less than",
              "the maximum amount of weight that the message could take to be executed, then no",
              "execution attempt will be made."
            ]
          },
          {
            "Name": "force_xcm_version",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<Location>",
                "TypeId": 59
              },
              {
                "Name": "version",
                "TypeName": "XcmVersion",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "Extoll that a particular destination can be communicated with through a particular",
              "version of XCM.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `location`: The destination that is being described.",
              "- `xcm_version`: The latest version of XCM that `location` supports."
            ]
          },
          {
            "Name": "force_default_xcm_version",
            "TypeFields": [
              {
                "Name": "maybe_xcm_version",
                "TypeName": "Option<XcmVersion>",
                "TypeId": 182
              }
            ],
            "Index": 5,
            "Docs": [
              "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
              "version a destination can accept is unknown).",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
            ]
          },
          {
            "Name": "force_subscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              }
            ],
            "Index": 6,
            "Docs": [
              "Ask a location to notify us regarding their XCM version and any changes to it.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `location`: The location to which we should subscribe for XCM version notifications."
            ]
          },
          {
            "Name": "force_unsubscribe_version_notify",
            "TypeFields": [
              {
                "Name": "location",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              }
            ],
            "Index": 7,
            "Docs": [
              "Require that a particular destination should no longer notify us regarding any XCM",
              "version changes.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `location`: The location to which we are currently subscribed for XCM version",
              "  notifications which we no longer desire."
            ]
          },
          {
            "Name": "limited_reserve_transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 104
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              }
            ],
            "Index": 8,
            "Docs": [
              "Transfer some assets from the local chain to the destination chain through their local,",
              "destination or remote reserve.",
              "",
              "`assets` must have same reserve location and may not be teleportable to `dest`.",
              " - `assets` have local reserve: transfer assets to sovereign account of destination",
              "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
              "   assets to `beneficiary`.",
              " - `assets` have destination reserve: burn local assets and forward a notification to",
              "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
              "   deposit them to `beneficiary`.",
              " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
              "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
              "   to mint and deposit reserve-based assets to `beneficiary`.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` (and possibly reserve) chains.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "limited_teleport_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 104
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              }
            ],
            "Index": 9,
            "Docs": [
              "Teleport some assets from the local chain to some destination chain.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
              "at risk.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` chain.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "force_suspension",
            "TypeFields": [
              {
                "Name": "suspended",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 10,
            "Docs": [
              "Set or unset the global suspension state of the XCM executor.",
              "",
              "- `origin`: Must be an origin specified by AdminOrigin.",
              "- `suspended`: `true` to suspend, `false` to resume."
            ]
          },
          {
            "Name": "transfer_assets",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 104
              },
              {
                "Name": "fee_asset_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              }
            ],
            "Index": 11,
            "Docs": [
              "Transfer some assets from the local chain to the destination chain through their local,",
              "destination or remote reserve, or through teleports.",
              "",
              "Fee payment on the destination side is made from the asset in the `assets` vector of",
              "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for",
              "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the",
              "operation will fail and the sent assets may be at risk.",
              "",
              "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable",
              "to `dest`, no limitations imposed on `fees`.",
              " - for local reserve: transfer assets to sovereign account of destination chain and",
              "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to",
              "   `beneficiary`.",
              " - for destination reserve: burn local assets and forward a notification to `dest` chain",
              "   to withdraw the reserve assets from this chain's sovereign account and deposit them",
              "   to `beneficiary`.",
              " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves",
              "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint",
              "   and deposit reserve-based assets to `beneficiary`.",
              " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport",
              "   assets and deposit them to `beneficiary`.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `X2(Parent,",
              "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send",
              "  from relay to parachain.",
              "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
              "  generally be an `AccountId32` value.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` (and possibly reserve) chains.",
              "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
              "  fees.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          },
          {
            "Name": "claim_assets",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 104
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              }
            ],
            "Index": 12,
            "Docs": [
              "Claims assets trapped on this pallet because of leftover assets during XCM execution.",
              "",
              "- `origin`: Anyone can call this extrinsic.",
              "- `assets`: The exact assets that were trapped. Use the version to specify what version",
              "was the latest when they were trapped.",
              "- `beneficiary`: The location/account where the claimed assets will be deposited."
            ]
          },
          {
            "Name": "transfer_assets_using_type_and_then",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 104
              },
              {
                "Name": "assets_transfer_type",
                "TypeName": "Box<TransferType>",
                "TypeId": 325
              },
              {
                "Name": "remote_fees_id",
                "TypeName": "Box<VersionedAssetId>",
                "TypeId": 326
              },
              {
                "Name": "fees_transfer_type",
                "TypeName": "Box<TransferType>",
                "TypeId": 325
              },
              {
                "Name": "custom_xcm_on_dest",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 288
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              }
            ],
            "Index": 13,
            "Docs": [
              "Transfer assets from the local chain to the destination chain using explicit transfer",
              "types for assets and fees.",
              "",
              "`assets` must have same reserve location or may be teleportable to `dest`. Caller must",
              "provide the `assets_transfer_type` to be used for `assets`:",
              " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination",
              "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
              "   assets to `beneficiary`.",
              " - `TransferType::DestinationReserve`: burn local assets and forward a notification to",
              "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
              "   deposit them to `beneficiary`.",
              " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`",
              "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another",
              "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically",
              "   the remote `reserve` is Asset Hub.",
              " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to",
              "   mint/teleport assets and deposit them to `beneficiary`.",
              "",
              "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to",
              "buy execution using transferred `assets` identified by `remote_fees_id`.",
              "Make sure enough of the specified `remote_fees_id` asset is included in the given list",
              "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight",
              "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
              "at risk.",
              "",
              "`remote_fees_id` may use different transfer type than rest of `assets` and can be",
              "specified through `fees_transfer_type`.",
              "",
              "The caller needs to specify what should happen to the transferred assets once they reach",
              "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which",
              "contains the instructions to execute on `dest` as a final step.",
              "  This is usually as simple as:",
              "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,",
              "  but could be something more exotic like sending the `assets` even further.",
              "",
              "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
              "- `dest`: Destination context for the assets. Will typically be `[Parent,",
              "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
              "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from",
              "  parachain across a bridge to another ecosystem destination.",
              "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
              "  fee on the `dest` (and possibly reserve) chains.",
              "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.",
              "- `remote_fees_id`: One of the included `assets` to be be used to pay fees.",
              "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.",
              "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the",
              "  transfer, which also determines what happens to the assets on the destination chain.",
              "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "288": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 289
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 301
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Xcm<RuntimeCall>",
                "TypeId": 76
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "289": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 290
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "290": {
        "TypeId": 291,
        "TypeDef": "Sequence"
      },
      "291": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 105
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 105
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 105
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 292
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 105
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 105
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 289
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 296
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 98
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 110
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 297
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 297
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 289
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 297
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 105
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 297
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 289
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 297
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 289
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 297
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 107
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 300
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 289
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 289
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 105
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "292": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 105
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 293
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "293": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 294
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 294
          }
        ],
        "TypeDef": "Variant"
      },
      "294": {
        "TypeIds": [
          4,
          295
        ],
        "TypeDef": "Tuple"
      },
      "295": {
        "Variants": [
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unimplemented",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "UntrustedReserveLocation",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UntrustedTeleportLocation",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "MultiLocationFull",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "MultiLocationNotInvertible",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "InvalidLocation",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "AssetNotFound",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "FailedToTransactAsset",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "NotWithdrawable",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "LocationCannotHold",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "ExceedsMaxMessageSize",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "DestinationUnsupported",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "Transport",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "Unroutable",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "UnknownClaim",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "FailedToDecode",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "MaxWeightInvalid",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "NotHoldingFees",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "TooExpensive",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 12
              }
            ],
            "Index": 21
          },
          {
            "Name": "UnhandledXcmVersion",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "WeightLimitReached",
            "TypeFields": [
              {
                "TypeName": "Weight",
                "TypeId": 12
              }
            ],
            "Index": 23
          },
          {
            "Name": "Barrier",
            "TypeFields": null,
            "Index": 24
          },
          {
            "Name": "WeightNotComputable",
            "TypeFields": null,
            "Index": 25
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "traits",
          "Error"
        ],
        "TypeDef": "Variant"
      },
      "296": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SovereignAccount",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Superuser",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Xcm",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "OriginKind"
        ],
        "TypeDef": "Variant"
      },
      "297": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 105
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 298
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "298": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 108
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 299
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "299": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "300": {
        "Variants": [
          {
            "Name": "Unlimited",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Limited",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "WeightLimit"
        ],
        "TypeDef": "Variant"
      },
      "301": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 302
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "302": {
        "TypeId": 303,
        "TypeDef": "Sequence"
      },
      "303": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 118
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 118
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 118
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 304
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 309
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 118
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 118
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 122
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 301
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 97
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 98
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 123
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 310
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 311
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 311
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 122
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 301
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 311
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 118
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 311
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 122
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 301
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 311
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 122
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 301
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 310
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 311
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 120
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 301
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 301
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 118
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 118
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 118
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 309
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 88
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 94
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 310
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 310
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 124
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 126
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 123
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 301
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 120
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 120
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 120
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 120
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 309
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "304": {
        "Variants": [
          {
            "Name": "Null",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 118
              }
            ],
            "Index": 1
          },
          {
            "Name": "ExecutionResult",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 88
              }
            ],
            "Index": 2
          },
          {
            "Name": "Version",
            "TypeFields": [
              {
                "TypeName": "super::Version",
                "TypeId": 4
              }
            ],
            "Index": 3
          },
          {
            "Name": "PalletsInfo",
            "TypeFields": [
              {
                "TypeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                "TypeId": 305
              }
            ],
            "Index": 4
          },
          {
            "Name": "DispatchResult",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 94
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Response"
        ],
        "TypeDef": "Variant"
      },
      "305": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 308
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 306
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "306": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 307
          },
          {
            "Name": "module_name",
            "TypeName": "BoundedVec<u8, MaxPalletNameLen>",
            "TypeId": 307
          },
          {
            "Name": "major",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "minor",
            "TypeName": "u32",
            "TypeId": 63
          },
          {
            "Name": "patch",
            "TypeName": "u32",
            "TypeId": 63
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "PalletInfo"
        ],
        "TypeDef": "Composite"
      },
      "307": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "308": {
        "TypeId": 306,
        "TypeDef": "Sequence"
      },
      "309": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 122
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 122
          }
        ],
        "TypeDef": "Variant"
      },
      "310": {
        "TypeFields": [
          {
            "Name": "destination",
            "TypeName": "MultiLocation",
            "TypeId": 122
          },
          {
            "Name": "query_id",
            "TypeName": "QueryId",
            "TypeId": 11
          },
          {
            "Name": "max_weight",
            "TypeName": "Weight",
            "TypeId": 10
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "QueryResponseInfo"
        ],
        "TypeDef": "Composite"
      },
      "311": {
        "Variants": [
          {
            "Name": "Definite",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 118
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wild",
            "TypeFields": [
              {
                "TypeName": "WildMultiAsset",
                "TypeId": 312
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "MultiAssetFilter"
        ],
        "TypeDef": "Variant"
      },
      "312": {
        "Variants": [
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "AllOf",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 121
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 313
              }
            ],
            "Index": 1
          },
          {
            "Name": "AllCounted",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2
          },
          {
            "Name": "AllOfCounted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "AssetId",
                "TypeId": 121
              },
              {
                "Name": "fun",
                "TypeName": "WildFungibility",
                "TypeId": 313
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildMultiAsset"
        ],
        "TypeDef": "Variant"
      },
      "313": {
        "Variants": [
          {
            "Name": "Fungible",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonFungible",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "multiasset",
          "WildFungibility"
        ],
        "TypeDef": "Variant"
      },
      "314": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Xcm<RuntimeCall>",
                "TypeId": 315
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Xcm<RuntimeCall>",
                "TypeId": 319
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Xcm<RuntimeCall>",
                "TypeId": 322
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "VersionedXcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "315": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<RuntimeCall>>",
            "TypeId": 316
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Composite"
      },
      "316": {
        "TypeId": 317,
        "TypeDef": "Sequence"
      },
      "317": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 105
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 105
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 105
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 292
              },
              {
                "Name": "max_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 105
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 105
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 289
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_type",
                "TypeName": "OriginKind",
                "TypeId": 296
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<RuntimeCall>",
                "TypeId": 318
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 110
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 297
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 297
              },
              {
                "Name": "max_assets",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 289
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 297
              },
              {
                "Name": "receive",
                "TypeName": "MultiAssets",
                "TypeId": 105
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 297
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 289
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 297
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 289
              }
            ],
            "Index": 17
          },
          {
            "Name": "QueryHolding",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 109
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 297
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 107
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 300
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 315
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<RuntimeCall>",
                "TypeId": 315
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 105
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 109
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          }
        ],
        "Path": [
          "xcm",
          "v2",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "RuntimeCall"
          }
        ],
        "TypeDef": "Variant"
      },
      "318": {
        "TypeFields": [
          {
            "Name": "encoded",
            "TypeName": "Vec<u8>",
            "TypeId": 14
          }
        ],
        "Path": [
          "xcm",
          "double_encoded",
          "DoubleEncoded"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "319": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 320
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "320": {
        "TypeId": 321,
        "TypeDef": "Sequence"
      },
      "321": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 118
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 118
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 118
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 304
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "querier",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 309
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 118
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 118
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 122
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 301
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 97
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 318
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorMultiLocation",
                "TypeId": 123
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 310
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 311
              },
              {
                "Name": "beneficiary",
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 311
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 122
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 301
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "MultiAssetFilter",
                "TypeId": 311
              },
              {
                "Name": "want",
                "TypeName": "MultiAssets",
                "TypeId": 118
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 311
              },
              {
                "Name": "reserve",
                "TypeName": "MultiLocation",
                "TypeId": 122
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 301
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 311
              },
              {
                "Name": "dest",
                "TypeName": "MultiLocation",
                "TypeId": 122
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 301
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 310
              },
              {
                "Name": "assets",
                "TypeName": "MultiAssetFilter",
                "TypeId": 311
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "MultiAsset",
                "TypeId": 120
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 319
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 319
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "MultiAssets",
                "TypeId": 118
              },
              {
                "Name": "ticket",
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 118
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "MultiAssets",
                "TypeId": 118
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<MultiLocation>",
                "TypeId": 309
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 88
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 94
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 310
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 310
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 124
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 126
              },
              {
                "Name": "destination",
                "TypeName": "InteriorMultiLocation",
                "TypeId": 123
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 301
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 120
              },
              {
                "Name": "unlocker",
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 120
              },
              {
                "Name": "target",
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 120
              },
              {
                "Name": "owner",
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "MultiAsset",
                "TypeId": 120
              },
              {
                "Name": "locker",
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "MultiLocation",
                "TypeId": 122
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<MultiLocation>",
                "TypeId": 309
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "xcm",
          "v3",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "322": {
        "TypeFields": [
          {
            "TypeName": "Vec<Instruction<Call>>",
            "TypeId": 323
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Xcm"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Composite"
      },
      "323": {
        "TypeId": 324,
        "TypeDef": "Sequence"
      },
      "324": {
        "Variants": [
          {
            "Name": "WithdrawAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 79
              }
            ],
            "Index": 0
          },
          {
            "Name": "ReserveAssetDeposited",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 79
              }
            ],
            "Index": 1
          },
          {
            "Name": "ReceiveTeleportedAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 79
              }
            ],
            "Index": 2
          },
          {
            "Name": "QueryResponse",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "response",
                "TypeName": "Response",
                "TypeId": 87
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "querier",
                "TypeName": "Option<Location>",
                "TypeId": 96
              }
            ],
            "Index": 3
          },
          {
            "Name": "TransferAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 79
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransferReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 79
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 76
              }
            ],
            "Index": 5
          },
          {
            "Name": "Transact",
            "TypeFields": [
              {
                "Name": "origin_kind",
                "TypeName": "OriginKind",
                "TypeId": 97
              },
              {
                "Name": "require_weight_at_most",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "call",
                "TypeName": "DoubleEncoded<Call>",
                "TypeId": 318
              }
            ],
            "Index": 6
          },
          {
            "Name": "HrmpNewChannelOpenRequest",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_message_size",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "max_capacity",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 7
          },
          {
            "Name": "HrmpChannelAccepted",
            "TypeFields": [
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 8
          },
          {
            "Name": "HrmpChannelClosing",
            "TypeFields": [
              {
                "Name": "initiator",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "sender",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "recipient",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 9
          },
          {
            "Name": "ClearOrigin",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "DescendOrigin",
            "TypeFields": [
              {
                "TypeName": "InteriorLocation",
                "TypeId": 60
              }
            ],
            "Index": 11
          },
          {
            "Name": "ReportError",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 99
              }
            ],
            "Index": 12
          },
          {
            "Name": "DepositAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 100
              },
              {
                "Name": "beneficiary",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 13
          },
          {
            "Name": "DepositReserveAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 100
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 76
              }
            ],
            "Index": 14
          },
          {
            "Name": "ExchangeAsset",
            "TypeFields": [
              {
                "Name": "give",
                "TypeName": "AssetFilter",
                "TypeId": 100
              },
              {
                "Name": "want",
                "TypeName": "Assets",
                "TypeId": 79
              },
              {
                "Name": "maximal",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15
          },
          {
            "Name": "InitiateReserveWithdraw",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 100
              },
              {
                "Name": "reserve",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 76
              }
            ],
            "Index": 16
          },
          {
            "Name": "InitiateTeleport",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 100
              },
              {
                "Name": "dest",
                "TypeName": "Location",
                "TypeId": 59
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 76
              }
            ],
            "Index": 17
          },
          {
            "Name": "ReportHolding",
            "TypeFields": [
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 99
              },
              {
                "Name": "assets",
                "TypeName": "AssetFilter",
                "TypeId": 100
              }
            ],
            "Index": 18
          },
          {
            "Name": "BuyExecution",
            "TypeFields": [
              {
                "Name": "fees",
                "TypeName": "Asset",
                "TypeId": 81
              },
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              }
            ],
            "Index": 19
          },
          {
            "Name": "RefundSurplus",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "SetErrorHandler",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 322
              }
            ],
            "Index": 21
          },
          {
            "Name": "SetAppendix",
            "TypeFields": [
              {
                "TypeName": "Xcm<Call>",
                "TypeId": 322
              }
            ],
            "Index": 22
          },
          {
            "Name": "ClearError",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "ClaimAsset",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Assets",
                "TypeId": 79
              },
              {
                "Name": "ticket",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 24
          },
          {
            "Name": "Trap",
            "TypeFields": [
              {
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 25
          },
          {
            "Name": "SubscribeVersion",
            "TypeFields": [
              {
                "Name": "query_id",
                "TypeName": "QueryId",
                "TypeId": 11
              },
              {
                "Name": "max_response_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 26
          },
          {
            "Name": "UnsubscribeVersion",
            "TypeFields": null,
            "Index": 27
          },
          {
            "Name": "BurnAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 79
              }
            ],
            "Index": 28
          },
          {
            "Name": "ExpectAsset",
            "TypeFields": [
              {
                "TypeName": "Assets",
                "TypeId": 79
              }
            ],
            "Index": 29
          },
          {
            "Name": "ExpectOrigin",
            "TypeFields": [
              {
                "TypeName": "Option<Location>",
                "TypeId": 96
              }
            ],
            "Index": 30
          },
          {
            "Name": "ExpectError",
            "TypeFields": [
              {
                "TypeName": "Option<(u32, Error)>",
                "TypeId": 88
              }
            ],
            "Index": 31
          },
          {
            "Name": "ExpectTransactStatus",
            "TypeFields": [
              {
                "TypeName": "MaybeErrorCode",
                "TypeId": 94
              }
            ],
            "Index": 32
          },
          {
            "Name": "QueryPallet",
            "TypeFields": [
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "response_info",
                "TypeName": "QueryResponseInfo",
                "TypeId": 99
              }
            ],
            "Index": 33
          },
          {
            "Name": "ExpectPallet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "module_name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "crate_major",
                "TypeName": "u32",
                "TypeId": 63
              },
              {
                "Name": "min_crate_minor",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 34
          },
          {
            "Name": "ReportTransactStatus",
            "TypeFields": [
              {
                "TypeName": "QueryResponseInfo",
                "TypeId": 99
              }
            ],
            "Index": 35
          },
          {
            "Name": "ClearTransactStatus",
            "TypeFields": null,
            "Index": 36
          },
          {
            "Name": "UniversalOrigin",
            "TypeFields": [
              {
                "TypeName": "Junction",
                "TypeId": 62
              }
            ],
            "Index": 37
          },
          {
            "Name": "ExportMessage",
            "TypeFields": [
              {
                "Name": "network",
                "TypeName": "NetworkId",
                "TypeId": 65
              },
              {
                "Name": "destination",
                "TypeName": "InteriorLocation",
                "TypeId": 60
              },
              {
                "Name": "xcm",
                "TypeName": "Xcm<()>",
                "TypeId": 76
              }
            ],
            "Index": 38
          },
          {
            "Name": "LockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 81
              },
              {
                "Name": "unlocker",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 39
          },
          {
            "Name": "UnlockAsset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 81
              },
              {
                "Name": "target",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 40
          },
          {
            "Name": "NoteUnlockable",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 81
              },
              {
                "Name": "owner",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 41
          },
          {
            "Name": "RequestUnlock",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Asset",
                "TypeId": 81
              },
              {
                "Name": "locker",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 42
          },
          {
            "Name": "SetFeesMode",
            "TypeFields": [
              {
                "Name": "jit_withdraw",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 43
          },
          {
            "Name": "SetTopic",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 44
          },
          {
            "Name": "ClearTopic",
            "TypeFields": null,
            "Index": 45
          },
          {
            "Name": "AliasOrigin",
            "TypeFields": [
              {
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 46
          },
          {
            "Name": "UnpaidExecution",
            "TypeFields": [
              {
                "Name": "weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              },
              {
                "Name": "check_origin",
                "TypeName": "Option<Location>",
                "TypeId": 96
              }
            ],
            "Index": 47
          }
        ],
        "Path": [
          "staging_xcm",
          "v4",
          "Instruction"
        ],
        "TypeParams": [
          {
            "Name": "Call"
          }
        ],
        "TypeDef": "Variant"
      },
      "325": {
        "Variants": [
          {
            "Name": "Teleport",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "LocalReserve",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DestinationReserve",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "RemoteReserve",
            "TypeFields": [
              {
                "TypeName": "VersionedLocation",
                "TypeId": 129
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "staging_xcm_executor",
          "traits",
          "asset_transfer",
          "TransferType"
        ],
        "TypeDef": "Variant"
      },
      "326": {
        "Variants": [
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::AssetId",
                "TypeId": 121
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::AssetId",
                "TypeId": 82
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "VersionedAssetId"
        ],
        "TypeDef": "Variant"
      },
      "327": {
        "Variants": null,
        "Path": [
          "cumulus_pallet_xcm",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "328": {
        "Variants": [
          {
            "Name": "reap_page",
            "TypeFields": [
              {
                "Name": "message_origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 132
              },
              {
                "Name": "page_index",
                "TypeName": "PageIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Remove a page which has no more messages remaining to be processed or is stale."
            ]
          },
          {
            "Name": "execute_overweight",
            "TypeFields": [
              {
                "Name": "message_origin",
                "TypeName": "MessageOriginOf<T>",
                "TypeId": 132
              },
              {
                "Name": "page",
                "TypeName": "PageIndex",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "T::Size",
                "TypeId": 4
              },
              {
                "Name": "weight_limit",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 1,
            "Docs": [
              "Execute an overweight message.",
              "",
              "Temporary processing errors will be propagated whereas permanent errors are treated",
              "as success condition.",
              "",
              "- `origin`: Must be `Signed`.",
              "- `message_origin`: The origin from which the message to be executed arrived.",
              "- `page`: The page in the queue in which the message to be executed is sitting.",
              "- `index`: The index into the queue of the message to be executed.",
              "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
              "  of the message.",
              "",
              "Benchmark complexity considerations: O(index + weight_limit)."
            ]
          }
        ],
        "Path": [
          "pallet_message_queue",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "329": {
        "Variants": [
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 330
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer native currencies.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiasset",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Box<VersionedAsset>",
                "TypeId": 331
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              }
            ],
            "Index": 1,
            "Docs": [
              "Transfer `Asset`.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_with_fee",
            "TypeFields": [
              {
                "Name": "currency_id",
                "TypeName": "T::CurrencyId",
                "TypeId": 330
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "fee",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer native currencies specifying the fee and amount as",
              "separate.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee` is the amount to be spent to pay for execution in destination",
              "chain. Both fee and amount will be subtracted form the callers",
              "balance.",
              "",
              "If `fee` is not high enough to cover for the execution costs in the",
              "destination chain, then the assets will be trapped in the",
              "destination chain",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiasset_with_fee",
            "TypeFields": [
              {
                "Name": "asset",
                "TypeName": "Box<VersionedAsset>",
                "TypeId": 331
              },
              {
                "Name": "fee",
                "TypeName": "Box<VersionedAsset>",
                "TypeId": 331
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              }
            ],
            "Index": 3,
            "Docs": [
              "Transfer `Asset` specifying the fee and amount as separate.",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee` is the Asset to be spent to pay for execution in",
              "destination chain. Both fee and amount will be subtracted form the",
              "callers balance For now we only accept fee and asset having the same",
              "`Location` id.",
              "",
              "If `fee` is not high enough to cover for the execution costs in the",
              "destination chain, then the assets will be trapped in the",
              "destination chain",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multicurrencies",
            "TypeFields": [
              {
                "Name": "currencies",
                "TypeName": "Vec<(T::CurrencyId, T::Balance)>",
                "TypeId": 332
              },
              {
                "Name": "fee_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer several currencies specifying the item to be used as fee",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee_item` is index of the currencies tuple that we want to use for",
              "payment",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          },
          {
            "Name": "transfer_multiassets",
            "TypeFields": [
              {
                "Name": "assets",
                "TypeName": "Box<VersionedAssets>",
                "TypeId": 104
              },
              {
                "Name": "fee_item",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "dest_weight_limit",
                "TypeName": "WeightLimit",
                "TypeId": 103
              }
            ],
            "Index": 5,
            "Docs": [
              "Transfer several `Asset` specifying the item to be used as fee",
              "",
              "`dest_weight_limit` is the weight for XCM execution on the dest",
              "chain, and it would be charged from the transferred assets. If set",
              "below requirements, the execution may fail and assets wouldn't be",
              "received.",
              "",
              "`fee_item` is index of the Assets that we want to use for",
              "payment",
              "",
              "It's a no-op if any error on local XCM execution or message sending.",
              "Note sending assets out per se doesn't guarantee they would be",
              "received. Receiving depends on if the XCM message could be delivered",
              "by the network, and if the receiving chain would handle",
              "messages correctly."
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "330": {
        "Variants": [
          {
            "Name": "AJUN",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "ajuna_runtime",
          "xcm_config",
          "CurrencyId"
        ],
        "TypeDef": "Variant"
      },
      "331": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::MultiAsset",
                "TypeId": 107
              }
            ],
            "Index": 1
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::MultiAsset",
                "TypeId": 120
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Asset",
                "TypeId": 81
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "VersionedAsset"
        ],
        "TypeDef": "Variant"
      },
      "332": {
        "TypeId": 333,
        "TypeDef": "Sequence"
      },
      "333": {
        "TypeIds": [
          330,
          6
        ],
        "TypeDef": "Tuple"
      },
      "334": {
        "Variants": [
          {
            "Name": "send_as_sovereign",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "Box<VersionedLocation>",
                "TypeId": 129
              },
              {
                "Name": "message",
                "TypeName": "Box<VersionedXcm<()>>",
                "TypeId": 288
              }
            ],
            "Index": 0,
            "Docs": [
              "Send an XCM message as parachain sovereign."
            ]
          }
        ],
        "Path": [
          "orml_xcm",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "335": {
        "Variants": [
          {
            "Name": "propose_spend",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 51
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 0,
            "Docs": [
              "Put forward a suggestion for spending.",
              "",
              "## Dispatch Origin",
              "",
              "Must be signed.",
              "",
              "## Details",
              "A deposit proportional to the value is reserved and slashed if the proposal is rejected.",
              "It is returned once the proposal is awarded.",
              "",
              "### Complexity",
              "- O(1)",
              "",
              "## Events",
              "",
              "Emits [`Event::Proposed`] if successful."
            ]
          },
          {
            "Name": "reject_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 63
              }
            ],
            "Index": 1,
            "Docs": [
              "Reject a proposed spend.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::RejectOrigin`].",
              "",
              "## Details",
              "The original deposit will be slashed.",
              "",
              "### Complexity",
              "- O(1)",
              "",
              "## Events",
              "",
              "Emits [`Event::Rejected`] if successful."
            ]
          },
          {
            "Name": "approve_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 63
              }
            ],
            "Index": 2,
            "Docs": [
              "Approve a proposal.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::ApproveOrigin`].",
              "",
              "## Details",
              "",
              "At a later time, the proposal will be allocated to the beneficiary and the original",
              "deposit will be returned.",
              "",
              "### Complexity",
              " - O(1).",
              "",
              "## Events",
              "",
              "No events are emitted from this dispatch."
            ]
          },
          {
            "Name": "spend_local",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 51
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 3,
            "Docs": [
              "Propose and approve a spend of treasury funds.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.",
              "",
              "### Details",
              "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
              "beneficiary.",
              "",
              "### Parameters",
              "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
              "- `beneficiary`: The destination account for the transfer.",
              "",
              "## Events",
              "",
              "Emits [`Event::SpendApproved`] if successful."
            ]
          },
          {
            "Name": "remove_approval",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 63
              }
            ],
            "Index": 4,
            "Docs": [
              "Force a previously approved proposal to be removed from the approval queue.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::RejectOrigin`].",
              "",
              "## Details",
              "",
              "The original deposit will no longer be returned.",
              "",
              "### Parameters",
              "- `proposal_id`: The index of a proposal",
              "",
              "### Complexity",
              "- O(A) where `A` is the number of approvals",
              "",
              "### Errors",
              "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the",
              "  approval queue, i.e., the proposal has not been approved. This could also mean the",
              "  proposal does not exist altogether, thus there is no way it would have been approved",
              "  in the first place."
            ]
          },
          {
            "Name": "spend",
            "TypeFields": [
              {
                "Name": "asset_kind",
                "TypeName": "Box<T::AssetKind>",
                "TypeId": 36
              },
              {
                "Name": "amount",
                "TypeName": "AssetBalanceOf<T, I>",
                "TypeId": 51
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<BeneficiaryLookupOf<T, I>>",
                "TypeId": 0
              },
              {
                "Name": "valid_from",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 182
              }
            ],
            "Index": 5,
            "Docs": [
              "Propose and approve a spend of treasury funds.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::SpendOrigin`] with the `Success` value being at least",
              "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted",
              "for assertion using the [`Config::BalanceConverter`].",
              "",
              "## Details",
              "",
              "Create an approved spend for transferring a specific `amount` of `asset_kind` to a",
              "designated beneficiary. The spend must be claimed using the `payout` dispatchable within",
              "the [`Config::PayoutPeriod`].",
              "",
              "### Parameters",
              "- `asset_kind`: An indicator of the specific asset class to be spent.",
              "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
              "- `beneficiary`: The beneficiary of the spend.",
              "- `valid_from`: The block number from which the spend can be claimed. It can refer to",
              "  the past if the resulting spend has not yet expired according to the",
              "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after",
              "  approval.",
              "",
              "## Events",
              "",
              "Emits [`Event::AssetSpendApproved`] if successful."
            ]
          },
          {
            "Name": "payout",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Claim a spend.",
              "",
              "## Dispatch Origin",
              "",
              "Must be signed.",
              "",
              "## Details",
              "",
              "Spends must be claimed within some temporal bounds. A spend may be claimed within one",
              "[`Config::PayoutPeriod`] from the `valid_from` block.",
              "In case of a payout failure, the spend status must be updated with the `check_status`",
              "dispatchable before retrying with the current function.",
              "",
              "### Parameters",
              "- `index`: The spend index.",
              "",
              "## Events",
              "",
              "Emits [`Event::Paid`] if successful."
            ]
          },
          {
            "Name": "check_status",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Check the status of the spend and remove it from the storage if processed.",
              "",
              "## Dispatch Origin",
              "",
              "Must be signed.",
              "",
              "## Details",
              "",
              "The status check is a prerequisite for retrying a failed payout.",
              "If a spend has either succeeded or expired, it is removed from the storage by this",
              "function. In such instances, transaction fees are refunded.",
              "",
              "### Parameters",
              "- `index`: The spend index.",
              "",
              "## Events",
              "",
              "Emits [`Event::PaymentFailed`] if the spend payout has failed.",
              "Emits [`Event::SpendProcessed`] if the spend payout has succeed."
            ]
          },
          {
            "Name": "void_spend",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Void previously approved spend.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::RejectOrigin`].",
              "",
              "## Details",
              "",
              "A spend void is only possible if the payout has not been attempted yet.",
              "",
              "### Parameters",
              "- `index`: The spend index.",
              "",
              "## Events",
              "",
              "Emits [`Event::AssetSpendVoided`] if successful."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "336": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 53
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 337
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "The dispatch of this call must be `SetMembersOrigin`.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "## Complexity:",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)"
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 219
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 1,
            "Docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "## Complexity:",
              "- `O(B + M + P)` where:",
              "- `B` is `proposal` size in bytes (length-fee-bounded)",
              "- `M` members-count (code-bounded)",
              "- `P` complexity of dispatching `proposal`"
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 63
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 219
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2,
            "Docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
              "or put up for voting.",
              "",
              "## Complexity",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold < 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 63
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 3,
            "Docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "## Complexity",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)"
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 5,
            "Docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "## Complexity",
              "O(P) where P is the number of max proposals"
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 63
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 6,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "337": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "338": {
        "Variants": [
          {
            "Name": "add_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a member `who` to the set.",
              "",
              "May only be called from `T::AddOrigin`."
            ]
          },
          {
            "Name": "remove_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 1,
            "Docs": [
              "Remove a member `who` from the set.",
              "",
              "May only be called from `T::RemoveOrigin`."
            ]
          },
          {
            "Name": "swap_member",
            "TypeFields": [
              {
                "Name": "remove",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "add",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 2,
            "Docs": [
              "Swap out one member `remove` for another `add`.",
              "",
              "May only be called from `T::SwapOrigin`.",
              "",
              "Prime membership is *not* passed from `remove` to `add`, if extant."
            ]
          },
          {
            "Name": "reset_members",
            "TypeFields": [
              {
                "Name": "members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 53
              }
            ],
            "Index": 3,
            "Docs": [
              "Change the membership to a new set, disregarding the existing membership. Be nice and",
              "pass `members` pre-sorted.",
              "",
              "May only be called from `T::ResetOrigin`."
            ]
          },
          {
            "Name": "change_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 4,
            "Docs": [
              "Swap out the sending member for some other key `new`.",
              "",
              "May only be called from `Signed` origin of a current member.",
              "",
              "Prime membership is passed from the origin account to `new`, if extant."
            ]
          },
          {
            "Name": "set_prime",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 5,
            "Docs": [
              "Set the prime member. Must be a current member.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          },
          {
            "Name": "clear_prime",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Remove the prime member if it exists.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "339": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 53
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 337
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "The dispatch of this call must be `SetMembersOrigin`.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "## Complexity:",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)"
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 219
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 1,
            "Docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "## Complexity:",
              "- `O(B + M + P)` where:",
              "- `B` is `proposal` size in bytes (length-fee-bounded)",
              "- `M` members-count (code-bounded)",
              "- `P` complexity of dispatching `proposal`"
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 63
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 219
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 2,
            "Docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
              "or put up for voting.",
              "",
              "## Complexity",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold < 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 63
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 3,
            "Docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "## Complexity",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)"
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 5,
            "Docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "## Complexity",
              "O(P) where P is the number of max proposals"
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 63
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 63
              }
            ],
            "Index": 6,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "340": {
        "Variants": [
          {
            "Name": "add_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a member `who` to the set.",
              "",
              "May only be called from `T::AddOrigin`."
            ]
          },
          {
            "Name": "remove_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 1,
            "Docs": [
              "Remove a member `who` from the set.",
              "",
              "May only be called from `T::RemoveOrigin`."
            ]
          },
          {
            "Name": "swap_member",
            "TypeFields": [
              {
                "Name": "remove",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "add",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 2,
            "Docs": [
              "Swap out one member `remove` for another `add`.",
              "",
              "May only be called from `T::SwapOrigin`.",
              "",
              "Prime membership is *not* passed from `remove` to `add`, if extant."
            ]
          },
          {
            "Name": "reset_members",
            "TypeFields": [
              {
                "Name": "members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 53
              }
            ],
            "Index": 3,
            "Docs": [
              "Change the membership to a new set, disregarding the existing membership. Be nice and",
              "pass `members` pre-sorted.",
              "",
              "May only be called from `T::ResetOrigin`."
            ]
          },
          {
            "Name": "change_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 4,
            "Docs": [
              "Swap out the sending member for some other key `new`.",
              "",
              "May only be called from `Signed` origin of a current member.",
              "",
              "Prime membership is passed from the origin account to `new`, if extant."
            ]
          },
          {
            "Name": "set_prime",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 5,
            "Docs": [
              "Set the prime member. Must be a current member.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          },
          {
            "Name": "clear_prime",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Remove the prime member if it exists.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "341": {
        "Variants": [
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 342
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 51
              }
            ],
            "Index": 0,
            "Docs": [
              "Propose a sensitive action to be taken.",
              "",
              "The dispatch origin of this call must be _Signed_ and the sender must",
              "have funds to cover the deposit.",
              "",
              "- `proposal_hash`: The hash of the proposal preimage.",
              "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
              "",
              "Emits `Proposed`."
            ]
          },
          {
            "Name": "second",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "PropIndex",
                "TypeId": 63
              }
            ],
            "Index": 1,
            "Docs": [
              "Signals agreement with a particular proposal.",
              "",
              "The dispatch origin of this call must be _Signed_ and the sender",
              "must have funds to cover the deposit, equal to the original deposit.",
              "",
              "- `proposal`: The index of the proposal to second."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 63
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 144
              }
            ],
            "Index": 2,
            "Docs": [
              "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
              "otherwise it is a vote to keep the status quo.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `ref_index`: The index of the referendum to vote for.",
              "- `vote`: The vote configuration."
            ]
          },
          {
            "Name": "emergency_cancel",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
              "referendum.",
              "",
              "The dispatch origin of this call must be `CancellationOrigin`.",
              "",
              "-`ref_index`: The index of the referendum to cancel.",
              "",
              "Weight: `O(1)`."
            ]
          },
          {
            "Name": "external_propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 342
              }
            ],
            "Index": 4,
            "Docs": [
              "Schedule a referendum to be tabled once it is legal to schedule an external",
              "referendum.",
              "",
              "The dispatch origin of this call must be `ExternalOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal."
            ]
          },
          {
            "Name": "external_propose_majority",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 342
              }
            ],
            "Index": 5,
            "Docs": [
              "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
              "an external referendum.",
              "",
              "The dispatch of this call must be `ExternalMajorityOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal.",
              "",
              "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
              "pre-scheduled `external_propose` call.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "external_propose_default",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 342
              }
            ],
            "Index": 6,
            "Docs": [
              "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
              "schedule an external referendum.",
              "",
              "The dispatch of this call must be `ExternalDefaultOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal.",
              "",
              "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
              "pre-scheduled `external_propose` call.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "fast_track",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "voting_period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Schedule the currently externally-proposed majority-carries referendum to be tabled",
              "immediately. If there is no externally-proposed referendum currently, or if there is one",
              "but it is not a majority-carries referendum then it fails.",
              "",
              "The dispatch of this call must be `FastTrackOrigin`.",
              "",
              "- `proposal_hash`: The hash of the current external proposal.",
              "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
              "\tMust be always greater than zero.",
              "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.",
              "- `delay`: The number of block after voting has ended in approval and this should be",
              "  enacted. This doesn't have a minimum amount.",
              "",
              "Emits `Started`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "veto_external",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 8,
            "Docs": [
              "Veto and blacklist the external proposal hash.",
              "",
              "The dispatch origin of this call must be `VetoOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
              "",
              "Emits `Vetoed`.",
              "",
              "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
            ]
          },
          {
            "Name": "cancel_referendum",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 63
              }
            ],
            "Index": 9,
            "Docs": [
              "Remove a referendum.",
              "",
              "The dispatch origin of this call must be _Root_.",
              "",
              "- `ref_index`: The index of the referendum to cancel.",
              "",
              "# Weight: `O(1)`."
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 345
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Delegate the voting power (with some given conviction) of the sending account.",
              "",
              "The balance delegated is locked for as long as it's delegated, and thereafter for the",
              "time appropriate for the conviction's lock period.",
              "",
              "The dispatch origin of this call must be _Signed_, and the signing account must either:",
              "  - be delegating already; or",
              "  - have no voting activity (if there is, then it will need to be removed/consolidated",
              "    through `reap_vote` or `unvote`).",
              "",
              "- `to`: The account whose voting the `target` account's voting power will follow.",
              "- `conviction`: The conviction that will be attached to the delegated votes. When the",
              "  account is undelegated, the funds will be locked for the corresponding period.",
              "- `balance`: The amount of the account's balance to be used in delegating. This must not",
              "  be more than the account's current balance.",
              "",
              "Emits `Delegated`.",
              "",
              "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
              "  voted on. Weight is charged as if maximum votes."
            ]
          },
          {
            "Name": "undelegate",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Undelegate the voting power of the sending account.",
              "",
              "Tokens may be unlocked following once an amount of time consistent with the lock period",
              "of the conviction with which the delegation was issued.",
              "",
              "The dispatch origin of this call must be _Signed_ and the signing account must be",
              "currently delegating.",
              "",
              "Emits `Undelegated`.",
              "",
              "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
              "  voted on. Weight is charged as if maximum votes."
            ]
          },
          {
            "Name": "clear_public_proposals",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Clears all public proposals.",
              "",
              "The dispatch origin of this call must be _Root_.",
              "",
              "Weight: `O(1)`."
            ]
          },
          {
            "Name": "unlock",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 13,
            "Docs": [
              "Unlock tokens that have an expired lock.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account to remove the lock on.",
              "",
              "Weight: `O(R)` with R number of vote of target."
            ]
          },
          {
            "Name": "remove_vote",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 14,
            "Docs": [
              "Remove a vote for a referendum.",
              "",
              "If:",
              "- the referendum was cancelled, or",
              "- the referendum is ongoing, or",
              "- the referendum has ended such that",
              "  - the vote of the account was in opposition to the result; or",
              "  - there was no conviction to the account's vote; or",
              "  - the account made a split vote",
              "...then the vote is removed cleanly and a following call to `unlock` may result in more",
              "funds being available.",
              "",
              "If, however, the referendum has ended and:",
              "- it finished corresponding to the vote of the account, and",
              "- the account made a standard vote with conviction, and",
              "- the lock period of the conviction is not over",
              "...then the lock will be aggregated into the overall account's lock, which may involve",
              "*overlocking* (where the two locks are combined into a single lock that is the maximum",
              "of both the amount locked and the time is it locked for).",
              "",
              "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
              "registered for referendum `index`.",
              "",
              "- `index`: The index of referendum of the vote to be removed.",
              "",
              "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "remove_other_vote",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "Remove a vote for a referendum.",
              "",
              "If the `target` is equal to the signer, then this function is exactly equivalent to",
              "`remove_vote`. If not equal to the signer, then the vote must have expired,",
              "either because the referendum was cancelled, because the voter lost the referendum or",
              "because the conviction period is over.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account of the vote to be removed; this account must have voted for",
              "  referendum `index`.",
              "- `index`: The index of referendum of the vote to be removed.",
              "",
              "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "blacklist",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "maybe_ref_index",
                "TypeName": "Option<ReferendumIndex>",
                "TypeId": 182
              }
            ],
            "Index": 16,
            "Docs": [
              "Permanently place a proposal into the blacklist. This prevents it from ever being",
              "proposed again.",
              "",
              "If called on a queued public or external proposal, then this will result in it being",
              "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
              "then it will be cancelled.",
              "",
              "The dispatch origin of this call must be `BlacklistOrigin`.",
              "",
              "- `proposal_hash`: The proposal hash to blacklist permanently.",
              "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
              "cancelled.",
              "",
              "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
              "  reasonable value)."
            ]
          },
          {
            "Name": "cancel_proposal",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 63
              }
            ],
            "Index": 17,
            "Docs": [
              "Remove a proposal.",
              "",
              "The dispatch origin of this call must be `CancelProposalOrigin`.",
              "",
              "- `prop_index`: The index of the proposal to cancel.",
              "",
              "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 146
              },
              {
                "Name": "maybe_hash",
                "TypeName": "Option<T::Hash>",
                "TypeId": 178
              }
            ],
            "Index": 18,
            "Docs": [
              "Set or clear a metadata of a proposal or a referendum.",
              "",
              "Parameters:",
              "- `origin`: Must correspond to the `MetadataOwner`.",
              "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`",
              "      threshold.",
              "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`",
              "      threshold.",
              "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`",
              "      threshold.",
              "    - `Signed` by a creator for a public proposal.",
              "    - `Signed` to clear a metadata for a finished referendum.",
              "    - `Root` to set a metadata for an ongoing referendum.",
              "- `owner`: an identifier of a metadata owner.",
              "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "342": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H::Output",
                "TypeId": 13
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inline",
            "TypeFields": [
              {
                "TypeName": "BoundedInline",
                "TypeId": 344
              }
            ],
            "Index": 1
          },
          {
            "Name": "Lookup",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H::Output",
                "TypeId": 13
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "preimages",
          "Bounded"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 219
          },
          {
            "Name": "H",
            "TypeId": 343
          }
        ],
        "TypeDef": "Variant"
      },
      "343": {
        "Path": [
          "sp_runtime",
          "traits",
          "BlakeTwo256"
        ],
        "TypeDef": "Composite"
      },
      "344": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "345": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Locked1x",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Locked2x",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Locked3x",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Locked4x",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Locked5x",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Locked6x",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "conviction",
          "Conviction"
        ],
        "TypeDef": "Variant"
      },
      "346": {
        "Variants": [
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Issue a new class of fungible assets from a public origin.",
              "",
              "This new asset class has no assets initially and its owner is the origin.",
              "",
              "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
              "",
              "Funds of sender are reserved by `AssetDeposit`.",
              "",
              "Parameters:",
              "- `id`: The identifier of the new asset. This must not be currently in use to identify",
              "an existing asset.",
              "- `admin`: The admin of this class of assets. The admin is the initial address of each",
              "member of the asset class's admin team.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "",
              "Emits `Created` event when successful.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_create",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "is_sufficient",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 51
              }
            ],
            "Index": 1,
            "Docs": [
              "Issue a new class of fungible assets from a privileged origin.",
              "",
              "This new asset class has no assets initially.",
              "",
              "The origin must conform to `ForceOrigin`.",
              "",
              "Unlike `create`, no funds are reserved.",
              "",
              "- `id`: The identifier of the new asset. This must not be currently in use to identify",
              "an existing asset.",
              "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
              "over this asset, but may later change and configure the permissions using",
              "`transfer_ownership` and `set_team`.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "",
              "Emits `ForceCreated` event when successful.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "start_destroy",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              }
            ],
            "Index": 2,
            "Docs": [
              "Start the process of destroying a fungible asset class.",
              "",
              "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
              "destruction of an asset class.",
              "",
              "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "The asset class must be frozen before calling `start_destroy`."
            ]
          },
          {
            "Name": "destroy_accounts",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              }
            ],
            "Index": 3,
            "Docs": [
              "Destroy all accounts associated with a given asset.",
              "",
              "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state.",
              "",
              "Due to weight restrictions, this function may need to be called multiple times to fully",
              "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each call emits the `Event::DestroyedAccounts` event."
            ]
          },
          {
            "Name": "destroy_approvals",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              }
            ],
            "Index": 4,
            "Docs": [
              "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
              "",
              "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state.",
              "",
              "Due to weight restrictions, this function may need to be called multiple times to fully",
              "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each call emits the `Event::DestroyedApprovals` event."
            ]
          },
          {
            "Name": "finish_destroy",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              }
            ],
            "Index": 5,
            "Docs": [
              "Complete destroying asset and unreserve currency.",
              "",
              "`finish_destroy` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
              "hand.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each successful call emits the `Event::Destroyed` event."
            ]
          },
          {
            "Name": "mint",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 51
              }
            ],
            "Index": 6,
            "Docs": [
              "Mint assets of a particular class.",
              "",
              "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to have some amount minted.",
              "- `beneficiary`: The account to be credited with the minted assets.",
              "- `amount`: The amount of the asset to be minted.",
              "",
              "Emits `Issued` event when successful.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
            ]
          },
          {
            "Name": "burn",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 51
              }
            ],
            "Index": 7,
            "Docs": [
              "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
              "",
              "Origin must be Signed and the sender should be the Manager of the asset `id`.",
              "",
              "Bails with `NoAccount` if the `who` is already dead.",
              "",
              "- `id`: The identifier of the asset to have some amount burned.",
              "- `who`: The account to be debited from.",
              "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
              "",
              "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
              "minimum for the asset, then the amount burned is increased to take it to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 51
              }
            ],
            "Index": 8,
            "Docs": [
              "Move some assets from the sender account to another.",
              "",
              "Origin must be Signed.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `target`: The account to be credited.",
              "- `amount`: The amount by which the sender's balance of assets should be reduced and",
              "`target`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the sender balance above zero but below",
              "the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
              "`target`."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 51
              }
            ],
            "Index": 9,
            "Docs": [
              "Move some assets from the sender account to another, keeping the sender account alive.",
              "",
              "Origin must be Signed.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `target`: The account to be credited.",
              "- `amount`: The amount by which the sender's balance of assets should be reduced and",
              "`target`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the sender balance above zero but below",
              "the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
              "`target`."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 51
              }
            ],
            "Index": 10,
            "Docs": [
              "Move some assets from one account to another.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `source`: The account to be debited.",
              "- `dest`: The account to be credited.",
              "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
              "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the `source` balance above zero but",
              "below the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
              "`dest`."
            ]
          },
          {
            "Name": "freeze",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 11,
            "Docs": [
              "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
              "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
              "account that does not have an entry, use `touch_other` first.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `who`: The account to be frozen.",
              "",
              "Emits `Frozen`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "thaw",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 12,
            "Docs": [
              "Allow unprivileged transfers to and from an account again.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `who`: The account to be unfrozen.",
              "",
              "Emits `Thawed`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "freeze_asset",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              }
            ],
            "Index": 13,
            "Docs": [
              "Disallow further unprivileged transfers for the asset class.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "",
              "Emits `Frozen`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "thaw_asset",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              }
            ],
            "Index": 14,
            "Docs": [
              "Allow unprivileged transfers for the asset again.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be thawed.",
              "",
              "Emits `Thawed`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "transfer_ownership",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 15,
            "Docs": [
              "Change the Owner of an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The new Owner of this asset.",
              "",
              "Emits `OwnerChanged`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "set_team",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "issuer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "freezer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 16,
            "Docs": [
              "Change the Issuer, Admin and Freezer of an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `issuer`: The new Issuer of this asset.",
              "- `admin`: The new Admin of this asset.",
              "- `freezer`: The new Freezer of this asset.",
              "",
              "Emits `TeamChanged`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 17,
            "Docs": [
              "Set the metadata for an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "Funds of sender are reserved according to the formula:",
              "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
              "account any already reserved funds.",
              "",
              "- `id`: The identifier of the asset to update.",
              "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
              "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
              "- `decimals`: The number of decimals this asset uses to represent one unit.",
              "",
              "Emits `MetadataSet`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "clear_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              }
            ],
            "Index": 18,
            "Docs": [
              "Clear the metadata for an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "Any deposit is freed for the asset owner.",
              "",
              "- `id`: The identifier of the asset to clear.",
              "",
              "Emits `MetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_set_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 19,
            "Docs": [
              "Force the metadata for an asset to some value.",
              "",
              "Origin must be ForceOrigin.",
              "",
              "Any deposit is left alone.",
              "",
              "- `id`: The identifier of the asset to update.",
              "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
              "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
              "- `decimals`: The number of decimals this asset uses to represent one unit.",
              "",
              "Emits `MetadataSet`.",
              "",
              "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
            ]
          },
          {
            "Name": "force_clear_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              }
            ],
            "Index": 20,
            "Docs": [
              "Clear the metadata for an asset.",
              "",
              "Origin must be ForceOrigin.",
              "",
              "Any deposit is returned.",
              "",
              "- `id`: The identifier of the asset to clear.",
              "",
              "Emits `MetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_asset_status",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "issuer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "freezer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 51
              },
              {
                "Name": "is_sufficient",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 21,
            "Docs": [
              "Alter the attributes of a given asset.",
              "",
              "Origin must be `ForceOrigin`.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The new Owner of this asset.",
              "- `issuer`: The new Issuer of this asset.",
              "- `admin`: The new Admin of this asset.",
              "- `freezer`: The new Freezer of this asset.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
              "value to account for the state bloat associated with its balance storage. If set to",
              "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
              "an ED in the Balances pallet or whatever else is used to control user-account state",
              "growth).",
              "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
              "instructions.",
              "",
              "Emits `AssetStatusChanged` with the identity of the asset.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "approve_transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 51
              }
            ],
            "Index": 22,
            "Docs": [
              "Approve an amount of asset for transfer by a delegated third-party account.",
              "",
              "Origin must be Signed.",
              "",
              "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
              "for the purpose of holding the approval. If some non-zero amount of assets is already",
              "approved from signing account to `delegate`, then it is topped up or unreserved to",
              "meet the right value.",
              "",
              "NOTE: The signing account does not need to own `amount` of assets at the point of",
              "making this call.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account to delegate permission to transfer asset.",
              "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
              "already an approval in place, then this acts additively.",
              "",
              "Emits `ApprovedTransfer` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "cancel_approval",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 23,
            "Docs": [
              "Cancel all of some asset approved for delegated transfer by a third-party account.",
              "",
              "Origin must be Signed and there must be an approval in place between signer and",
              "`delegate`.",
              "",
              "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account delegated permission to transfer asset.",
              "",
              "Emits `ApprovalCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_cancel_approval",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 24,
            "Docs": [
              "Cancel all of some asset approved for delegated transfer by a third-party account.",
              "",
              "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
              "account of the asset `id`.",
              "",
              "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account delegated permission to transfer asset.",
              "",
              "Emits `ApprovalCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "transfer_approved",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "destination",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 51
              }
            ],
            "Index": 25,
            "Docs": [
              "Transfer some asset balance from a previously delegated account to some third-party",
              "account.",
              "",
              "Origin must be Signed and there must be an approval in place by the `owner` to the",
              "signer.",
              "",
              "If the entire amount approved for transfer is transferred, then any deposit previously",
              "reserved by `approve_transfer` is unreserved.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The account which previously approved for a transfer of at least `amount` and",
              "from which the asset balance will be withdrawn.",
              "- `destination`: The account to which the asset balance of `amount` will be transferred.",
              "- `amount`: The amount of assets to transfer.",
              "",
              "Emits `TransferredApproved` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "touch",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              }
            ],
            "Index": 26,
            "Docs": [
              "Create an asset account for non-provider assets.",
              "",
              "A deposit will be taken from the signer account.",
              "",
              "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
              "  to be taken.",
              "- `id`: The identifier of the asset for the account to be created.",
              "",
              "Emits `Touched` event when successful."
            ]
          },
          {
            "Name": "refund",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "allow_burn",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 27,
            "Docs": [
              "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
              "account.",
              "",
              "The origin must be Signed.",
              "",
              "- `id`: The identifier of the asset for which the caller would like the deposit",
              "  refunded.",
              "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
              "",
              "Emits `Refunded` event when successful."
            ]
          },
          {
            "Name": "set_min_balance",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 28,
            "Docs": [
              "Sets the minimum balance of an asset.",
              "",
              "Only works if there aren't any accounts that are holding the asset or if",
              "the new value of `min_balance` is less than the old one.",
              "",
              "Origin must be Signed and the sender has to be the Owner of the",
              "asset `id`.",
              "",
              "- `id`: The identifier of the asset.",
              "- `min_balance`: The new value of `min_balance`.",
              "",
              "Emits `AssetMinBalanceChanged` event when successful."
            ]
          },
          {
            "Name": "touch_other",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 29,
            "Docs": [
              "Create an asset account for `who`.",
              "",
              "A deposit will be taken from the signer account.",
              "",
              "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
              "  must have sufficient funds for a deposit to be taken.",
              "- `id`: The identifier of the asset for the account to be created.",
              "- `who`: The account to be created.",
              "",
              "Emits `Touched` event when successful."
            ]
          },
          {
            "Name": "refund_other",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 30,
            "Docs": [
              "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
              "",
              "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
              "order to burn a non-zero balance of the asset, the caller must be the account and should",
              "use `refund`.",
              "",
              "- `id`: The identifier of the asset for the account holding a deposit.",
              "- `who`: The account to refund.",
              "",
              "Emits `Refunded` event when successful."
            ]
          },
          {
            "Name": "block",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 63
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 230
              }
            ],
            "Index": 31,
            "Docs": [
              "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
              "",
              "- `id`: The identifier of the account's asset.",
              "- `who`: The account to be unblocked.",
              "",
              "Emits `Blocked`.",
              "",
              "Weight: `O(1)`"
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "347": {
        "Variants": [
          {
            "Name": "register_reserve_asset",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 4
              },
              {
                "Name": "asset_location",
                "TypeName": "Location",
                "TypeId": 59
              }
            ],
            "Index": 0
          },
          {
            "Name": "unregister_reserve_asset",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T>",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_asset_registry",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "348": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 34
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 34
          }
        ],
        "TypeDef": "Variant"
      },
      "349": {
        "Variants": [
          {
            "Name": "MinimumThreshold",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Threshold must be 2 or greater."
            ]
          },
          {
            "Name": "AlreadyApproved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Call is already approved by this signatory."
            ]
          },
          {
            "Name": "NoApprovalsNeeded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Call doesn't need any (more) approvals."
            ]
          },
          {
            "Name": "TooFewSignatories",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too few signatories in the list."
            ]
          },
          {
            "Name": "TooManySignatories",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many signatories in the list."
            ]
          },
          {
            "Name": "SignatoriesOutOfOrder",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The signatories were provided out of order; they should be ordered."
            ]
          },
          {
            "Name": "SenderInSignatories",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The sender was contained in the other signatories; it shouldn't be."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Multisig operation not found when attempting to cancel."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Only the account that originally created the multisig is able to cancel it."
            ]
          },
          {
            "Name": "NoTimepoint",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "No timepoint was given, yet the multisig operation is already underway."
            ]
          },
          {
            "Name": "WrongTimepoint",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "A different timepoint was given to the multisig operation that is underway."
            ]
          },
          {
            "Name": "UnexpectedTimepoint",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A timepoint was given, yet no multisig operation is underway."
            ]
          },
          {
            "Name": "MaxWeightTooLow",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The maximum weight information provided was too low."
            ]
          },
          {
            "Name": "AlreadyStored",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The data to be stored is already stored."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "350": {
        "Variants": [
          {
            "Name": "TooManyCalls",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many calls batched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "351": {
        "TypeIds": [
          352,
          356
        ],
        "TypeDef": "Tuple"
      },
      "352": {
        "TypeFields": [
          {
            "Name": "judgements",
            "TypeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
            "TypeId": 353
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "info",
            "TypeName": "IdentityInfo",
            "TypeId": 232
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Registration"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "MaxJudgements"
          },
          {
            "Name": "IdentityInfo",
            "TypeId": 232
          }
        ],
        "TypeDef": "Composite"
      },
      "353": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 355
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 354
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "354": {
        "TypeIds": [
          4,
          268
        ],
        "TypeDef": "Tuple"
      },
      "355": {
        "TypeId": 354,
        "TypeDef": "Sequence"
      },
      "356": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 39
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 39
          }
        ],
        "TypeDef": "Variant"
      },
      "357": {
        "TypeIds": [
          6,
          358
        ],
        "TypeDef": "Tuple"
      },
      "358": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 53
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "359": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 362
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 360
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "360": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 361
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 361
          }
        ],
        "TypeDef": "Variant"
      },
      "361": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fields",
            "TypeName": "IdField",
            "TypeId": 12
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "RegistrarInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "IdField",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "362": {
        "TypeId": 360,
        "TypeDef": "Sequence"
      },
      "363": {
        "TypeFields": [
          {
            "Name": "suffix",
            "TypeName": "Suffix",
            "TypeId": 364
          },
          {
            "Name": "allocation",
            "TypeName": "Allocation",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "AuthorityProperties"
        ],
        "TypeParams": [
          {
            "Name": "Suffix",
            "TypeId": 364
          }
        ],
        "TypeDef": "Composite"
      },
      "364": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "365": {
        "TypeIds": [
          0,
          4
        ],
        "TypeDef": "Tuple"
      },
      "366": {
        "Variants": [
          {
            "Name": "TooManySubAccounts",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many subs-accounts."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account isn't found."
            ]
          },
          {
            "Name": "NotNamed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Account isn't named."
            ]
          },
          {
            "Name": "EmptyIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Empty index."
            ]
          },
          {
            "Name": "FeeChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Fee is changed."
            ]
          },
          {
            "Name": "NoIdentity",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No identity found."
            ]
          },
          {
            "Name": "StickyJudgement",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Sticky judgement."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Judgement given."
            ]
          },
          {
            "Name": "InvalidJudgement",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Invalid judgement."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The index is invalid."
            ]
          },
          {
            "Name": "InvalidTarget",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The target is invalid."
            ]
          },
          {
            "Name": "TooManyRegistrars",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Maximum amount of registrars reached. Cannot add any more."
            ]
          },
          {
            "Name": "AlreadyClaimed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Account ID is already named."
            ]
          },
          {
            "Name": "NotSub",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Sender is not a sub-account."
            ]
          },
          {
            "Name": "NotOwned",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Sub-account isn't owned by sender."
            ]
          },
          {
            "Name": "JudgementForDifferentIdentity",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The provided judgement was for a different identity."
            ]
          },
          {
            "Name": "JudgementPaymentFailed",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Error that occurs when there is an issue paying for judgement."
            ]
          },
          {
            "Name": "InvalidSuffix",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The provided suffix is too long."
            ]
          },
          {
            "Name": "NotUsernameAuthority",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The sender does not have permission to issue a username."
            ]
          },
          {
            "Name": "NoAllocation",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The authority cannot allocate any more usernames."
            ]
          },
          {
            "Name": "InvalidSignature",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The signature on a username was not valid."
            ]
          },
          {
            "Name": "RequiresSignature",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Setting this username requires a signature, but none was provided."
            ]
          },
          {
            "Name": "InvalidUsername",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "The username does not meet the requirements."
            ]
          },
          {
            "Name": "UsernameTaken",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The username is already taken."
            ]
          },
          {
            "Name": "NoUsername",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "The requested username does not exist."
            ]
          },
          {
            "Name": "NotExpired",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "The username cannot be forcefully removed because it can still be accepted."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "367": {
        "TypeIds": [
          368,
          6
        ],
        "TypeDef": "Tuple"
      },
      "368": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 370
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 369
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "369": {
        "TypeFields": [
          {
            "Name": "delegate",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "proxy_type",
            "TypeName": "ProxyType",
            "TypeId": 41
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "ProxyDefinition"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ProxyType",
            "TypeId": 41
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "370": {
        "TypeId": 369,
        "TypeDef": "Sequence"
      },
      "371": {
        "TypeIds": [
          372,
          6
        ],
        "TypeDef": "Tuple"
      },
      "372": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 374
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 373
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "373": {
        "TypeFields": [
          {
            "Name": "real",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "call_hash",
            "TypeName": "Hash",
            "TypeId": 13
          },
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "Announcement"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Hash",
            "TypeId": 13
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "374": {
        "TypeId": 373,
        "TypeDef": "Sequence"
      },
      "375": {
        "Variants": [
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There are too many proxies registered or too many announcements pending."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proxy registration not found."
            ]
          },
          {
            "Name": "NotProxy",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Sender is not a proxy of the account to be proxied."
            ]
          },
          {
            "Name": "Unproxyable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A call which is incompatible with the proxy type's filter was attempted."
            ]
          },
          {
            "Name": "Duplicate",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Account is already a proxy."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Call may not be made by proxy because it may escalate its privileges."
            ]
          },
          {
            "Name": "Unannounced",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Announcement, if made at all, was made too recently."
            ]
          },
          {
            "Name": "NoSelfProxy",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot add self as proxy."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "376": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 379
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 377
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "377": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 378
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 378
          }
        ],
        "TypeDef": "Variant"
      },
      "378": {
        "TypeFields": [
          {
            "Name": "maybe_id",
            "TypeName": "Option<Name>",
            "TypeId": 32
          },
          {
            "Name": "priority",
            "TypeName": "schedule::Priority",
            "TypeId": 2
          },
          {
            "Name": "call",
            "TypeName": "Call",
            "TypeId": 342
          },
          {
            "Name": "maybe_periodic",
            "TypeName": "Option<schedule::Period<BlockNumber>>",
            "TypeId": 276
          },
          {
            "Name": "origin",
            "TypeName": "PalletsOrigin",
            "TypeId": 222
          }
        ],
        "Path": [
          "pallet_scheduler",
          "Scheduled"
        ],
        "TypeParams": [
          {
            "Name": "Name",
            "TypeId": 1
          },
          {
            "Name": "Call",
            "TypeId": 342
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PalletsOrigin",
            "TypeId": 222
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "379": {
        "TypeId": 377,
        "TypeDef": "Sequence"
      },
      "380": {
        "TypeFields": [
          {
            "Name": "total_retries",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "remaining",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "period",
            "TypeName": "Period",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_scheduler",
          "RetryConfig"
        ],
        "TypeParams": [
          {
            "Name": "Period",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "381": {
        "Variants": [
          {
            "Name": "FailedToSchedule",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to schedule a call"
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot find the scheduled call."
            ]
          },
          {
            "Name": "TargetBlockNumberInPast",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Given target block number is in the past."
            ]
          },
          {
            "Name": "RescheduleNoChange",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Reschedule failed because it does not change scheduled time."
            ]
          },
          {
            "Name": "Named",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Attempt to use a non-named function on a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "382": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "(AccountId, Balance)",
                "TypeId": 383
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "Option<(AccountId, Balance)>",
                "TypeId": 384
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "len",
                "TypeName": "Option<u32>",
                "TypeId": 182
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "OldRequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "383": {
        "TypeIds": [
          0,
          6
        ],
        "TypeDef": "Tuple"
      },
      "384": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 383
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 383
          }
        ],
        "TypeDef": "Variant"
      },
      "385": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "ticket",
                "TypeName": "(AccountId, Ticket)",
                "TypeId": 387
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "maybe_ticket",
                "TypeName": "Option<(AccountId, Ticket)>",
                "TypeId": 388
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "maybe_len",
                "TypeName": "Option<u32>",
                "TypeId": 182
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "RequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Ticket",
            "TypeId": 386
          }
        ],
        "TypeDef": "Variant"
      },
      "386": {
        "TypeFields": [
          {
            "TypeName": "F::Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "fungible",
          "HoldConsideration"
        ],
        "TypeParams": [
          {
            "Name": "A"
          },
          {
            "Name": "F"
          },
          {
            "Name": "R"
          },
          {
            "Name": "D"
          }
        ],
        "TypeDef": "Composite"
      },
      "387": {
        "TypeIds": [
          0,
          386
        ],
        "TypeDef": "Tuple"
      },
      "388": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 387
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 387
          }
        ],
        "TypeDef": "Variant"
      },
      "389": {
        "TypeIds": [
          13,
          4
        ],
        "TypeDef": "Tuple"
      },
      "390": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "391": {
        "Variants": [
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Preimage is too large to store on-chain."
            ]
          },
          {
            "Name": "AlreadyNoted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Preimage has already been noted on-chain."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The user is not authorized to perform this action."
            ]
          },
          {
            "Name": "NotNoted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The preimage cannot be removed since it has not yet been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A preimage may not be removed when there are outstanding requests."
            ]
          },
          {
            "Name": "NotRequested",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The preimage request cannot be removed since no outstanding requests exist."
            ]
          },
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."
            ]
          },
          {
            "Name": "TooFew",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too few hashes were requested to be upgraded (i.e. zero)."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "392": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 395
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 393
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "393": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 85
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reasons",
            "TypeName": "Reasons",
            "TypeId": 394
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "394": {
        "Variants": [
          {
            "Name": "Fee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Misc",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "Reasons"
        ],
        "TypeDef": "Variant"
      },
      "395": {
        "TypeId": 393,
        "TypeDef": "Sequence"
      },
      "396": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 398
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 397
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "397": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 85
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 85
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "398": {
        "TypeId": 397,
        "TypeDef": "Sequence"
      },
      "399": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 403
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 400
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "400": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "Id",
            "TypeId": 401
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "IdAmount"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 401
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "401": {
        "Variants": [
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::HoldReason",
                "TypeId": 402
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "ajuna_runtime",
          "RuntimeHoldReason"
        ],
        "TypeDef": "Variant"
      },
      "402": {
        "Variants": [
          {
            "Name": "Preimage",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "HoldReason"
        ],
        "TypeDef": "Variant"
      },
      "403": {
        "TypeId": 400,
        "TypeDef": "Sequence"
      },
      "404": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 406
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 405
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "405": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "Id",
            "TypeId": 36
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "IdAmount"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 36
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "406": {
        "TypeId": 405,
        "TypeDef": "Sequence"
      },
      "407": {
        "Variants": [
          {
            "Name": "VestingBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting balance too high to send value."
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account liquidity restrictions prevent withdrawal."
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Balance too low to send value."
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Value too low to create account due to existential deposit."
            ]
          },
          {
            "Name": "Expendability",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account."
            ]
          },
          {
            "Name": "ExistingVestingSchedule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A vesting schedule already exists for this account."
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist."
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Number of named reserves exceed `MaxReserves`."
            ]
          },
          {
            "Name": "TooManyHolds",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
            ]
          },
          {
            "Name": "TooManyFreezes",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Number of freezes exceed `MaxFreezes`."
            ]
          },
          {
            "Name": "IssuanceDeactivated",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The issuance cannot be modified since it is already deactivated."
            ]
          },
          {
            "Name": "DeltaZero",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The delta cannot be zero."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "408": {
        "Variants": [
          {
            "Name": "V1Ancient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "409": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 281
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 50
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "410": {
        "Variants": [
          {
            "Name": "ZeroVestingPeriod",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting period is zero"
            ]
          },
          {
            "Name": "ZeroVestingPeriodCount",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Number of vests is zero"
            ]
          },
          {
            "Name": "InsufficientBalanceToLock",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Insufficient amount of balance to lock"
            ]
          },
          {
            "Name": "TooManyVestingSchedules",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "This account have too many vesting schedules"
            ]
          },
          {
            "Name": "AmountLow",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The vested transfer amount is too low"
            ]
          },
          {
            "Name": "MaxVestingSchedulesExceeded",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Failed because the maximum vesting schedules was exceeded"
            ]
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "411": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 53
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "412": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 414
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 413
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "413": {
        "TypeFields": [
          {
            "Name": "who",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_collator_selection",
          "pallet",
          "CandidateInfo"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "414": {
        "TypeId": 413,
        "TypeDef": "Sequence"
      },
      "415": {
        "Variants": [
          {
            "Name": "TooManyCandidates",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The pallet has too many candidates."
            ]
          },
          {
            "Name": "TooFewEligibleCollators",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Leaving would result in too few candidates."
            ]
          },
          {
            "Name": "AlreadyCandidate",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Account is already a candidate."
            ]
          },
          {
            "Name": "NotCandidate",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Account is not a candidate."
            ]
          },
          {
            "Name": "TooManyInvulnerables",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many Invulnerables."
            ]
          },
          {
            "Name": "AlreadyInvulnerable",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Account is already an Invulnerable."
            ]
          },
          {
            "Name": "NotInvulnerable",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Account is not an Invulnerable."
            ]
          },
          {
            "Name": "NoAssociatedValidatorId",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Account has no associated validator ID."
            ]
          },
          {
            "Name": "ValidatorNotRegistered",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Validator ID is not yet registered."
            ]
          },
          {
            "Name": "InsertToCandidateListFailed",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Could not insert in the candidate list."
            ]
          },
          {
            "Name": "RemoveFromCandidateListFailed",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Could not remove from the candidate list."
            ]
          },
          {
            "Name": "DepositTooLow",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "New deposit amount would be below the minimum candidacy bond."
            ]
          },
          {
            "Name": "UpdateCandidateListFailed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Could not update the candidate list."
            ]
          },
          {
            "Name": "InsufficientBond",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Deposit amount is too low to take the target's slot in the candidate list."
            ]
          },
          {
            "Name": "TargetIsNotCandidate",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The target account to be replaced in the candidate list is not a candidate."
            ]
          },
          {
            "Name": "IdenticalDeposit",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The updated deposit amount is equal to the amount already reserved."
            ]
          },
          {
            "Name": "InvalidUnreserve",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Cannot lower candidacy bond while occupying a future collator slot in the list."
            ]
          }
        ],
        "Path": [
          "pallet_collator_selection",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "416": {
        "TypeId": 417,
        "TypeDef": "Sequence"
      },
      "417": {
        "TypeIds": [
          0,
          284
        ],
        "TypeDef": "Tuple"
      },
      "418": {
        "TypeId": 4,
        "TypeDef": "Sequence"
      },
      "419": {
        "TypeIds": [
          420,
          14
        ],
        "TypeDef": "Tuple"
      },
      "420": {
        "TypeFields": [
          {
            "TypeName": "[u8; 4]",
            "TypeId": 18
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "KeyTypeId"
        ],
        "TypeDef": "Composite"
      },
      "421": {
        "Variants": [
          {
            "Name": "InvalidProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Invalid ownership proof."
            ]
          },
          {
            "Name": "NoAssociatedValidatorId",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No associated validator ID for account."
            ]
          },
          {
            "Name": "DuplicatedKey",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Registered duplicate key."
            ]
          },
          {
            "Name": "NoKeys",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "No keys are associated with this account."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Key setting account is not live, so it's impossible to associate keys."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the session pallet."
        ]
      },
      "422": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 423
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 285
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "423": {
        "TypeId": 285,
        "TypeDef": "Sequence"
      },
      "424": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "Slot"
        ],
        "TypeDef": "Composite"
      },
      "425": {
        "TypeIds": [
          424,
          4
        ],
        "TypeDef": "Tuple"
      },
      "426": {
        "TypeFields": [
          {
            "TypeName": "BTreeSet<T>",
            "TypeId": 427
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_set",
          "BoundedBTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 133
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "427": {
        "TypeFields": [
          {
            "TypeId": 428
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 133
          }
        ],
        "TypeDef": "Composite"
      },
      "428": {
        "TypeId": 133,
        "TypeDef": "Sequence"
      },
      "429": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 432
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 430
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "430": {
        "TypeFields": [
          {
            "Name": "recipient",
            "TypeName": "ParaId",
            "TypeId": 133
          },
          {
            "Name": "state",
            "TypeName": "OutboundState",
            "TypeId": 431
          },
          {
            "Name": "signals_exist",
            "TypeName": "bool",
            "TypeId": 8
          },
          {
            "Name": "first_index",
            "TypeName": "u16",
            "TypeId": 42
          },
          {
            "Name": "last_index",
            "TypeName": "u16",
            "TypeId": 42
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundChannelDetails"
        ],
        "TypeDef": "Composite"
      },
      "431": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Suspended",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "OutboundState"
        ],
        "TypeDef": "Variant"
      },
      "432": {
        "TypeId": 430,
        "TypeDef": "Sequence"
      },
      "433": {
        "TypeIds": [
          133,
          42
        ],
        "TypeDef": "Tuple"
      },
      "434": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "435": {
        "TypeFields": [
          {
            "Name": "suspend_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "drop_threshold",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "resume_threshold",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "QueueConfigData"
        ],
        "TypeDef": "Composite"
      },
      "436": {
        "Variants": [
          {
            "Name": "BadQueueConfig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Setting the queue config failed since one of its values was invalid."
            ]
          },
          {
            "Name": "AlreadySuspended",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The execution is already suspended."
            ]
          },
          {
            "Name": "AlreadyResumed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The execution is already resumed."
            ]
          },
          {
            "Name": "TooManyActiveOutboundChannels",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too many active outbound channels."
            ]
          },
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The message is too big."
            ]
          }
        ],
        "Path": [
          "cumulus_pallet_xcmp_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "437": {
        "Variants": [
          {
            "Name": "Pending",
            "TypeFields": [
              {
                "Name": "responder",
                "TypeName": "VersionedLocation",
                "TypeId": 129
              },
              {
                "Name": "maybe_match_querier",
                "TypeName": "Option<VersionedLocation>",
                "TypeId": 438
              },
              {
                "Name": "maybe_notify",
                "TypeName": "Option<(u8, u8)>",
                "TypeId": 439
              },
              {
                "Name": "timeout",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "VersionNotifier",
            "TypeFields": [
              {
                "Name": "origin",
                "TypeName": "VersionedLocation",
                "TypeId": 129
              },
              {
                "Name": "is_active",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ready",
            "TypeFields": [
              {
                "Name": "response",
                "TypeName": "VersionedResponse",
                "TypeId": 441
              },
              {
                "Name": "at",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "QueryStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "438": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 129
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 129
          }
        ],
        "TypeDef": "Variant"
      },
      "439": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 440
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 440
          }
        ],
        "TypeDef": "Variant"
      },
      "440": {
        "TypeIds": [
          2,
          2
        ],
        "TypeDef": "Tuple"
      },
      "441": {
        "Variants": [
          {
            "Name": "V2",
            "TypeFields": [
              {
                "TypeName": "v2::Response",
                "TypeId": 292
              }
            ],
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": [
              {
                "TypeName": "v3::Response",
                "TypeId": 304
              }
            ],
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": [
              {
                "TypeName": "v4::Response",
                "TypeId": 87
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "xcm",
          "VersionedResponse"
        ],
        "TypeDef": "Variant"
      },
      "442": {
        "TypeIds": [
          4,
          129
        ],
        "TypeDef": "Tuple"
      },
      "443": {
        "TypeIds": [
          12,
          10,
          4
        ],
        "TypeDef": "Tuple"
      },
      "444": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 446
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 445
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "445": {
        "TypeIds": [
          129,
          4
        ],
        "TypeDef": "Tuple"
      },
      "446": {
        "TypeId": 445,
        "TypeDef": "Sequence"
      },
      "447": {
        "Variants": [
          {
            "Name": "MigrateSupportedVersion",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "MigrateVersionNotifiers",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotifyCurrentTargets",
            "TypeFields": [
              {
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 448
              }
            ],
            "Index": 2
          },
          {
            "Name": "MigrateAndNotifyOldTargets",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "VersionMigrationStage"
        ],
        "TypeDef": "Variant"
      },
      "448": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 14
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 14
          }
        ],
        "TypeDef": "Variant"
      },
      "449": {
        "TypeIds": [
          4,
          0,
          326
        ],
        "TypeDef": "Tuple"
      },
      "450": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "u128",
            "TypeId": 6
          },
          {
            "Name": "owner",
            "TypeName": "VersionedLocation",
            "TypeId": 129
          },
          {
            "Name": "locker",
            "TypeName": "VersionedLocation",
            "TypeId": 129
          },
          {
            "Name": "consumers",
            "TypeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>",
            "TypeId": 451
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "RemoteLockedFungibleRecord"
        ],
        "TypeParams": [
          {
            "Name": "ConsumerIdentifier",
            "TypeId": 36
          },
          {
            "Name": "MaxConsumers"
          }
        ],
        "TypeDef": "Composite"
      },
      "451": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 453
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 452
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "452": {
        "TypeIds": [
          36,
          6
        ],
        "TypeDef": "Tuple"
      },
      "453": {
        "TypeId": 452,
        "TypeDef": "Sequence"
      },
      "454": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 456
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 455
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "455": {
        "TypeIds": [
          6,
          129
        ],
        "TypeDef": "Tuple"
      },
      "456": {
        "TypeId": 455,
        "TypeDef": "Sequence"
      },
      "457": {
        "Variants": [
          {
            "Name": "Unreachable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The desired destination was unreachable, generally because there is a no way of routing",
              "to it."
            ]
          },
          {
            "Name": "SendFailure",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "There was some other issue (i.e. not to do with routing) in sending the message.",
              "Perhaps a lack of space for buffering the message."
            ]
          },
          {
            "Name": "Filtered",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The message execution fails the filter."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The destination `Location` provided cannot be inverted."
            ]
          },
          {
            "Name": "Empty",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The assets to be sent are empty."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the destination chain."
            ]
          },
          {
            "Name": "TooManyAssets",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too many assets have been attempted for transfer."
            ]
          },
          {
            "Name": "InvalidOrigin",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Origin is invalid for sending."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The version of the `Versioned` value used is not able to be interpreted."
            ]
          },
          {
            "Name": "BadLocation",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The given location could not be used (e.g. because it cannot be expressed in the",
              "desired version of XCM)."
            ]
          },
          {
            "Name": "NoSubscription",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referenced subscription could not be found."
            ]
          },
          {
            "Name": "AlreadySubscribed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The location is invalid since it already has a subscription from us."
            ]
          },
          {
            "Name": "CannotCheckOutTeleport",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Could not check-out the assets for teleportation to the destination chain."
            ]
          },
          {
            "Name": "LowBalance",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The owner does not own (all) of the asset that they wish to do the operation on."
            ]
          },
          {
            "Name": "TooManyLocks",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset owner has too many locks on the asset."
            ]
          },
          {
            "Name": "AccountNotSovereign",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The given account is not an identifiable sovereign account for any location."
            ]
          },
          {
            "Name": "FeesNotMet",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The operation required fees to be paid which the initiator could not meet."
            ]
          },
          {
            "Name": "LockNotFound",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "A remote lock with the corresponding data could not be found."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The unlock operation cannot succeed because there are still consumers of the lock."
            ]
          },
          {
            "Name": "InvalidAssetUnknownReserve",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Invalid asset, reserve chain could not be determined for it."
            ]
          },
          {
            "Name": "InvalidAssetUnsupportedReserve",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Invalid asset, do not support remote asset reserves with different fees reserves."
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "Too many assets with different reserve locations have been attempted for transfer."
            ]
          },
          {
            "Name": "LocalExecutionIncomplete",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Local XCM execution incomplete."
            ]
          }
        ],
        "Path": [
          "pallet_xcm",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "458": {
        "TypeFields": [
          {
            "Name": "begin",
            "TypeName": "PageIndex",
            "TypeId": 4
          },
          {
            "Name": "end",
            "TypeName": "PageIndex",
            "TypeId": 4
          },
          {
            "Name": "count",
            "TypeName": "PageIndex",
            "TypeId": 4
          },
          {
            "Name": "ready_neighbours",
            "TypeName": "Option<Neighbours<MessageOrigin>>",
            "TypeId": 459
          },
          {
            "Name": "message_count",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "size",
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "pallet_message_queue",
          "BookState"
        ],
        "TypeParams": [
          {
            "Name": "MessageOrigin",
            "TypeId": 132
          }
        ],
        "TypeDef": "Composite"
      },
      "459": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 460
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 460
          }
        ],
        "TypeDef": "Variant"
      },
      "460": {
        "TypeFields": [
          {
            "Name": "prev",
            "TypeName": "MessageOrigin",
            "TypeId": 132
          },
          {
            "Name": "next",
            "TypeName": "MessageOrigin",
            "TypeId": 132
          }
        ],
        "Path": [
          "pallet_message_queue",
          "Neighbours"
        ],
        "TypeParams": [
          {
            "Name": "MessageOrigin",
            "TypeId": 132
          }
        ],
        "TypeDef": "Composite"
      },
      "461": {
        "TypeIds": [
          132,
          4
        ],
        "TypeDef": "Tuple"
      },
      "462": {
        "TypeFields": [
          {
            "Name": "remaining",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "remaining_size",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "first_index",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "first",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "last",
            "TypeName": "Size",
            "TypeId": 4
          },
          {
            "Name": "heap",
            "TypeName": "BoundedVec<u8, IntoU32<HeapSize, Size>>",
            "TypeId": 463
          }
        ],
        "Path": [
          "pallet_message_queue",
          "Page"
        ],
        "TypeParams": [
          {
            "Name": "Size",
            "TypeId": 4
          },
          {
            "Name": "HeapSize"
          }
        ],
        "TypeDef": "Composite"
      },
      "463": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "464": {
        "Variants": [
          {
            "Name": "NotReapable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Page is not reapable because it has items remaining to be processed and is not old",
              "enough."
            ]
          },
          {
            "Name": "NoPage",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Page to be reaped does not exist."
            ]
          },
          {
            "Name": "NoMessage",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The referenced message could not be found."
            ]
          },
          {
            "Name": "AlreadyProcessed",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The message was already processed and cannot be processed again."
            ]
          },
          {
            "Name": "Queued",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The message is queued for future execution."
            ]
          },
          {
            "Name": "InsufficientWeight",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "There is temporarily not enough weight to continue servicing messages."
            ]
          },
          {
            "Name": "TemporarilyUnprocessable",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "This message is temporarily unprocessable.",
              "",
              "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
              "retrying."
            ]
          },
          {
            "Name": "QueuePaused",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The queue is paused and no message can be executed from it.",
              "",
              "This can change at any time and may resolve in the future by re-trying."
            ]
          },
          {
            "Name": "RecursiveDisallowed",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Another call is in progress and needs to finish before this call can happen."
            ]
          }
        ],
        "Path": [
          "pallet_message_queue",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "465": {
        "Variants": [
          {
            "Name": "AssetHasNoReserve",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Asset has no reserve location."
            ]
          },
          {
            "Name": "NotCrossChainTransfer",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not cross-chain transfer."
            ]
          },
          {
            "Name": "InvalidDest",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Invalid transfer destination."
            ]
          },
          {
            "Name": "NotCrossChainTransferableCurrency",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Currency is not cross-chain transferable."
            ]
          },
          {
            "Name": "UnweighableMessage",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The message's weight could not be determined."
            ]
          },
          {
            "Name": "XcmExecutionFailed",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "XCM execution failed."
            ]
          },
          {
            "Name": "CannotReanchor",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Could not re-anchor the assets to declare the fees for the",
              "destination chain."
            ]
          },
          {
            "Name": "InvalidAncestry",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Could not get ancestry of asset reserve location."
            ]
          },
          {
            "Name": "InvalidAsset",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The Asset is invalid."
            ]
          },
          {
            "Name": "DestinationNotInvertible",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The destination `Location` provided cannot be inverted."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The version of the `Versioned` value used is not able to be",
              "interpreted."
            ]
          },
          {
            "Name": "DistinctReserveForAssetAndFee",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "We tried sending distinct asset and fee but they have different",
              "reserve chains."
            ]
          },
          {
            "Name": "ZeroFee",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The fee is zero."
            ]
          },
          {
            "Name": "ZeroAmount",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The transfering asset amount is zero."
            ]
          },
          {
            "Name": "TooManyAssetsBeingSent",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The number of assets to be sent is over the maximum."
            ]
          },
          {
            "Name": "AssetIndexNonExistent",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The specified index does not exist in a Assets struct."
            ]
          },
          {
            "Name": "FeeNotEnough",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Fee is not enough."
            ]
          },
          {
            "Name": "NotSupportedLocation",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Not supported Location"
            ]
          },
          {
            "Name": "MinXcmFeeNotDefined",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "MinXcmFee not registered for certain reserve location"
            ]
          },
          {
            "Name": "RateLimited",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Asset transfer is limited by RateLimiter."
            ]
          }
        ],
        "Path": [
          "orml_xtokens",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "466": {
        "Variants": [
          {
            "Name": "Unreachable",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The message and destination combination was not recognized as being",
              "reachable."
            ]
          },
          {
            "Name": "SendFailure",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The message and destination was recognized as being reachable but",
              "the operation could not be completed."
            ]
          },
          {
            "Name": "BadVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The version of the `Versioned` value used is not able to be",
              "interpreted."
            ]
          }
        ],
        "Path": [
          "orml_xcm",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "467": {
        "TypeFields": [
          {
            "Name": "proposer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_treasury",
          "Proposal"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "468": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 418
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "469": {
        "TypeFields": [
          {
            "Name": "asset_kind",
            "TypeName": "AssetKind",
            "TypeId": 36
          },
          {
            "Name": "amount",
            "TypeName": "AssetBalance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "Beneficiary",
            "TypeId": 0
          },
          {
            "Name": "valid_from",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "expire_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "status",
            "TypeName": "PaymentState<PaymentId>",
            "TypeId": 470
          }
        ],
        "Path": [
          "pallet_treasury",
          "SpendStatus"
        ],
        "TypeParams": [
          {
            "Name": "AssetKind",
            "TypeId": 36
          },
          {
            "Name": "AssetBalance",
            "TypeId": 6
          },
          {
            "Name": "Beneficiary",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PaymentId",
            "TypeId": 36
          }
        ],
        "TypeDef": "Composite"
      },
      "470": {
        "Variants": [
          {
            "Name": "Pending",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "Id",
                "TypeId": 36
              }
            ],
            "Index": 1
          },
          {
            "Name": "Failed",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_treasury",
          "PaymentState"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 36
          }
        ],
        "TypeDef": "Variant"
      },
      "471": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Permill"
        ],
        "TypeDef": "Composite"
      },
      "472": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "473": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 85
          }
        ],
        "Path": [
          "frame_support",
          "PalletId"
        ],
        "TypeDef": "Composite"
      },
      "474": {
        "Variants": [
          {
            "Name": "InsufficientProposersBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Proposer's balance is too low."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No proposal, bounty or spend at that index."
            ]
          },
          {
            "Name": "TooManyApprovals",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many approvals in the queue."
            ]
          },
          {
            "Name": "InsufficientPermission",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The spend origin is valid but the amount it is allowed to spend is lower than the",
              "amount to be spent."
            ]
          },
          {
            "Name": "ProposalNotApproved",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal has not been approved."
            ]
          },
          {
            "Name": "FailedToConvertBalance",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The balance of the asset kind is not convertible to the balance of the native asset."
            ]
          },
          {
            "Name": "SpendExpired",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The spend has expired and cannot be claimed."
            ]
          },
          {
            "Name": "EarlyPayout",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The spend is not yet eligible for payout."
            ]
          },
          {
            "Name": "AlreadyAttempted",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The payment has already been attempted."
            ]
          },
          {
            "Name": "PayoutError",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "There was some issue with the mechanism of payment."
            ]
          },
          {
            "Name": "NotAttempted",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The payout was not yet attempted/claimed."
            ]
          },
          {
            "Name": "Inconclusive",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The payment has neither failed nor succeeded yet."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the treasury pallet."
        ]
      },
      "475": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 150
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 13
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "476": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "ProposalIndex",
            "TypeId": 4
          },
          {
            "Name": "threshold",
            "TypeName": "MemberCount",
            "TypeId": 4
          },
          {
            "Name": "ayes",
            "TypeName": "Vec<AccountId>",
            "TypeId": 53
          },
          {
            "Name": "nays",
            "TypeName": "Vec<AccountId>",
            "TypeId": 53
          },
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_collective",
          "Votes"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "477": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          },
          {
            "Name": "PrimeAccountNotMember",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Prime account is not a member"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "478": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 53
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "479": {
        "Variants": [
          {
            "Name": "AlreadyMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Already a member."
            ]
          },
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not a member."
            ]
          },
          {
            "Name": "TooManyMembers",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many members."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "480": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          },
          {
            "Name": "PrimeAccountNotMember",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Prime account is not a member"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "481": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 53
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "482": {
        "Variants": [
          {
            "Name": "AlreadyMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Already a member."
            ]
          },
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not a member."
            ]
          },
          {
            "Name": "TooManyMembers",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many members."
            ]
          }
        ],
        "Path": [
          "pallet_membership",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "483": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 485
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 484
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "484": {
        "TypeIds": [
          4,
          342,
          0
        ],
        "TypeDef": "Tuple"
      },
      "485": {
        "TypeId": 484,
        "TypeDef": "Sequence"
      },
      "486": {
        "TypeIds": [
          487,
          6
        ],
        "TypeDef": "Tuple"
      },
      "487": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 53
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "488": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<BlockNumber, Proposal, Balance>",
                "TypeId": 489
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finished",
            "TypeFields": [
              {
                "Name": "approved",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "end",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 342
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "489": {
        "TypeFields": [
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "proposal",
            "TypeName": "Proposal",
            "TypeId": 342
          },
          {
            "Name": "threshold",
            "TypeName": "VoteThreshold",
            "TypeId": 143
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "tally",
            "TypeName": "Tally<Balance>",
            "TypeId": 490
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 342
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "490": {
        "TypeFields": [
          {
            "Name": "ayes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "nays",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "turnout",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "491": {
        "Variants": [
          {
            "Name": "Direct",
            "TypeFields": [
              {
                "Name": "votes",
                "TypeName": "BoundedVec<(ReferendumIndex, AccountVote<Balance>), MaxVotes>",
                "TypeId": 492
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 495
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 496
              }
            ],
            "Index": 0
          },
          {
            "Name": "Delegating",
            "TypeFields": [
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "target",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 345
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 495
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 496
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Voting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Variant"
      },
      "492": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 494
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 493
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "493": {
        "TypeIds": [
          4,
          144
        ],
        "TypeDef": "Tuple"
      },
      "494": {
        "TypeId": 493,
        "TypeDef": "Sequence"
      },
      "495": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "capital",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Delegations"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "496": {
        "TypeFields": [
          {
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "PriorLock"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "497": {
        "TypeIds": [
          342,
          143
        ],
        "TypeDef": "Tuple"
      },
      "498": {
        "TypeIds": [
          4,
          487
        ],
        "TypeDef": "Tuple"
      },
      "499": {
        "Variants": [
          {
            "Name": "ValueLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Value too low"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proposal does not exist"
            ]
          },
          {
            "Name": "AlreadyCanceled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Cannot cancel the same proposal twice"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Proposal already made"
            ]
          },
          {
            "Name": "ProposalBlacklisted",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal still blacklisted"
            ]
          },
          {
            "Name": "NotSimpleMajority",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Next external proposal not simple majority"
            ]
          },
          {
            "Name": "InvalidHash",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid hash"
            ]
          },
          {
            "Name": "NoProposal",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No external proposal"
            ]
          },
          {
            "Name": "AlreadyVetoed",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Identity may not veto a proposal twice"
            ]
          },
          {
            "Name": "ReferendumInvalid",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Vote given for invalid referendum"
            ]
          },
          {
            "Name": "NoneWaiting",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No proposals waiting"
            ]
          },
          {
            "Name": "NotVoter",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The given account did not vote on the referendum."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "Name": "AlreadyDelegating",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The account is already delegating."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "Name": "NotDelegating",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The account is not currently delegating."
            ]
          },
          {
            "Name": "VotesExist",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed, either through `unvote` or `reap_vote`."
            ]
          },
          {
            "Name": "InstantNotAllowed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The instant referendum origin is currently disallowed."
            ]
          },
          {
            "Name": "Nonsense",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "Name": "WrongUpperBound",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Invalid upper bound."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Maximum number of votes reached."
            ]
          },
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Maximum number of items reached."
            ]
          },
          {
            "Name": "VotingPeriodLow",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Voting period too low"
            ]
          },
          {
            "Name": "PreimageNotExist",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The preimage does not exist."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "500": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "issuer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "admin",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "freezer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "supply",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "min_balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "is_sufficient",
            "TypeName": "bool",
            "TypeId": 8
          },
          {
            "Name": "accounts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "approvals",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "status",
            "TypeName": "AssetStatus",
            "TypeId": 501
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetDetails"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "501": {
        "Variants": [
          {
            "Name": "Live",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Destroying",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetStatus"
        ],
        "TypeDef": "Variant"
      },
      "502": {
        "TypeIds": [
          4,
          0
        ],
        "TypeDef": "Tuple"
      },
      "503": {
        "TypeFields": [
          {
            "Name": "balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "status",
            "TypeName": "AccountStatus",
            "TypeId": 504
          },
          {
            "Name": "reason",
            "TypeName": "ExistenceReason<DepositBalance, AccountId>",
            "TypeId": 505
          },
          {
            "Name": "extra",
            "TypeName": "Extra",
            "TypeId": 36
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetAccount"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "Extra",
            "TypeId": 36
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "504": {
        "Variants": [
          {
            "Name": "Liquid",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Blocked",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AccountStatus"
        ],
        "TypeDef": "Variant"
      },
      "505": {
        "Variants": [
          {
            "Name": "Consumer",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Sufficient",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DepositHeld",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2
          },
          {
            "Name": "DepositRefunded",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "DepositFrom",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "ExistenceReason"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "506": {
        "TypeIds": [
          4,
          0,
          0
        ],
        "TypeDef": "Tuple"
      },
      "507": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "Approval"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "508": {
        "TypeFields": [
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "name",
            "TypeName": "BoundedString",
            "TypeId": 509
          },
          {
            "Name": "symbol",
            "TypeName": "BoundedString",
            "TypeId": 509
          },
          {
            "Name": "decimals",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 8
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetMetadata"
        ],
        "TypeParams": [
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "BoundedString",
            "TypeId": 509
          }
        ],
        "TypeDef": "Composite"
      },
      "509": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "510": {
        "Variants": [
          {
            "Name": "BalanceLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account balance must be greater than or equal to the transfer amount."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The account to alter does not exist."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The given asset ID is unknown."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The origin account is frozen."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The asset ID is already taken."
            ]
          },
          {
            "Name": "BadWitness",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid witness data given."
            ]
          },
          {
            "Name": "MinBalanceZero",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Minimum balance should be non-zero."
            ]
          },
          {
            "Name": "UnavailableConsumer",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Unable to increment the consumer reference counters on the account. Either no provider",
              "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
              "fewer then the maximum number of consumers has been reached."
            ]
          },
          {
            "Name": "BadMetadata",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Invalid metadata given."
            ]
          },
          {
            "Name": "Unapproved",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "Name": "WouldDie",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The source account would not survive the transfer and it needs to stay alive."
            ]
          },
          {
            "Name": "AlreadyExists",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The asset-account already exists."
            ]
          },
          {
            "Name": "NoDeposit",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The asset-account doesn't have an associated deposit."
            ]
          },
          {
            "Name": "WouldBurn",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The operation would result in funds being burned."
            ]
          },
          {
            "Name": "LiveAsset",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset is a live asset and is actively being used. Usually emit for operations such",
              "as `start_destroy` which require the asset to be in a destroying state."
            ]
          },
          {
            "Name": "AssetNotLive",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The asset is not live, and likely being destroyed."
            ]
          },
          {
            "Name": "IncorrectStatus",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The asset status is not the expected status."
            ]
          },
          {
            "Name": "NotFrozen",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The asset should be frozen before the given operation."
            ]
          },
          {
            "Name": "CallbackFailed",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Callback action resulted in error"
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "511": {
        "Variants": [
          {
            "Name": "AssetAlreadyRegistered",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The Asset ID is already registered"
            ]
          },
          {
            "Name": "AssetDoesNotExist",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The Asset ID does not exist"
            ]
          },
          {
            "Name": "AssetIsNotRegistered",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The Asset ID is not registered"
            ]
          },
          {
            "Name": "WrongLocation",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Invalid Location"
            ]
          }
        ],
        "Path": [
          "pallet_asset_registry",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "512": {
        "TypeFields": [
          {
            "TypeId": 14
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 230
          },
          {
            "Name": "Call",
            "TypeId": 219
          },
          {
            "Name": "Signature",
            "TypeId": 270
          },
          {
            "Name": "Extra",
            "TypeId": 513
          }
        ],
        "TypeDef": "Composite"
      },
      "513": {
        "TypeIds": [
          514,
          515,
          516,
          517,
          518,
          520,
          521,
          522,
          523
        ],
        "TypeDef": "Tuple"
      },
      "514": {
        "Path": [
          "frame_system",
          "extensions",
          "check_non_zero_sender",
          "CheckNonZeroSender"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "515": {
        "Path": [
          "frame_system",
          "extensions",
          "check_spec_version",
          "CheckSpecVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "516": {
        "Path": [
          "frame_system",
          "extensions",
          "check_tx_version",
          "CheckTxVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "517": {
        "Path": [
          "frame_system",
          "extensions",
          "check_genesis",
          "CheckGenesis"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "518": {
        "TypeFields": [
          {
            "TypeName": "Era",
            "TypeId": 519
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_mortality",
          "CheckMortality"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "519": {
        "Variants": [
          {
            "Name": "Immortal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mortal1",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "Mortal2",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 2
          },
          {
            "Name": "Mortal3",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "Mortal4",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "Mortal5",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "Mortal6",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "Mortal7",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "Mortal8",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "Mortal9",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "Mortal10",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "Mortal11",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 11
          },
          {
            "Name": "Mortal12",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 12
          },
          {
            "Name": "Mortal13",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 13
          },
          {
            "Name": "Mortal14",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 14
          },
          {
            "Name": "Mortal15",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 15
          },
          {
            "Name": "Mortal16",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 16
          },
          {
            "Name": "Mortal17",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 17
          },
          {
            "Name": "Mortal18",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 18
          },
          {
            "Name": "Mortal19",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 19
          },
          {
            "Name": "Mortal20",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 20
          },
          {
            "Name": "Mortal21",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 21
          },
          {
            "Name": "Mortal22",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 22
          },
          {
            "Name": "Mortal23",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 23
          },
          {
            "Name": "Mortal24",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 24
          },
          {
            "Name": "Mortal25",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 25
          },
          {
            "Name": "Mortal26",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 26
          },
          {
            "Name": "Mortal27",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 27
          },
          {
            "Name": "Mortal28",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 28
          },
          {
            "Name": "Mortal29",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 29
          },
          {
            "Name": "Mortal30",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 30
          },
          {
            "Name": "Mortal31",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 31
          },
          {
            "Name": "Mortal32",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 32
          },
          {
            "Name": "Mortal33",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 33
          },
          {
            "Name": "Mortal34",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 34
          },
          {
            "Name": "Mortal35",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 35
          },
          {
            "Name": "Mortal36",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 36
          },
          {
            "Name": "Mortal37",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 37
          },
          {
            "Name": "Mortal38",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 38
          },
          {
            "Name": "Mortal39",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 39
          },
          {
            "Name": "Mortal40",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 40
          },
          {
            "Name": "Mortal41",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 41
          },
          {
            "Name": "Mortal42",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 42
          },
          {
            "Name": "Mortal43",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 43
          },
          {
            "Name": "Mortal44",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 44
          },
          {
            "Name": "Mortal45",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 45
          },
          {
            "Name": "Mortal46",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 46
          },
          {
            "Name": "Mortal47",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 47
          },
          {
            "Name": "Mortal48",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 48
          },
          {
            "Name": "Mortal49",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 49
          },
          {
            "Name": "Mortal50",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 50
          },
          {
            "Name": "Mortal51",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 51
          },
          {
            "Name": "Mortal52",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 52
          },
          {
            "Name": "Mortal53",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 53
          },
          {
            "Name": "Mortal54",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 54
          },
          {
            "Name": "Mortal55",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 55
          },
          {
            "Name": "Mortal56",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 56
          },
          {
            "Name": "Mortal57",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 57
          },
          {
            "Name": "Mortal58",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 58
          },
          {
            "Name": "Mortal59",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 59
          },
          {
            "Name": "Mortal60",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 60
          },
          {
            "Name": "Mortal61",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 61
          },
          {
            "Name": "Mortal62",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 62
          },
          {
            "Name": "Mortal63",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 63
          },
          {
            "Name": "Mortal64",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 64
          },
          {
            "Name": "Mortal65",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 65
          },
          {
            "Name": "Mortal66",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 66
          },
          {
            "Name": "Mortal67",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 67
          },
          {
            "Name": "Mortal68",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 68
          },
          {
            "Name": "Mortal69",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 69
          },
          {
            "Name": "Mortal70",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 70
          },
          {
            "Name": "Mortal71",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 71
          },
          {
            "Name": "Mortal72",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 72
          },
          {
            "Name": "Mortal73",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 73
          },
          {
            "Name": "Mortal74",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 74
          },
          {
            "Name": "Mortal75",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 75
          },
          {
            "Name": "Mortal76",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 76
          },
          {
            "Name": "Mortal77",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 77
          },
          {
            "Name": "Mortal78",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 78
          },
          {
            "Name": "Mortal79",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 79
          },
          {
            "Name": "Mortal80",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 80
          },
          {
            "Name": "Mortal81",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 81
          },
          {
            "Name": "Mortal82",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 82
          },
          {
            "Name": "Mortal83",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 83
          },
          {
            "Name": "Mortal84",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 84
          },
          {
            "Name": "Mortal85",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 85
          },
          {
            "Name": "Mortal86",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 86
          },
          {
            "Name": "Mortal87",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 87
          },
          {
            "Name": "Mortal88",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 88
          },
          {
            "Name": "Mortal89",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 89
          },
          {
            "Name": "Mortal90",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 90
          },
          {
            "Name": "Mortal91",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 91
          },
          {
            "Name": "Mortal92",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 92
          },
          {
            "Name": "Mortal93",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 93
          },
          {
            "Name": "Mortal94",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 94
          },
          {
            "Name": "Mortal95",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 95
          },
          {
            "Name": "Mortal96",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 96
          },
          {
            "Name": "Mortal97",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 97
          },
          {
            "Name": "Mortal98",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 98
          },
          {
            "Name": "Mortal99",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 99
          },
          {
            "Name": "Mortal100",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 100
          },
          {
            "Name": "Mortal101",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 101
          },
          {
            "Name": "Mortal102",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 102
          },
          {
            "Name": "Mortal103",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 103
          },
          {
            "Name": "Mortal104",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 104
          },
          {
            "Name": "Mortal105",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 105
          },
          {
            "Name": "Mortal106",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 106
          },
          {
            "Name": "Mortal107",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 107
          },
          {
            "Name": "Mortal108",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 108
          },
          {
            "Name": "Mortal109",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 109
          },
          {
            "Name": "Mortal110",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 110
          },
          {
            "Name": "Mortal111",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 111
          },
          {
            "Name": "Mortal112",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 112
          },
          {
            "Name": "Mortal113",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 113
          },
          {
            "Name": "Mortal114",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 114
          },
          {
            "Name": "Mortal115",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 115
          },
          {
            "Name": "Mortal116",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 116
          },
          {
            "Name": "Mortal117",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 117
          },
          {
            "Name": "Mortal118",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 118
          },
          {
            "Name": "Mortal119",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 119
          },
          {
            "Name": "Mortal120",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 120
          },
          {
            "Name": "Mortal121",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 121
          },
          {
            "Name": "Mortal122",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 122
          },
          {
            "Name": "Mortal123",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 123
          },
          {
            "Name": "Mortal124",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 124
          },
          {
            "Name": "Mortal125",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 125
          },
          {
            "Name": "Mortal126",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 126
          },
          {
            "Name": "Mortal127",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 127
          },
          {
            "Name": "Mortal128",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 128
          },
          {
            "Name": "Mortal129",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 129
          },
          {
            "Name": "Mortal130",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 130
          },
          {
            "Name": "Mortal131",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 131
          },
          {
            "Name": "Mortal132",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 132
          },
          {
            "Name": "Mortal133",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 133
          },
          {
            "Name": "Mortal134",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 134
          },
          {
            "Name": "Mortal135",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 135
          },
          {
            "Name": "Mortal136",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 136
          },
          {
            "Name": "Mortal137",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 137
          },
          {
            "Name": "Mortal138",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 138
          },
          {
            "Name": "Mortal139",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 139
          },
          {
            "Name": "Mortal140",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 140
          },
          {
            "Name": "Mortal141",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 141
          },
          {
            "Name": "Mortal142",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 142
          },
          {
            "Name": "Mortal143",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 143
          },
          {
            "Name": "Mortal144",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 144
          },
          {
            "Name": "Mortal145",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 145
          },
          {
            "Name": "Mortal146",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 146
          },
          {
            "Name": "Mortal147",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 147
          },
          {
            "Name": "Mortal148",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 148
          },
          {
            "Name": "Mortal149",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 149
          },
          {
            "Name": "Mortal150",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 150
          },
          {
            "Name": "Mortal151",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 151
          },
          {
            "Name": "Mortal152",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 152
          },
          {
            "Name": "Mortal153",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 153
          },
          {
            "Name": "Mortal154",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 154
          },
          {
            "Name": "Mortal155",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 155
          },
          {
            "Name": "Mortal156",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 156
          },
          {
            "Name": "Mortal157",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 157
          },
          {
            "Name": "Mortal158",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 158
          },
          {
            "Name": "Mortal159",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 159
          },
          {
            "Name": "Mortal160",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 160
          },
          {
            "Name": "Mortal161",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 161
          },
          {
            "Name": "Mortal162",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 162
          },
          {
            "Name": "Mortal163",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 163
          },
          {
            "Name": "Mortal164",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 164
          },
          {
            "Name": "Mortal165",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 165
          },
          {
            "Name": "Mortal166",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 166
          },
          {
            "Name": "Mortal167",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 167
          },
          {
            "Name": "Mortal168",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 168
          },
          {
            "Name": "Mortal169",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 169
          },
          {
            "Name": "Mortal170",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 170
          },
          {
            "Name": "Mortal171",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 171
          },
          {
            "Name": "Mortal172",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 172
          },
          {
            "Name": "Mortal173",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 173
          },
          {
            "Name": "Mortal174",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 174
          },
          {
            "Name": "Mortal175",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 175
          },
          {
            "Name": "Mortal176",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 176
          },
          {
            "Name": "Mortal177",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 177
          },
          {
            "Name": "Mortal178",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 178
          },
          {
            "Name": "Mortal179",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 179
          },
          {
            "Name": "Mortal180",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 180
          },
          {
            "Name": "Mortal181",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 181
          },
          {
            "Name": "Mortal182",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 182
          },
          {
            "Name": "Mortal183",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 183
          },
          {
            "Name": "Mortal184",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 184
          },
          {
            "Name": "Mortal185",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 185
          },
          {
            "Name": "Mortal186",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 186
          },
          {
            "Name": "Mortal187",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 187
          },
          {
            "Name": "Mortal188",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 188
          },
          {
            "Name": "Mortal189",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 189
          },
          {
            "Name": "Mortal190",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 190
          },
          {
            "Name": "Mortal191",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 191
          },
          {
            "Name": "Mortal192",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 192
          },
          {
            "Name": "Mortal193",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 193
          },
          {
            "Name": "Mortal194",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 194
          },
          {
            "Name": "Mortal195",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 195
          },
          {
            "Name": "Mortal196",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 196
          },
          {
            "Name": "Mortal197",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 197
          },
          {
            "Name": "Mortal198",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 198
          },
          {
            "Name": "Mortal199",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 199
          },
          {
            "Name": "Mortal200",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 200
          },
          {
            "Name": "Mortal201",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 201
          },
          {
            "Name": "Mortal202",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 202
          },
          {
            "Name": "Mortal203",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 203
          },
          {
            "Name": "Mortal204",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 204
          },
          {
            "Name": "Mortal205",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 205
          },
          {
            "Name": "Mortal206",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 206
          },
          {
            "Name": "Mortal207",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 207
          },
          {
            "Name": "Mortal208",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 208
          },
          {
            "Name": "Mortal209",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 209
          },
          {
            "Name": "Mortal210",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 210
          },
          {
            "Name": "Mortal211",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 211
          },
          {
            "Name": "Mortal212",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 212
          },
          {
            "Name": "Mortal213",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 213
          },
          {
            "Name": "Mortal214",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 214
          },
          {
            "Name": "Mortal215",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 215
          },
          {
            "Name": "Mortal216",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 216
          },
          {
            "Name": "Mortal217",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 217
          },
          {
            "Name": "Mortal218",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 218
          },
          {
            "Name": "Mortal219",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 219
          },
          {
            "Name": "Mortal220",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 220
          },
          {
            "Name": "Mortal221",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 221
          },
          {
            "Name": "Mortal222",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 222
          },
          {
            "Name": "Mortal223",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 223
          },
          {
            "Name": "Mortal224",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 224
          },
          {
            "Name": "Mortal225",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 225
          },
          {
            "Name": "Mortal226",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 226
          },
          {
            "Name": "Mortal227",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 227
          },
          {
            "Name": "Mortal228",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 228
          },
          {
            "Name": "Mortal229",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 229
          },
          {
            "Name": "Mortal230",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 230
          },
          {
            "Name": "Mortal231",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 231
          },
          {
            "Name": "Mortal232",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 232
          },
          {
            "Name": "Mortal233",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 233
          },
          {
            "Name": "Mortal234",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 234
          },
          {
            "Name": "Mortal235",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 235
          },
          {
            "Name": "Mortal236",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 236
          },
          {
            "Name": "Mortal237",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 237
          },
          {
            "Name": "Mortal238",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 238
          },
          {
            "Name": "Mortal239",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 239
          },
          {
            "Name": "Mortal240",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 240
          },
          {
            "Name": "Mortal241",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 241
          },
          {
            "Name": "Mortal242",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 242
          },
          {
            "Name": "Mortal243",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 243
          },
          {
            "Name": "Mortal244",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 244
          },
          {
            "Name": "Mortal245",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 245
          },
          {
            "Name": "Mortal246",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 246
          },
          {
            "Name": "Mortal247",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 247
          },
          {
            "Name": "Mortal248",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 248
          },
          {
            "Name": "Mortal249",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 249
          },
          {
            "Name": "Mortal250",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 250
          },
          {
            "Name": "Mortal251",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 251
          },
          {
            "Name": "Mortal252",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 252
          },
          {
            "Name": "Mortal253",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 253
          },
          {
            "Name": "Mortal254",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 254
          },
          {
            "Name": "Mortal255",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 255
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "era",
          "Era"
        ],
        "TypeDef": "Variant"
      },
      "520": {
        "TypeFields": [
          {
            "TypeName": "T::Nonce",
            "TypeId": 63
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_nonce",
          "CheckNonce"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "521": {
        "Path": [
          "frame_system",
          "extensions",
          "check_weight",
          "CheckWeight"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "522": {
        "TypeFields": [
          {
            "TypeName": "BalanceOf<T>",
            "TypeId": 51
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "ChargeTransactionPayment"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "523": {
        "TypeFields": [
          {
            "Name": "mode",
            "TypeName": "Mode",
            "TypeId": 524
          }
        ],
        "Path": [
          "frame_metadata_hash_extension",
          "CheckMetadataHash"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "524": {
        "Variants": [
          {
            "Name": "Disabled",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Enabled",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_metadata_hash_extension",
          "Mode"
        ],
        "TypeDef": "Variant"
      },
      "525": {
        "Path": [
          "ajuna_runtime",
          "Runtime"
        ],
        "TypeDef": "Composite"
      }
    },
    "Modules": {
      "0": {
        "Name": "System",
        "Storage": {
          "Prefix": "System",
          "Entries": [
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 3
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA=",
              "Docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "Name": "ExtrinsicCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "Name": "InherentsApplied",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether all inherents have been applied."
              ]
            },
            {
              "Name": "BlockWeight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 9,
                "Item2": null
              },
              "Default": "AAAAAAAA",
              "Docs": [
                " The current weight for the block."
              ]
            },
            {
              "Name": "AllExtrinsicsLen",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 13
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "Name": "ExtrinsicData",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 14
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "Name": "Number",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "Name": "ParentHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 13,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Hash of the previous block."
              ]
            },
            {
              "Name": "Digest",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 15,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "Name": "Events",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 19,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "Name": "EventCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "Name": "EventTopics",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 13,
                  "Value": 151
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "Name": "LastRuntimeUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 152,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "Name": "UpgradedToU32RefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "Name": "UpgradedToTripleRefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "Name": "ExecutionPhase",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 149,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The execution phase of the block."
              ]
            },
            {
              "Name": "AuthorizedUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 154,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " `Some` if a code upgrade has been authorized."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 155
        },
        "Events": {
          "TypeId": 22
        },
        "Constants": [
          {
            "Name": "BlockWeights",
            "TypeId": 159,
            "Value": "BwDyBSoBAAsAIEqp0QECAEABAmXNHQABC8BWDe9FAQIA4AABCwCY9z5dAQIA8AABAAACZc0dAAELwN5fWboBAgAwAQELACBKqdEBAgBAAQEHAIhSanQCAFAAAmXNHQAAAAA=",
            "Docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "Name": "BlockLength",
            "TypeId": 163,
            "Value": "AAA8AAAAUAAAAFAA",
            "Docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "Name": "BlockHashCount",
            "TypeId": 4,
            "Value": "ABAAAA==",
            "Docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "Name": "DbWeight",
            "TypeId": 165,
            "Value": "QHh9AQAAAAAA4fUFAAAAAA==",
            "Docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "Name": "Version",
            "TypeId": 166,
            "Value": "FGFqdW5hFGFqdW5hAQAAAMICAAAAAAAAMN1xjVzFMmLUAQAAANe92KJyyg1lAQAAAN9qy2iZB2CbBQAAADfjl/x8kfXkAgAAAED+OtQB+JWaBgAAANK8mJfu0I8VAwAAAPeLJ4vlP0VMAgAAAKs8BXIpH+uLAQAAALydiZBPW5I/AQAAADfIuxNQqaKoBAAAAOqT4/FvPWliAgAAAPvFd7nXR+/WAQAAAAEAAAAB",
            "Docs": [
              " Get the chain's in-code version."
            ]
          },
          {
            "Name": "SS58Prefix",
            "TypeId": 42,
            "Value": "MAU=",
            "Docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 170
        },
        "Index": 0
      },
      "1": {
        "Name": "ParachainSystem",
        "Storage": {
          "Prefix": "ParachainSystem",
          "Entries": [
            {
              "Name": "UnincludedSegment",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 171,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Latest included block descendants the runtime accepted. In other words, these are",
                " ancestors of the currently executing block which have not been included in the observed",
                " relay-chain state.",
                "",
                " The segment length is limited by the capacity returned from the [`ConsensusHook`] configured",
                " in the pallet."
              ]
            },
            {
              "Name": "AggregatedUnincludedSegment",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 181,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Storage field that keeps track of bandwidth used by the unincluded segment along with the",
                " latest HRMP watermark. Used for limiting the acceptance of new blocks with",
                " respect to relay chain constraints."
              ]
            },
            {
              "Name": "PendingValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 14,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " In case of a scheduled upgrade, this storage field contains the validation code to be",
                " applied.",
                "",
                " As soon as the relay chain gives us the go-ahead signal, we will overwrite the",
                " [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process",
                " with the new validation code. This concludes the upgrade process."
              ]
            },
            {
              "Name": "NewValidationCode",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 14,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Validation code that is set by the parachain and is to be communicated to collator and",
                " consequently the relay-chain.",
                "",
                " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                " the value."
              ]
            },
            {
              "Name": "ValidationData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 183,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The [`PersistedValidationData`] set for this block.",
                " This value is expected to be set only once per block and it's never stored",
                " in the trie."
              ]
            },
            {
              "Name": "DidSetValidationCode",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Were the validation data set to notify the relay chain?"
              ]
            },
            {
              "Name": "LastRelayChainBlockNumber",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The relay chain block number associated with the last parachain block.",
                "",
                " This is updated in `on_finalize`."
              ]
            },
            {
              "Name": "UpgradeRestrictionSignal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 185,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                " candidate will be invalid.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "Name": "UpgradeGoAhead",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 179,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Optional upgrade go-ahead signal from the relay-chain.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "Name": "RelayStateProof",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 187,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The state proof for the last relay parent block.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "RelevantMessagingState",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 189,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The snapshot of some state related to messaging relevant to the current parachain as per",
                " the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "HostConfiguration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 194,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The parachain host configuration that was obtained from the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "Name": "LastDmqMqcHead",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 196,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The last downward message queue chain head we have observed.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "LastHrmpMqcHeads",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 197,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The message queue chain heads we have observed per each channel incoming channel.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "Name": "ProcessedDownwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of downward messages processed in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpWatermark",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " HRMP watermark that was set in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "HrmpOutboundMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 200,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " HRMP messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "UpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 158,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "Name": "PendingUpwardMessages",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 158,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Upward messages that are still pending and not yet send to the relay chain."
              ]
            },
            {
              "Name": "UpwardDeliveryFeeFactor",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 202,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": [
                " The factor to multiply the base delivery fee by for UMP."
              ]
            },
            {
              "Name": "AnnouncedHrmpMessagesPerCandidate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                " announcing the weight of `on_initialize` and `on_finalize`."
              ]
            },
            {
              "Name": "ReservedXcmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "ReservedDmpWeightOverride",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 10,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The weight we reserve at the beginning of the block for processing DMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "Name": "CustomValidationHeadData",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 14,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A custom head data that should be returned as result of `validate_block`.",
                "",
                " See `Pallet::set_custom_validation_head_data` for more information."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 203
        },
        "Events": {
          "TypeId": 31
        },
        "Constants": [
          {
            "Name": "SelfParaId",
            "TypeId": 133,
            "Value": "AwgAAA==",
            "Docs": [
              " Returns the parachain ID we are running with."
            ]
          }
        ],
        "Errors": {
          "TypeId": 212
        },
        "Index": 1
      },
      "2": {
        "Name": "Timestamp",
        "Storage": {
          "Prefix": "Timestamp",
          "Entries": [
            {
              "Name": "Now",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current time for the current block."
              ]
            },
            {
              "Name": "DidUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether the timestamp has been updated in this block.",
                "",
                " This value is updated to `true` upon successful submission of a timestamp by a node.",
                " It is then checked at the end of each block execution in the `on_finalize` hook."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 213
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MinimumPeriod",
            "TypeId": 12,
            "Value": "AAAAAAAAAAA=",
            "Docs": [
              " The minimum period between blocks.",
              "",
              " Be aware that this is different to the *expected* period that the block production",
              " apparatus provides. Your chosen consensus system will generally work with this to",
              " determine a sensible block time. For example, in the Aura pallet it will be double this",
              " period on default settings."
            ]
          }
        ],
        "Errors": null,
        "Index": 2
      },
      "3": {
        "Name": "ParachainInfo",
        "Storage": {
          "Prefix": "ParachainInfo",
          "Entries": [
            {
              "Name": "ParachainId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 133,
                "Item2": null
              },
              "Default": "ZAAAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 214
        },
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 3
      },
      "4": {
        "Name": "Multisig",
        "Storage": {
          "Prefix": "Multisig",
          "Entries": [
            {
              "Name": "Multisigs",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 215,
                  "Value": 216
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of open multisig operations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 218
        },
        "Events": {
          "TypeId": 33
        },
        "Constants": [
          {
            "Name": "DepositBase",
            "TypeId": 6,
            "Value": "ALAaGkUSAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "DepositFactor",
            "TypeId": 6,
            "Value": "AEBZcwcAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "Name": "MaxSignatories",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "Errors": {
          "TypeId": 349
        },
        "Index": 4
      },
      "5": {
        "Name": "Utility",
        "Storage": null,
        "Calls": {
          "TypeId": 220
        },
        "Events": {
          "TypeId": 37
        },
        "Constants": [
          {
            "Name": "batched_calls_limit",
            "TypeId": 4,
            "Value": "qioAAA==",
            "Docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "Errors": {
          "TypeId": 350
        },
        "Index": 5
      },
      "6": {
        "Name": "Identity",
        "Storage": {
          "Prefix": "Identity",
          "Entries": [
            {
              "Name": "IdentityOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 351
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information that is pertinent to identify the entity behind an account. First item is the",
                " registration, second is the account's primary username.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "SuperOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 267
                }
              },
              "Default": "AA==",
              "Docs": [
                " The super-identity of an alternative \"sub\" identity together with its name, within that",
                " context. If the account is not some other account's sub-identity, then just `None`."
              ]
            },
            {
              "Name": "SubsOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 357
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Alternative \"sub\" identities of this account.",
                "",
                " The first item is the deposit, the second is a vector of the accounts.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "Registrars",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 359,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The set of registrars. Not expected to get very big as can only be added through a",
                " special origin (likely a council motion).",
                "",
                " The index into this can be cast to `RegistrarIndex` to get a valid value."
              ]
            },
            {
              "Name": "UsernameAuthorities",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 363
                }
              },
              "Default": "AA==",
              "Docs": [
                " A map of the accounts who are authorized to grant usernames."
              ]
            },
            {
              "Name": "AccountOfUsername",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 39,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " Reverse lookup from `username` to the `AccountId` that has registered it. The value should",
                " be a key in the `IdentityOf` map, but it may not if the user has cleared their identity.",
                "",
                " Multiple usernames may map to the same `AccountId`, but `IdentityOf` will only map to one",
                " primary username."
              ]
            },
            {
              "Name": "PendingUsernames",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 39,
                  "Value": 365
                }
              },
              "Default": "AA==",
              "Docs": [
                " Usernames that an authority has granted, but that the account controller has not confirmed",
                " that they want it. Used primarily in cases where the `AccountId` cannot provide a signature",
                " because they are a pure proxy, multisig, etc. In order to confirm it, they should call",
                " [`Call::accept_username`].",
                "",
                " First tuple item is the account and second is the acceptance deadline."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 229
        },
        "Events": {
          "TypeId": 38
        },
        "Constants": [
          {
            "Name": "BasicDeposit",
            "TypeId": 6,
            "Value": "ANTkrmwSAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered identity."
            ]
          },
          {
            "Name": "ByteDeposit",
            "TypeId": 6,
            "Value": "ABToXQ8AAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit per encoded byte for a registered identity."
            ]
          },
          {
            "Name": "SubAccountDeposit",
            "TypeId": 6,
            "Value": "ABLx8zwSAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered subaccount. This should account for the fact",
              " that one storage item's value will increase by the size of an account ID, and there will",
              " be another trie item whose value is the size of an account ID plus 32 bytes."
            ]
          },
          {
            "Name": "MaxSubAccounts",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of sub-accounts allowed per identified account."
            ]
          },
          {
            "Name": "MaxRegistrars",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " Maximum number of registrars allowed in the system. Needed to bound the complexity",
              " of, e.g., updating judgements."
            ]
          },
          {
            "Name": "PendingUsernameExpiration",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The number of blocks within which a username grant must be accepted."
            ]
          },
          {
            "Name": "MaxSuffixLength",
            "TypeId": 4,
            "Value": "BwAAAA==",
            "Docs": [
              " The maximum length of a suffix."
            ]
          },
          {
            "Name": "MaxUsernameLength",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum length of a username, including its suffix and any system-added delimiters."
            ]
          }
        ],
        "Errors": {
          "TypeId": 366
        },
        "Index": 6
      },
      "7": {
        "Name": "Proxy",
        "Storage": {
          "Prefix": "Proxy",
          "Entries": [
            {
              "Name": "Proxies",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 367
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The set of account proxies. Maps the account which has delegated to the accounts",
                " which are being delegated to, together with the amount held on deposit."
              ]
            },
            {
              "Name": "Announcements",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 371
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The announcements made by the proxy (key)."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 273
        },
        "Events": {
          "TypeId": 40
        },
        "Constants": [
          {
            "Name": "ProxyDepositBase",
            "TypeId": 6,
            "Value": "AJC7eTISAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "ProxyDepositFactor",
            "TypeId": 6,
            "Value": "AAr0rgcAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "Name": "MaxProxies",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "Name": "MaxPending",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "Name": "AnnouncementDepositBase",
            "TypeId": 6,
            "Value": "AJC7eTISAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "Name": "AnnouncementDepositFactor",
            "TypeId": 6,
            "Value": "ABToXQ8AAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 375
        },
        "Index": 7
      },
      "8": {
        "Name": "Scheduler",
        "Storage": {
          "Prefix": "Scheduler",
          "Entries": [
            {
              "Name": "IncompleteSince",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Agenda",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 376
                }
              },
              "Default": "AA==",
              "Docs": [
                " Items to be executed, indexed by the block number that they should be executed on."
              ]
            },
            {
              "Name": "Retries",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 44,
                  "Value": 380
                }
              },
              "Default": "AA==",
              "Docs": [
                " Retry configurations for items to be executed, indexed by task address."
              ]
            },
            {
              "Name": "Lookup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 1,
                  "Value": 44
                }
              },
              "Default": "AA==",
              "Docs": [
                " Lookup from a name to the block number and index of the task.",
                "",
                " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                " identities."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 275
        },
        "Events": {
          "TypeId": 43
        },
        "Constants": [
          {
            "Name": "MaximumWeight",
            "TypeId": 10,
            "Value": "CwCAbod0AQIAAAE=",
            "Docs": [
              " The maximum weight that may be scheduled per block for any dispatchables."
            ]
          },
          {
            "Name": "MaxScheduledPerBlock",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of scheduled calls in the queue for a single block.",
              "",
              " NOTE:",
              " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
              " higher limit under `runtime-benchmarks` feature."
            ]
          }
        ],
        "Errors": {
          "TypeId": 381
        },
        "Index": 8
      },
      "9": {
        "Name": "Preimage",
        "Storage": {
          "Prefix": "Preimage",
          "Entries": [
            {
              "Name": "StatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 382
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "RequestStatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 385
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "PreimageFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 389,
                  "Value": 390
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 277
        },
        "Events": {
          "TypeId": 45
        },
        "Constants": [],
        "Errors": {
          "TypeId": 391
        },
        "Index": 9
      },
      "15": {
        "Name": "Balances",
        "Storage": {
          "Prefix": "Balances",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units issued in the system."
              ]
            },
            {
              "Name": "InactiveIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 5
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgA==",
              "Docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 392
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock.",
                "",
                " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 396
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances.",
                "",
                " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "Name": "Holds",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 399
                }
              },
              "Default": "AA==",
              "Docs": [
                " Holds on account balances."
              ]
            },
            {
              "Name": "Freezes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 404
                }
              },
              "Default": "AA==",
              "Docs": [
                " Freeze locks on account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 278
        },
        "Events": {
          "TypeId": 46
        },
        "Constants": [
          {
            "Name": "ExistentialDeposit",
            "TypeId": 6,
            "Value": "AMqaOwAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
              "",
              " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
              " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
              " In case you have multiple sources of provider references, you may also get unexpected",
              " behaviour if you set this to zero.",
              "",
              " Bottom line: Do yourself a favour and make it at least one!"
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation.",
              "",
              " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account.",
              "",
              " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
            ]
          },
          {
            "Name": "MaxFreezes",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " The maximum number of individual freeze locks that can exist on an account at any time."
            ]
          }
        ],
        "Errors": {
          "TypeId": 407
        },
        "Index": 15
      },
      "16": {
        "Name": "TransactionPayment",
        "Storage": {
          "Prefix": "TransactionPayment",
          "Entries": [
            {
              "Name": "NextFeeMultiplier",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 202,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 408,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 48
        },
        "Constants": [
          {
            "Name": "OperationalFeeMultiplier",
            "TypeId": 2,
            "Value": "BQ==",
            "Docs": [
              " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "Errors": null,
        "Index": 16
      },
      "17": {
        "Name": "Vesting",
        "Storage": {
          "Prefix": "Vesting",
          "Entries": [
            {
              "Name": "VestingSchedules",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 409
                }
              },
              "Default": "AA==",
              "Docs": [
                " Vesting schedules of an account.",
                "",
                " VestingSchedules: map AccountId => Vec<VestingSchedule>"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 280
        },
        "Events": {
          "TypeId": 49
        },
        "Constants": [
          {
            "Name": "MinVestedTransfer",
            "TypeId": 6,
            "Value": "AMqaOwAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 410
        },
        "Index": 17
      },
      "20": {
        "Name": "Authorship",
        "Storage": {
          "Prefix": "Authorship",
          "Entries": [
            {
              "Name": "Author",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Author of current block."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 20
      },
      "21": {
        "Name": "CollatorSelection",
        "Storage": {
          "Prefix": "CollatorSelection",
          "Entries": [
            {
              "Name": "Invulnerables",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 411,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The invulnerable, permissioned collators. This list must be sorted."
              ]
            },
            {
              "Name": "CandidateList",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 412,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be",
                " mutually exclusive.",
                "",
                " This list is sorted in ascending order by deposit and when the deposits are equal, the least",
                " recently updated is considered greater."
              ]
            },
            {
              "Name": "LastAuthoredBlock",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Last block authored by collator."
              ]
            },
            {
              "Name": "DesiredCandidates",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Desired number of candidates.",
                "",
                " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
              ]
            },
            {
              "Name": "CandidacyBond",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Fixed amount to deposit to become a collator.",
                "",
                " When a collator calls `leave_intent` they immediately receive the deposit back."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 282
        },
        "Events": {
          "TypeId": 52
        },
        "Constants": [],
        "Errors": {
          "TypeId": 415
        },
        "Index": 21
      },
      "22": {
        "Name": "Session",
        "Storage": {
          "Prefix": "Session",
          "Entries": [
            {
              "Name": "Validators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 53,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current set of validators."
              ]
            },
            {
              "Name": "CurrentIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Current index of the session."
              ]
            },
            {
              "Name": "QueuedChanged",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the underlying economic identities or weighting behind the validators",
                " has changed in the queued validator set."
              ]
            },
            {
              "Name": "QueuedKeys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 416,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The queued keys for the next session. When the next session begins, these keys",
                " will be used to determine the validator's session keys."
              ]
            },
            {
              "Name": "DisabledValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 418,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Indices of disabled validators.",
                "",
                " The vec is always kept sorted so that we can find whether a given validator is",
                " disabled using binary search. It gets cleared when `on_session_ending` returns",
                " a new set of identities."
              ]
            },
            {
              "Name": "NextKeys",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 284
                }
              },
              "Default": "AA==",
              "Docs": [
                " The next session keys for a validator."
              ]
            },
            {
              "Name": "KeyOwner",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 419,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 283
        },
        "Events": {
          "TypeId": 54
        },
        "Constants": [],
        "Errors": {
          "TypeId": 421
        },
        "Index": 22
      },
      "23": {
        "Name": "Aura",
        "Storage": {
          "Prefix": "Aura",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 422,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current authority set."
              ]
            },
            {
              "Name": "CurrentSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 424,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current slot of this block.",
                "",
                " This will be set in `on_initialize`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [
          {
            "Name": "SlotDuration",
            "TypeId": 12,
            "Value": "cBcAAAAAAAA=",
            "Docs": [
              " The slot duration Aura should run with, expressed in milliseconds.",
              " The effective value of this type should not change while the chain is running.",
              "",
              " For backwards compatibility either use [`MinimumPeriodTimesTwo`] or a const."
            ]
          }
        ],
        "Errors": null,
        "Index": 23
      },
      "24": {
        "Name": "AuraExt",
        "Storage": {
          "Prefix": "AuraExt",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 422,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Serves as cache for the authorities.",
                "",
                " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                " but we require the old authorities to verify the seal when validating a PoV. This will",
                " always be updated to the latest AuRa authorities in `on_finalize`."
              ]
            },
            {
              "Name": "SlotInfo",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 425,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current slot paired with a number of authored blocks.",
                "",
                " Updated on each block initialization."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 24
      },
      "30": {
        "Name": "XcmpQueue",
        "Storage": {
          "Prefix": "XcmpQueue",
          "Entries": [
            {
              "Name": "InboundXcmpSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 426,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The suspended inbound XCMP channels. All others are not suspended.",
                "",
                " This is a `StorageValue` instead of a `StorageMap` since we expect multiple reads per block",
                " to different keys with a one byte payload. The access to `BoundedBTreeSet` will be cached",
                " within the block and therefore only included once in the proof size.",
                "",
                " NOTE: The PoV benchmarking cannot know this and will over-estimate, but the actual proof",
                " will be smaller."
              ]
            },
            {
              "Name": "OutboundXcmpStatus",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 429,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                " and last outbound message. If the two indices are equal, then it indicates an empty",
                " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                " case of the need to send a high-priority signal message this block.",
                " The bool is true if there is a signal message waiting to be sent."
              ]
            },
            {
              "Name": "OutboundXcmpMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 433,
                  "Value": 434
                }
              },
              "Default": "AA==",
              "Docs": [
                " The messages outbound in a given XCMP channel."
              ]
            },
            {
              "Name": "SignalMessages",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 133,
                  "Value": 434
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any signal messages waiting to be sent."
              ]
            },
            {
              "Name": "QueueConfig",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 435,
                "Item2": null
              },
              "Default": "IAAAADAAAAAIAAAA",
              "Docs": [
                " The configuration which controls the dynamics of the outbound queue."
              ]
            },
            {
              "Name": "QueueSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
              ]
            },
            {
              "Name": "DeliveryFeeFactor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 133,
                  "Value": 202
                }
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": [
                " The factor to multiply the base delivery fee by."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 286
        },
        "Events": {
          "TypeId": 55
        },
        "Constants": [
          {
            "Name": "MaxInboundSuspended",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " The maximum number of inbound XCMP channels that can be suspended simultaneously.",
              "",
              " Any further channel suspensions will fail and messages may get dropped without further",
              " notice. Choosing a high value (1000) is okay; the trade-off that is described in",
              " [`InboundXcmpSuspended`] still applies at that scale."
            ]
          },
          {
            "Name": "MaxActiveOutboundChannels",
            "TypeId": 4,
            "Value": "gAAAAA==",
            "Docs": [
              " Maximal number of outbound XCMP channels that can have messages queued at the same time.",
              "",
              " If this is reached, then no further messages can be sent to channels that do not yet",
              " have a message queued. This should be set to the expected maximum of outbound channels",
              " which is determined by [`Self::ChannelInfo`]. It is important to set this large enough,",
              " since otherwise the congestion control protocol will not work as intended and messages",
              " may be dropped. This value increases the PoV and should therefore not be picked too",
              " high. Governance needs to pay attention to not open more channels than this value."
            ]
          },
          {
            "Name": "MaxPageSize",
            "TypeId": 4,
            "Value": "AJwBAA==",
            "Docs": [
              " The maximal page size for HRMP message pages.",
              "",
              " A lower limit can be set dynamically, but this is the hard-limit for the PoV worst case",
              " benchmarking. The limit for the size of a message is slightly below this, since some",
              " overhead is incurred for encoding the format."
            ]
          }
        ],
        "Errors": {
          "TypeId": 436
        },
        "Index": 30
      },
      "31": {
        "Name": "PolkadotXcm",
        "Storage": {
          "Prefix": "PolkadotXcm",
          "Entries": [
            {
              "Name": "QueryCounter",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The latest available query index."
              ]
            },
            {
              "Name": "Queries",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 12,
                  "Value": 437
                }
              },
              "Default": "AA==",
              "Docs": [
                " The ongoing queries."
              ]
            },
            {
              "Name": "AssetTraps",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The existing asset traps.",
                "",
                " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of",
                " times this pair has been trapped (usually just 1 if it exists at all)."
              ]
            },
            {
              "Name": "SafeXcmVersion",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                " then the destinations whose XCM version is unknown are considered unreachable."
              ]
            },
            {
              "Name": "SupportedVersion",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 442,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The Latest versions that we know various locations support."
              ]
            },
            {
              "Name": "VersionNotifiers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 442,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " All locations that we have requested version notifications from."
              ]
            },
            {
              "Name": "VersionNotifyTargets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 442,
                  "Value": 443
                }
              },
              "Default": "AA==",
              "Docs": [
                " The target locations that are subscribed to our version changes, as well as the most recent",
                " of our versions we informed them of."
              ]
            },
            {
              "Name": "VersionDiscoveryQueue",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 444,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                " the `u32` counter is the number of times that a send to the destination has been attempted,",
                " which is used as a prioritization."
              ]
            },
            {
              "Name": "CurrentMigration",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 447,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current migration's stage, if any."
              ]
            },
            {
              "Name": "RemoteLockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 449,
                  "Value": 450
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on a remote chain."
              ]
            },
            {
              "Name": "LockedFungibles",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 454
                }
              },
              "Default": "AA==",
              "Docs": [
                " Fungible assets which we know are locked on this chain."
              ]
            },
            {
              "Name": "XcmExecutionSuspended",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Global suspension state of the XCM executor."
              ]
            },
            {
              "Name": "ShouldRecordXcm",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether or not incoming XCMs (both executed locally and received) should be recorded.",
                " Only one XCM program will be recorded at a time.",
                " This is meant to be used in runtime APIs, and it's advised it stays false",
                " for all other use cases, so as to not degrade regular performance.",
                "",
                " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                " implementation in the XCM executor configuration."
              ]
            },
            {
              "Name": "RecordedXcm",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 76,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " If [`ShouldRecordXcm`] is set to true, then the last XCM program executed locally",
                " will be stored here.",
                " Runtime APIs can fetch the XCM that was executed by accessing this value.",
                "",
                " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                " implementation in the XCM executor configuration."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 287
        },
        "Events": {
          "TypeId": 56
        },
        "Constants": [],
        "Errors": {
          "TypeId": 457
        },
        "Index": 31
      },
      "32": {
        "Name": "CumulusXcm",
        "Storage": null,
        "Calls": {
          "TypeId": 327
        },
        "Events": {
          "TypeId": 130
        },
        "Constants": [],
        "Errors": null,
        "Index": 32
      },
      "34": {
        "Name": "MessageQueue",
        "Storage": {
          "Prefix": "MessageQueue",
          "Entries": [
            {
              "Name": "BookStateFor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 132,
                  "Value": 458
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The index of the first and last (non-empty) pages."
              ]
            },
            {
              "Name": "ServiceHead",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 132,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The origin at which we should begin servicing."
              ]
            },
            {
              "Name": "Pages",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 461,
                  "Value": 462
                }
              },
              "Default": "AA==",
              "Docs": [
                " The map of page indices to pages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 328
        },
        "Events": {
          "TypeId": 131
        },
        "Constants": [
          {
            "Name": "HeapSize",
            "TypeId": 4,
            "Value": "AAABAA==",
            "Docs": [
              " The size of the page; this implies the maximum message size which can be sent.",
              "",
              " A good value depends on the expected message sizes, their weights, the weight that is",
              " available for processing them and the maximal needed message size. The maximal message",
              " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
            ]
          },
          {
            "Name": "MaxStale",
            "TypeId": 4,
            "Value": "CAAAAA==",
            "Docs": [
              " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
              " can happen. Once there are more stale pages than this, then historical pages may be",
              " dropped, even if they contain unprocessed overweight messages."
            ]
          },
          {
            "Name": "ServiceWeight",
            "TypeId": 162,
            "Value": "AQcAWED7ogIAcAA=",
            "Docs": [
              " The amount of weight (if any) which should be provided to the message queue for",
              " servicing enqueued items `on_initialize`.",
              "",
              " This may be legitimately `None` in the case that you will call",
              " `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to have",
              " it run in `on_idle`."
            ]
          },
          {
            "Name": "IdleMaxServiceWeight",
            "TypeId": 162,
            "Value": "AA==",
            "Docs": [
              " The maximum amount of weight (if any) to be used from remaining weight `on_idle` which",
              " should be provided to the message queue for servicing enqueued items `on_idle`.",
              " Useful for parachains to process messages at the same block they are received.",
              "",
              " If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 464
        },
        "Index": 34
      },
      "35": {
        "Name": "XTokens",
        "Storage": null,
        "Calls": {
          "TypeId": 329
        },
        "Events": {
          "TypeId": 135
        },
        "Constants": [
          {
            "Name": "SelfLocation",
            "TypeId": 59,
            "Value": "AAA=",
            "Docs": [
              " Self chain location."
            ]
          },
          {
            "Name": "BaseXcmWeight",
            "TypeId": 10,
            "Value": "Agk9AAEQ",
            "Docs": [
              " Base XCM weight.",
              "",
              " The actually weight for an XCM message is `T::BaseXcmWeight +",
              " T::Weigher::weight(&msg)`."
            ]
          },
          {
            "Name": "RateLimiterId",
            "TypeId": 36,
            "Value": "",
            "Docs": [
              " The id of the RateLimiter."
            ]
          }
        ],
        "Errors": {
          "TypeId": 465
        },
        "Index": 35
      },
      "36": {
        "Name": "OrmlXcm",
        "Storage": null,
        "Calls": {
          "TypeId": 334
        },
        "Events": {
          "TypeId": 136
        },
        "Constants": [],
        "Errors": {
          "TypeId": 466
        },
        "Index": 36
      },
      "41": {
        "Name": "Treasury",
        "Storage": {
          "Prefix": "Treasury",
          "Entries": [
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of proposals that have been made."
              ]
            },
            {
              "Name": "Proposals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 467
                }
              },
              "Default": "AA==",
              "Docs": [
                " Proposals that have been made."
              ]
            },
            {
              "Name": "Deactivated",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The amount which has been reported as inactive to Currency."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 468,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Proposal indices that have been approved but not yet awarded."
              ]
            },
            {
              "Name": "SpendCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The count of spends that have been made."
              ]
            },
            {
              "Name": "Spends",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 469
                }
              },
              "Default": "AA==",
              "Docs": [
                " Spends that have been approved and being processed."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 335
        },
        "Events": {
          "TypeId": 137
        },
        "Constants": [
          {
            "Name": "ProposalBond",
            "TypeId": 471,
            "Value": "UMMAAA==",
            "Docs": [
              " Fraction of a proposal's value that should be bonded in order to place the proposal.",
              " An accepted proposal gets these back. A rejected proposal does not."
            ]
          },
          {
            "Name": "ProposalBondMinimum",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "ProposalBondMaximum",
            "TypeId": 472,
            "Value": "AQBAY1K/xgEAAAAAAAAAAAA=",
            "Docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "SpendPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " Period between successive spends."
            ]
          },
          {
            "Name": "Burn",
            "TypeId": 471,
            "Value": "AAAAAA==",
            "Docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 473,
            "Value": "YWovdHJzcnk=",
            "Docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MaxApprovals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          },
          {
            "Name": "PayoutPeriod",
            "TypeId": 4,
            "Value": "gFEBAA==",
            "Docs": [
              " The period during which an approved treasury spend has to be claimed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 474
        },
        "Index": 41
      },
      "42": {
        "Name": "Council",
        "Storage": {
          "Prefix": "Council",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 475,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 219
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 476
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 53,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of abstentions."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 336
        },
        "Events": {
          "TypeId": 138
        },
        "Constants": [
          {
            "Name": "MaxProposalWeight",
            "TypeId": 10,
            "Value": "BwAQpdToAgCgAA==",
            "Docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 477
        },
        "Index": 42
      },
      "43": {
        "Name": "CouncilMembership",
        "Storage": {
          "Prefix": "CouncilMembership",
          "Entries": [
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 478,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current membership, stored as an ordered Vec."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current prime member, if one exists."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 338
        },
        "Events": {
          "TypeId": 139
        },
        "Constants": [],
        "Errors": {
          "TypeId": 479
        },
        "Index": 43
      },
      "44": {
        "Name": "TechnicalCommittee",
        "Storage": {
          "Prefix": "TechnicalCommittee",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 475,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 219
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 476
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 53,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of abstentions."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 339
        },
        "Events": {
          "TypeId": 140
        },
        "Constants": [
          {
            "Name": "MaxProposalWeight",
            "TypeId": 10,
            "Value": "BwAQpdToAgCgAA==",
            "Docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 480
        },
        "Index": 44
      },
      "45": {
        "Name": "TechnicalCommitteeMembership",
        "Storage": {
          "Prefix": "TechnicalCommitteeMembership",
          "Entries": [
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 481,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current membership, stored as an ordered Vec."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current prime member, if one exists."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 340
        },
        "Events": {
          "TypeId": 141
        },
        "Constants": [],
        "Errors": {
          "TypeId": 482
        },
        "Index": 45
      },
      "46": {
        "Name": "Democracy",
        "Storage": {
          "Prefix": "Democracy",
          "Entries": [
            {
              "Name": "PublicPropCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of (public) proposals that have been made so far."
              ]
            },
            {
              "Name": "PublicProps",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 483,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The public proposals. Unsorted. The second item is the proposal."
              ]
            },
            {
              "Name": "DepositOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 486
                }
              },
              "Default": "AA==",
              "Docs": [
                " Those who have locked a deposit.",
                "",
                " TWOX-NOTE: Safe, as increasing integer keys are safe."
              ]
            },
            {
              "Name": "ReferendumCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "Name": "LowestUnbaked",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The lowest referendum index representing an unbaked referendum. Equal to",
                " `ReferendumCount` if there isn't a unbaked referendum."
              ]
            },
            {
              "Name": "ReferendumInfoOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 488
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum.",
                "",
                " TWOX-NOTE: SAFE as indexes are not under an attacker���s control."
              ]
            },
            {
              "Name": "VotingOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 491
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " All votes for a particular voter. We store the balance for the number of votes that we",
                " have recorded. The second item is the total amount of delegations, that will be added.",
                "",
                " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
              ]
            },
            {
              "Name": "LastTabledWasExternal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the last referendum tabled was submitted externally. False if it was a public",
                " proposal."
              ]
            },
            {
              "Name": "NextExternal",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 497,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The referendum to be tabled whenever it would be valid to table an external proposal.",
                " This happens when a referendum needs to be tabled and one of two conditions are met:",
                " - `LastTabledWasExternal` is `false`; or",
                " - `PublicProps` is empty."
              ]
            },
            {
              "Name": "Blacklist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 498
                }
              },
              "Default": "AA==",
              "Docs": [
                " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                " (until when it may not be resubmitted) and who vetoed it."
              ]
            },
            {
              "Name": "Cancellations",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 8
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record of all proposals that have been subject to emergency cancellation."
              ]
            },
            {
              "Name": "MetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 146,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " General information concerning any proposal or referendum.",
                " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                " dump or IPFS hash of a JSON file.",
                "",
                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                " large preimages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 341
        },
        "Events": {
          "TypeId": 142
        },
        "Constants": [
          {
            "Name": "EnactmentPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " The period between a proposal being approved and enacted.",
              "",
              " It should generally be a little more than the unstake period to ensure that",
              " voting stakers have an opportunity to remove themselves from the system in the case",
              " where they are on the losing side of a vote."
            ]
          },
          {
            "Name": "LaunchPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " How often (in blocks) new public referenda are launched."
            ]
          },
          {
            "Name": "VotingPeriod",
            "TypeId": 4,
            "Value": "ACcGAA==",
            "Docs": [
              " How often (in blocks) to check for new votes."
            ]
          },
          {
            "Name": "VoteLockingPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          },
          {
            "Name": "MinimumDeposit",
            "TypeId": 6,
            "Value": "AEBjUr/GAQAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "Name": "InstantAllowed",
            "TypeId": 8,
            "Value": "AQ==",
            "Docs": [
              " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
              " want to set this permanently to `false`, others may want to condition it on things such",
              " as an upgrade having happened recently."
            ]
          },
          {
            "Name": "FastTrackVotingPeriod",
            "TypeId": 4,
            "Value": "wKgAAA==",
            "Docs": [
              " Minimum voting period allowed for a fast-track referendum."
            ]
          },
          {
            "Name": "CooloffPeriod",
            "TypeId": 4,
            "Value": "ACcGAA==",
            "Docs": [
              " Period in blocks where an external proposal may not be re-submitted after being vetoed."
            ]
          },
          {
            "Name": "MaxVotes",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of votes for an account.",
              "",
              " Also used to compute weight, an overly big value can",
              " lead to extrinsic with very big weight: see `delegate` for instance."
            ]
          },
          {
            "Name": "MaxProposals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of public proposals that can exist at any time."
            ]
          },
          {
            "Name": "MaxDeposits",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of deposits a public proposal may have at any time."
            ]
          },
          {
            "Name": "MaxBlacklisted",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of items which can be blacklisted."
            ]
          }
        ],
        "Errors": {
          "TypeId": 499
        },
        "Index": 46
      },
      "90": {
        "Name": "Assets",
        "Storage": {
          "Prefix": "Assets",
          "Entries": [
            {
              "Name": "Asset",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 500
                }
              },
              "Default": "AA==",
              "Docs": [
                " Details of an asset."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 502,
                  "Value": 503
                }
              },
              "Default": "AA==",
              "Docs": [
                " The holdings of a specific account for a specific asset."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 506,
                  "Value": 507
                }
              },
              "Default": "AA==",
              "Docs": [
                " Approved balance transfers. First balance is the amount approved for transfer. Second",
                " is the amount of `T::Currency` reserved for storing this.",
                " First key is the asset ID, second key is the owner and third key is the delegate."
              ]
            },
            {
              "Name": "Metadata",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 508
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Metadata of an asset."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 346
        },
        "Events": {
          "TypeId": 147
        },
        "Constants": [
          {
            "Name": "RemoveItemsLimit",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
              "",
              " Must be configured to result in a weight that makes each call fit in a block."
            ]
          },
          {
            "Name": "AssetDeposit",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved for an asset."
            ]
          },
          {
            "Name": "AssetAccountDeposit",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of funds that must be reserved for a non-provider asset account to be",
              " maintained."
            ]
          },
          {
            "Name": "MetadataDepositBase",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved when adding metadata to your asset."
            ]
          },
          {
            "Name": "MetadataDepositPerByte",
            "TypeId": 6,
            "Value": "AOQLVAIAAAAAAAAAAAAAAA==",
            "Docs": [
              " The additional funds that must be reserved for the number of bytes you store in your",
              " metadata."
            ]
          },
          {
            "Name": "ApprovalDeposit",
            "TypeId": 6,
            "Value": "AOQLVAIAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of funds that must be reserved when creating a new approval."
            ]
          },
          {
            "Name": "StringLimit",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum length of a name or symbol stored on-chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 510
        },
        "Index": 90
      },
      "91": {
        "Name": "AssetRegistry",
        "Storage": {
          "Prefix": "AssetRegistry",
          "Entries": [
            {
              "Name": "AssetIdLocation",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 59
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "AssetLocationId",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 59,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 347
        },
        "Events": {
          "TypeId": 148
        },
        "Constants": [],
        "Errors": {
          "TypeId": 511
        },
        "Index": 91
      }
    },
    "Extrinsic": {
      "TypeId": 512,
      "Version": 4,
      "SignedExtensions": [
        {
          "SignedIdentifier": "CheckNonZeroSender",
          "SignedExtType": 514,
          "AddSignedExtType": 36
        },
        {
          "SignedIdentifier": "CheckSpecVersion",
          "SignedExtType": 515,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckTxVersion",
          "SignedExtType": 516,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckGenesis",
          "SignedExtType": 517,
          "AddSignedExtType": 13
        },
        {
          "SignedIdentifier": "CheckMortality",
          "SignedExtType": 518,
          "AddSignedExtType": 13
        },
        {
          "SignedIdentifier": "CheckNonce",
          "SignedExtType": 520,
          "AddSignedExtType": 36
        },
        {
          "SignedIdentifier": "CheckWeight",
          "SignedExtType": 521,
          "AddSignedExtType": 36
        },
        {
          "SignedIdentifier": "ChargeTransactionPayment",
          "SignedExtType": 522,
          "AddSignedExtType": 36
        },
        {
          "SignedIdentifier": "CheckMetadataHash",
          "SignedExtType": 523,
          "AddSignedExtType": 32
        }
      ]
    },
    "TypeId": 525
  }
}