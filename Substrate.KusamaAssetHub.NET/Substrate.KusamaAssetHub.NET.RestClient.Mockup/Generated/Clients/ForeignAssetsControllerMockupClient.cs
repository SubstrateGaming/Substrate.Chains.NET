//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.KusamaAssetHub.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types;
   using Substrate.KusamaAssetHub.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class ForeignAssetsControllerMockupClient : MockupBaseClient, IForeignAssetsControllerMockupClient
   {
      private HttpClient _httpClient;
      public ForeignAssetsControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetAsset(AssetDetails value, Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation key)
      {
         return await SendMockupRequestAsync(_httpClient, "ForeignAssets/Asset", value.Encode(), Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage.AssetParams(key));
      }
      public async Task<bool> SetAccount(AssetAccount value, Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation, Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
      {
         return await SendMockupRequestAsync(_httpClient, "ForeignAssets/Account", value.Encode(), Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage.AccountParams(key));
      }
      public async Task<bool> SetApprovals(Approval value, Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation, Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
      {
         return await SendMockupRequestAsync(_httpClient, "ForeignAssets/Approvals", value.Encode(), Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage.ApprovalsParams(key));
      }
      public async Task<bool> SetMetadata(AssetMetadataT2 value, Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation key)
      {
         return await SendMockupRequestAsync(_httpClient, "ForeignAssets/Metadata", value.Encode(), Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage.MetadataParams(key));
      }
   }
}
