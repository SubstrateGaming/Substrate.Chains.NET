//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.KusamaAssetHub.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.pallet_nfts.types;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.bounded_collections.bounded_btree_set;
   using Substrate.KusamaAssetHub.NET.RestClient.Generated.Interfaces;
   
   public sealed class NftsControllerClient : BaseClient, INftsControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public NftsControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<CollectionDetails> GetCollection(U32 key)
      {
         return await SendRequestAsync<CollectionDetails>(_httpClient, "nfts/collection", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.CollectionParams(key));
      }
      public async Task<bool> SubscribeCollection(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.Collection", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.CollectionParams(key));
      }
      public async Task<U32> GetOwnershipAcceptance(Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendRequestAsync<U32>(_httpClient, "nfts/ownershipacceptance", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.OwnershipAcceptanceParams(key));
      }
      public async Task<bool> SubscribeOwnershipAcceptance(Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.OwnershipAcceptance", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.OwnershipAcceptanceParams(key));
      }
      public async Task<BaseTuple> GetAccount(BaseTuple<Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, U32, U32> key)
      {
         return await SendRequestAsync<BaseTuple>(_httpClient, "nfts/account", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.AccountParams(key));
      }
      public async Task<bool> SubscribeAccount(BaseTuple<Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, U32, U32> key)
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.Account", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.AccountParams(key));
      }
      public async Task<BaseTuple> GetCollectionAccount(BaseTuple<Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, U32> key)
      {
         return await SendRequestAsync<BaseTuple>(_httpClient, "nfts/collectionaccount", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.CollectionAccountParams(key));
      }
      public async Task<bool> SubscribeCollectionAccount(BaseTuple<Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, U32> key)
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.CollectionAccount", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.CollectionAccountParams(key));
      }
      public async Task<BitFlagsT3> GetCollectionRoleOf(BaseTuple<U32, Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
      {
         return await SendRequestAsync<BitFlagsT3>(_httpClient, "nfts/collectionroleof", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.CollectionRoleOfParams(key));
      }
      public async Task<bool> SubscribeCollectionRoleOf(BaseTuple<U32, Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.CollectionRoleOf", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.CollectionRoleOfParams(key));
      }
      public async Task<ItemDetails> GetItem(BaseTuple<U32, U32> key)
      {
         return await SendRequestAsync<ItemDetails>(_httpClient, "nfts/item", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.ItemParams(key));
      }
      public async Task<bool> SubscribeItem(BaseTuple<U32, U32> key)
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.Item", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.ItemParams(key));
      }
      public async Task<CollectionMetadata> GetCollectionMetadataOf(U32 key)
      {
         return await SendRequestAsync<CollectionMetadata>(_httpClient, "nfts/collectionmetadataof", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.CollectionMetadataOfParams(key));
      }
      public async Task<bool> SubscribeCollectionMetadataOf(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.CollectionMetadataOf", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.CollectionMetadataOfParams(key));
      }
      public async Task<ItemMetadata> GetItemMetadataOf(BaseTuple<U32, U32> key)
      {
         return await SendRequestAsync<ItemMetadata>(_httpClient, "nfts/itemmetadataof", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.ItemMetadataOfParams(key));
      }
      public async Task<bool> SubscribeItemMetadataOf(BaseTuple<U32, U32> key)
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.ItemMetadataOf", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.ItemMetadataOfParams(key));
      }
      public async Task<BaseTuple<BoundedVecT7, AttributeDeposit>> GetAttribute(BaseTuple<U32, BaseOpt<U32>, EnumAttributeNamespace, BoundedVecT6> key)
      {
         return await SendRequestAsync<BaseTuple<BoundedVecT7, AttributeDeposit>>(_httpClient, "nfts/attribute", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.AttributeParams(key));
      }
      public async Task<bool> SubscribeAttribute(BaseTuple<U32, BaseOpt<U32>, EnumAttributeNamespace, BoundedVecT6> key)
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.Attribute", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.AttributeParams(key));
      }
      public async Task<BaseTuple<U128, BaseOpt<Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>> GetItemPriceOf(BaseTuple<U32, U32> key)
      {
         return await SendRequestAsync<BaseTuple<U128, BaseOpt<Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>>(_httpClient, "nfts/itempriceof", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.ItemPriceOfParams(key));
      }
      public async Task<bool> SubscribeItemPriceOf(BaseTuple<U32, U32> key)
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.ItemPriceOf", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.ItemPriceOfParams(key));
      }
      public async Task<BoundedBTreeSet> GetItemAttributesApprovalsOf(BaseTuple<U32, U32> key)
      {
         return await SendRequestAsync<BoundedBTreeSet>(_httpClient, "nfts/itemattributesapprovalsof", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.ItemAttributesApprovalsOfParams(key));
      }
      public async Task<bool> SubscribeItemAttributesApprovalsOf(BaseTuple<U32, U32> key)
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.ItemAttributesApprovalsOf", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.ItemAttributesApprovalsOfParams(key));
      }
      public async Task<U32> GetNextCollectionId()
      {
         return await SendRequestAsync<U32>(_httpClient, "nfts/nextcollectionid");
      }
      public async Task<bool> SubscribeNextCollectionId()
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.NextCollectionId");
      }
      public async Task<PendingSwap> GetPendingSwapOf(BaseTuple<U32, U32> key)
      {
         return await SendRequestAsync<PendingSwap>(_httpClient, "nfts/pendingswapof", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.PendingSwapOfParams(key));
      }
      public async Task<bool> SubscribePendingSwapOf(BaseTuple<U32, U32> key)
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.PendingSwapOf", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.PendingSwapOfParams(key));
      }
      public async Task<CollectionConfig> GetCollectionConfigOf(U32 key)
      {
         return await SendRequestAsync<CollectionConfig>(_httpClient, "nfts/collectionconfigof", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.CollectionConfigOfParams(key));
      }
      public async Task<bool> SubscribeCollectionConfigOf(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.CollectionConfigOf", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.CollectionConfigOfParams(key));
      }
      public async Task<ItemConfig> GetItemConfigOf(BaseTuple<U32, U32> key)
      {
         return await SendRequestAsync<ItemConfig>(_httpClient, "nfts/itemconfigof", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.ItemConfigOfParams(key));
      }
      public async Task<bool> SubscribeItemConfigOf(BaseTuple<U32, U32> key)
      {
         return await _subscriptionClient.SubscribeAsync("Nfts.ItemConfigOf", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.NftsStorage.ItemConfigOfParams(key));
      }
   }
}
