//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.KusamaAssetHub.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.pallet_assets.types;
   using Substrate.KusamaAssetHub.NET.RestClient.Generated.Interfaces;
   
   public sealed class ForeignAssetsControllerClient : BaseClient, IForeignAssetsControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public ForeignAssetsControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<AssetDetails> GetAsset(Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation key)
      {
         return await SendRequestAsync<AssetDetails>(_httpClient, "foreignassets/asset", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage.AssetParams(key));
      }
      public async Task<bool> SubscribeAsset(Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation key)
      {
         return await _subscriptionClient.SubscribeAsync("ForeignAssets.Asset", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage.AssetParams(key));
      }
      public async Task<AssetAccount> GetAccount(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation, Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
      {
         return await SendRequestAsync<AssetAccount>(_httpClient, "foreignassets/account", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage.AccountParams(key));
      }
      public async Task<bool> SubscribeAccount(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation, Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
      {
         return await _subscriptionClient.SubscribeAsync("ForeignAssets.Account", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage.AccountParams(key));
      }
      public async Task<Approval> GetApprovals(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation, Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
      {
         return await SendRequestAsync<Approval>(_httpClient, "foreignassets/approvals", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage.ApprovalsParams(key));
      }
      public async Task<bool> SubscribeApprovals(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation, Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
      {
         return await _subscriptionClient.SubscribeAsync("ForeignAssets.Approvals", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage.ApprovalsParams(key));
      }
      public async Task<AssetMetadataT2> GetMetadata(Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation key)
      {
         return await SendRequestAsync<AssetMetadataT2>(_httpClient, "foreignassets/metadata", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage.MetadataParams(key));
      }
      public async Task<bool> SubscribeMetadata(Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Model.xcm.v3.multilocation.MultiLocation key)
      {
         return await _subscriptionClient.SubscribeAsync("ForeignAssets.Metadata", Substrate.KusamaAssetHub.NET.NetApiExt.Generated.Storage.ForeignAssetsStorage.MetadataParams(key));
      }
   }
}
